C***********************************************************************
C                                                                      *
C                              VENUS96                                 *
C                                                                      *
C              A GENERAL CHEMICAL DYNAMICS COMPUTER PROGRAM            *
C                                                                      *
C                                 BY                                   *
C                                                                      *
C        W.L. HASE, R.J. DUCHOVIC, X. HU, A. KOMORNICKI, K.F. LIM,     *
C                 D.-H. LU, G.H. PESLHERBE, K.N. SWAMY,                *
C        S.R. VANDE LINDE, A.J.C. VARANDAS, H. WANG, AND R.J. WOLF     *
C                                                                      *
C                              JUNE, 1996                              *
C                                                                      *
C***********************************************************************
      PROGRAM VENUS
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)

      integer,parameter::nbasis=83
      integer,parameter::n0ho=16,n0hf=18
      integer,parameter::nxho=19,nxhf=18
      integer,parameter::n2n=100

      PARAMETER(ND1=100,NDP=10)
      COMMON/PRLIST/T,V,H,TIME,NTZ,NT,ISEED0(8),NC,NX
      COMMON/INTEGR/ATIME,NI,NID
      COMMON/TABLEB/TABLE(42*ND1)
      COMMON/PRFLAG/NFQP,NCOOR,NFR,NUMR,NFB,NUMB,NFA,NUMA,NFTAU,NUMTAU,
     *NFTET,NUMTET,NFDH,NUMDH
      COMMON/PARRAY/KR(300),JR(300),KB(300),MB(300),IB(300),IA(300),
     *ITAU(300),ITET(300),IDH(300)
      COMMON/SELTB/QZ(3*ND1),NSELT,NSFLAG,NACTA,NACTB,NLINA,NLINB
      COMMON/TRANSB/TRANS,NREL
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/HFIT/PSCALA,PSCALB,VZERO
      COMMON/PSN2/PESN2,GA,RA,RB
      COMMON/FORCES/NATOMS,I3N,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      COMMON/STRETB/RSZ(100),FS(100),N1J(100),N1K(100)
      COMMON/MORSEB/RMZ(100),B(100),D(100),N2J(100),N2K(100),
     *CM1(100),CM2(100),CM3(100),CM4(100)
      COMMON/BENDB/THETAZ(200),FBZ(200),CJ(200),CK(200),RJZ(200),
     *RKZ(200),FB(200),N3J(200),N3K(200),N3M(200)
      COMMON/ALPHAB/FA(20),N4J(20),N4K(20),N4M(20),N4N(20)
      COMMON/LENJB/ALJ(200),BLJ(2000),CLJ(200),N5J(200),N5K(200),
     *NREP(200),MREP(200),LREP(200)
      COMMON/TAUB/VZTAU(20),N6I(20),N6J(20),N6K(20),N6L(20),N6M(20),N6N(
     *20)
      COMMON/EXPB/AEX(100),BEX(100),CEX(100),N7J(100),N7K(100),NPOW(100)
      COMMON/GHOSTB/GC1(20),GEX1(20),GEX2(20),N8I(20),N8J(20),N8K(20),
     *N8L(20),N8M(20),N8N(20)
      COMMON/TETRAB/N9I(20),N9J(20),N9K(20),N9L(20),N9M(20),
     *               FT0(20,6),FT2(20,6),GT0(20,6),GT2(20,6),
     *               HT0(20,6),HT2(20,6),THT(20,6),R0(20,4),
     *               THT1(20,6),THT2(20,6),FD1(20,4),
     *               HD1(20,4),GN0(20,5),FT(20,6),GT(20,6),
     *               HT(20,6),FD(20,4),HD(20,4),DLTA(20,48),
     *               TETTST,SGN1,SGN2,SGN3,SGN4
      COMMON/CUBEB/S3(4),DS3(4),CBIC(15,6),ANG1(20,6,4),GN4(20)
      COMMON/VRRB/FKRRZ(100),FKRR(100),CIJ(100),CKL(100),RIJ0(100),
     *            RKL0(100),N10I(100),N10J(100),N10K(100),N10L(100)
      COMMON/VRTB/FKRTZ(100),FKRT(100),CRT(100),R110(100),
     *            N11I(100),N11J(100),N11B(100),NRT(100)
      COMMON/VTTB/FKTTZ(100),FKTT(100),N12B(100),N12BB(100),NTT(100)
      COMMON/ANGLEB/FDH(20,4),GDH(20,4),NDH(20),N13I(20),N13J(20),
     *N13K(20),N13L(20)
      COMMON/AXTB/ZAXT(300),VAXT(300),N14I(300),N14J(300),N14K(300)
      COMMON/RYDBGB/RYDZ(100),DRYD(100),ARYD(100),VRYD(100),
     *N16J(100),N16K(100)
      COMMON/HFDB/AHFD(100),BHFD(100),RHFD(100),VHFD(100),C6HFD(100),
     *C8HFD(100),C10HFD(100),N17J(100),N17K(100)
      COMMON/LEPSA/RLZ1(100),RLZ2(100),RLZ3(100),BL1(100),BL2(100),
     *BL3(100),DL1(100),DL2(100),DL3(100),N18J1(100),N18K1(100),
     *N18J2(100),N18K2(100),N18J3(100),N18K3(100),DELTA1(100),
     *DELTA2(100),DELTA3(100),VLEPSA(100)
      COMMON/LEPSB/RLZS1(100),RLZS2(100),RLZS3(100),RLZT1(100),
     *RLZT2(100),RLZT3(100),BLS1(100),BLS2(100),BLS3(100),BLT1(100),
     *BLT2(100),BLT3(100),DLS1(100),DLS2(100),DLS3(100),DLT1(100),
     *DLT2(100),DLT3(100),VLEPSB(100),N19J1(100),N19K1(100),
     *N19J2(100),N19K2(100),N19J3(100),N19K3(100)
      COMMON/TESTIN/VRELO,INTST
      COMMON/COORS/R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      COMMON/FRAGB/WTA(NDP),WTB(NDP),LA(NDP,ND1),LB(NDP,ND1),
     *QZA(NDP,3*ND1),QZB(NDP,3*ND1),NATOMA(NDP),NATOMB(NDP)
      COMMON/TESTB/RMAX(NDP),RBAR(NDP),NTEST,NPATHS,NABJ(NDP),NABK(NDP),
     *NPATH,NAST
      COMMON/TESTSN2/GAO,NSAD,NCBA,NCAB,IBAR
      COMMON/FINALB/EROTA,EROTB,EA(3),EB(3),AMA(4),AMB(4),AN,AJ,BN,BJ,
     *OAM(4),EREL,ERELSQ,BF,SDA,SDB,DELH(NDP),ANG(16),NFINAL
      COMMON/CHEMAC/WWA(3*ND1),CA(3*ND1,3*ND1),AI(3),ENMTA,
     *AMPA(3*ND1),WWB(3*ND1),CB(3*ND1,3*ND1),BI(3),ENMTB,
     *AMPB(3*ND1),SEREL,S,BMAX,TROTA,TROTB,ANQA(3*ND1),ANQB(3*ND1),
     *TVIBA,TVIBB,NROTA,NROTB,NOB
      COMMON/WASTE/QQ(3*ND1),PP(3*ND1),WX,WY,WZ,LL(ND1),NAM
      COMMON/DIATB/NNA,JA,NNB,JB
      COMMON/RSTART/HINC,NPTS
      COMMON/RKUTTA/RAA1,RA1,RA2,RA3,RB1,RB2,RB3,RC1,RC2
      COMMON/LMODEB/ENON,EDELTA,RWANT,PWANT,NEXM,NLEV,JFLAG
      COMMON/RANCOM/RANLST(100),ISEED3(8),IBFCTR
      COMMON/GPATHB/WM(3*ND1),TEMP(NDP),AI1D(5),AAI(2),BBI(2),SYMM(5),
     *SYMA,SYMB,GTEMP(NDP),NFLAG(NDP),N1DR,N2DR
      COMMON/SYBB/TITLE(36),SYBTI
      COMMON/SADDLE/EBAR,TBAR,EZERO,NBAR 
      COMMON/INERT/UXX,UXY,UXZ,UYY,UYZ,UZZ,AIXX,AIXY,AIXZ,AIYY,
     *AIYZ,AIZZ
      COMMON/EIGVL/EIG(3*ND1)
C-----Swapnil---------------------------------------------------
      COMMON/TMPNJ/TRVA,AIA,TRVB,AIB

      DATA RHO/1.0D-8/
C
      DIMENSION ERAVA(500),ERAVB(500),QCM(3),VCM(3),AM(4)
      DIMENSION ETIM(2000),ESAV(2000),ESQ(2000),NEVIB(2000),
     *NEVIBU(2000),NEVIBL(2000),NEVIBN(2000)
      DIMENSION EBM(50),ENM(50),EBSAV(2,2000),EBSQ(2,2000),
     *ENSAV(30,2000),ENSQ(30,2000),MNLM(50)
      DIMENSION QDUM(3*ND1),TABDUM(42*ND1),GDUM(NDP),NFDUM(NDP)

C
      EXTERNAL FDATE
      CHARACTER*30 ADATE
C
      COMMON/xdp0/ DP0ho(n0ho),DP0hf(n0hf),R0ho(n0ho),R0hf(n0hf)
      COMMON/xE0/ Exhohf(nxhf,nxho),Rxho(nxho),Rxhf(nxhf)
      COMMON/xdp2/ DP0ho2(n2n),DP0hf2(n2n)
      COMMON/xE2/ Exhohf2(nxhf,nxho)
      COMMON/Nid/nterm(1:nbasis),nindex(1:nbasis,1:100,1:6)
      COMMON/xcoef/qcoef(1:nbasis)
      COMMON/hdiag/htmin,htmax
      real*8 xc(1:3,1:6),start_time,finish_time
      integer NTeffect
C      
  801 FORMAT(5X,5H  RZ=,F9.3,4H  A=,G9.3,8H  ALPHA=,
     *F9.3,/,5X,5H  C6=,G10.4,5H  C8=,G10.4,6H  C10=,G11.4)
  802 FORMAT(/,1X,A30,/)
  803 FORMAT(3X,3HNJ=,I4,5H  NK=,I4,5H  RZ=,F6.3,4H  F=,F9.3)
  804 FORMAT(3X,3HNJ=,I4,5H  NK=,I4,5H  RZ=,F6.3,4H  B=,F6.3,4H  D=,F8.3
     *)
  805 FORMAT(3X,3HNJ=,I4,5H  NK=,I4,5H  NM=,I4,9H  THETAZ=,F8.3,5H  FZ=,
     *F9.3,6H  RJZ=,F6.3,5H  CJ=,F6.3,6H  RKZ=,F6.3,5H  CK=,F6.3)
  806 FORMAT(7X,36HHARTREE-FOCK DISPERSION INTERACTIONS,/,
     *7X,23HBETWEEN ALL ATOMS FROM ,I4,4H TO ,I4,/,
     *7X,31HHAVE THE FOLLOWING PARAMETERS :,/)
  807 FORMAT(7X,36HHARTREE-FOCK DISPERSION INTERACTIONS,/,
     *7X,13HBETWEEN ATOM ,I4,11H AND ATOMS ,I4,4H TO ,I4,/,
     *7X,31HHAVE THE FOLLOWING PARAMETERS :,/)
  808 FORMAT(3X,3HNJ=,I4,5H  NK=,I4,5H  RZ=,F9.3,4H  A=,G9.3,8H  ALPHA=,
     *F9.3,/,19X,5H  C6=,G10.4,5H  C8=,G10.4,6H  C10=,G11.4)
  809 FORMAT(3X,8F9.2)
  810 FORMAT(6F11.5)
  811 FORMAT(3X,3HNT=,I5,5H  NS=,I10,6H  NIP=,I10,8H  NCROT=,I6)
  812 FORMAT(3X,6HISEED=,I12,7H  TIME=,F9.5)
  813 FORMAT(3X,30HACTIVATE WITH ORTHANT SAMPLING,/)
  814 FORMAT(1H ,16HNUMBER OF ATOMS=,I4,/20H NUMBER OF HARMONIC ,
     * 10HSTRETCHES=,I4,/,27H NUMBER OF MORSE STRETCHES=,I4,/,
     * 26H NUMBER OF HARMONIC BENDS=,I4,/,23H NUMBER OF ALPHA BENDS=,
     * I4,/,25H NUMBER OF LENNARD-JONES ,13HINTERACTIONS=,I4,/,
     * 20H NUMBER OF TORSIONS=,I4,/,22H NUMBER OF REPULSIONS=,I4,/,
     * 23H NUMBER OF GHOST PAIRS=,I4,/,23H NUMBER OF TETRAHEDRAL ,
     * 8HCENTERS=,I4,/,25H NUMBER OF R-R COUPLINGS=,I4,/,7H NUMBER,
     * 22H OF R-THETA COUPLINGS=,I4,/,22H NUMBER OF THETA-THETA,
     * 11H COUPLINGS=,I4,/,27H NUMBER OF DIHEDRAL ANGLES=,I4,/,
     * 50H NUMBER OF AXILROD-TELLER THREE-BODY INTERACTIONS=,I4,/,
     * 15H CHOICE OF SN2 ,11HPOTENTIALS=,I4,/,
     * 39H NUMBER OF RYDBERG POTENTIAL FUNCTIONS=,I4,/,
     * 45H NUMBER OF HARTREE-FOCK DISPERSION FUNCTIONS=,I4,/,
     * 41H NUMBER OF GENERALIZED LEPS(A) FUNCTIONS=,I4,/,
     * 41H NUMBER OF GENERALIZED LEPS(B) FUNCTIONS=,I4,/,
     * 41H CHOICE OF DMBE POTENTIAL ENERGY SURFACE=,I4,//)
  815 FORMAT(/)
  816 FORMAT(3X,5HNFQP=,I2,2X,7HNCOOR= ,I2,/)
  817 FORMAT(3X,4HNFR=,I2,6X,5HNUMR=,I2)
  818 FORMAT(6X,7HJ-ATOM=,I4,4X,7HK-ATOM=,I4)
  819 FORMAT(3X,4HNFB=,I2,6X,5HNUMB=,I2)
  821 FORMAT(6X,20I4)
  822 FORMAT(3X,4HNFA=,I2,6X,5HNUMA=,I2)
  823 FORMAT(15X,37HINDICES OF ALPHA ANGLES TO BE PRINTED)
  824 FORMAT(3X,6HNFTAU=,I2,4X,7HNUMTAU=,I2)
  825 FORMAT(15X,35HINDICES OF TAU ANGLES TO BE PRINTED)
  826 FORMAT(3X,62HACTIVATE WITH A BOLTZMANN DISTRIBUTION OF VIBRATIONAL
     * ENERGIES)
  827 FORMAT(28X,8HNSELT = ,I2,/)
  828 FORMAT(3X,16HMASSES OF ATOMS:,I3,6H ATOMS,/)
  829 FORMAT(6X,7HJ-ATOM=,I4,4X,7HM-ATOM=,I4,4X,7HI-ATOM=,I4)
  830 FORMAT(3X,3HNJ=,I4,5H  NK=,I4,5H  NM=,I4,5H  NN=,I4,4H  F=,F7.3)
  831 FORMAT(3X,3HNJ=,I4,5H  NK=,I4,6H  ALJ=,D12.5,6H  BLJ=,D12.5,
     *6H  CLJ=,D12.5,7H  NREP=,I4,7H  MREP=,I4,7H  LREP=,I4)
  834 FORMAT(3X,3HNI=,I4,5H  NJ=,I4,5H  NK=,I4,5H  NL=,I4,5H  NM=,
     *I4,5H  NN=,I4,5H  VZ=,F7.3)
  835 FORMAT(3X,49HACTIVATE WITH MICROCANONICAL NORMAL MODE SAMPLING,/)
  836 FORMAT(7X,F10.6,4X,F10.6,4X,F10.6)
  837 FORMAT(3X,3HNJ=,I4,5H  NK=,I4,7H  NPOW=,I4,6H  AEX=,D12.5,
     *6H  BEX=,D12.5,6H  CEX=,D12.5)
  838 FORMAT(3X,6HVZERO=,F8.3,10H KCAL/MOLE)
  839 FORMAT(3X,20HPARAMETERS FOR PATH ,I1,1H:,/,5X,5HRMAX=,F6.2,2X,5HRB
     *AR=,F6.2,2X,7HNATOMA=,I3,2X,7HNATOMB=,I3,2X,5HDELH=,F6.2)
  840 FORMAT(5X,32HINDICES FOR ATOMS OF FRAGMENT A:)
  841 FORMAT(5X,32HINDICES FOR ATOMS OF FRAGMENT B:)
  842 FORMAT(5X,43HDISTANCE BETWEEN THESE ATOMS DEFINES R.C. :,2I4)
  843 FORMAT(3X,36HNUMBER OF ADDITIONAL REACTION PATHS=,I2,/)
  844 FORMAT(3X,25HPARAMETERS FOR REACTANT A)
  845 FORMAT(5X,28HNORMAL MODE QUANTUM NUMBERS:)
  846 FORMAT(1H ,4X,48HREACTANT IS A DIATOMIC (TREATED SEMICLASSICALLY))
C----Swapnil-------------------------------
C  847 FORMAT(1H ,10X,2HN:,I3,8X,2HJ:,I3)
  847 FORMAT(5X,'TRV:',F10.3,5X,'AI:',F10.3,5X,'N:',I3,8X,'J:',I3)
  848 FORMAT(/,3X,23HINTERNUCLEAR PARAMETERS,/,5X,7HJ-ATOM=,I3,4X,
     *7HK-ATOM=,I3,4X,5HRMAX=,F6.2,4X,5HRBAR=,F6.2,4X,5HDELH=,F6.2)
  849 FORMAT(3X,3HNJ=,I4,5H  NK=,I4,5H  RZ=,F6.3,4H  B=,F6.3,4H  D=,F8.3
     *,10H   DELTA1=,F7.3)
  850 FORMAT(3X,3HNJ=,I4,5H  NK=,I4,8H  RZ(S)=,F6.3,7H  B(S)=,F6.3,
     *7H  D(S)=,F8.3,/19X,8H  RZ(T)=,F6.3,7H  B(T)=,F6.3,7H  D(T)=,
     *F8.3)
  890 FORMAT(/,3X,45HAN ERROR OCCURRED : THE CHECKPOINT FILE COULD,
     *12H NOT BE READ)
  891 FORMAT(/,3X,41HTHE OPTION NCHKP=-1 IS NOT AVAILABLE FOR ,
     *23HTRAJECTORY CALCULATIONS,/)
  894 FORMAT(/,5X,41HCOORDINATES AND MOMENTA ARE READ IN FROM ,
     *15HCHECKPOINT FILE,/,5X,20HREADING FROM UNIT 50,/)
  895 FORMAT(/,3X,33HCONTINUING RANDOM NUMBER SEQUENCE,
     *23H - READING FROM UNIT 50,/)
  896 FORMAT(5X,38HSAVE RANDOM NUMBER SEQUENCE IN UNIT 50,
     */,5X,12HNEXT SEED IS,1X,8I4,/)
  897 FORMAT(5X,47HCALCULATIONS ARE RESTARTED FROM CHECKPOINT FILE,
     */,5X,20HREADING FROM UNIT 50,//)
  898 FORMAT(3X,5H  NB=,I4,5H NBB=,I4,5H NTT=,I4,6H  FTT=,F9.5)
  899 FORMAT(3X,3HNJ=,I4,5H  NK=,I4,5H  NM=,I4,7H  ZAXT=,D12.5)
  900 FORMAT(5X,43HMOMENTS OF INERTIA IX, IY AND IZ(AMU-A**2):,3F9.3)
  901 FORMAT(1H ,2X,25HPARAMETERS FOR REACTANT B)
  902 FORMAT(5X,22HRELATIVE ENERGY(KCAL):,F7.2,5X,22HINITIAL SEPARATION(
     *A):,F6.2)
  903 FORMAT(5X,4HNOB=,I2,5X,8HBMAX(A)=,F5.1)
  904 FORMAT(5X,5HNROT=,I2,5X,5HTROT=,F9.2)
  905 FORMAT(3X,18HCUBIC BETA:   CM1=,F10.6,7H   CM2=,F10.6,7H   CM3=,
     *F10.6,7H   CM4=,F10.6)
  906 FORMAT(5X,30HEQUILIBRIUM COORDINATES FOR A:)
  907 FORMAT(5X,30HEQUILIBRIUM COORDINATES FOR B:)
  909 FORMAT(6X,25I4)
  910 FORMAT(10X,26HREACTION OCCURRED FOR PATH,I3)
  914 FORMAT(3X,34HACTIVATE WITH NORMAL MODE SAMPLING,/)
  918 FORMAT(18A4)
  919 FORMAT(1H ,18A4)
  920 FORMAT(5X,7HHSCALE=,F8.3,9H  PSCALE=,F5.2)
  921 FORMAT(5X,7HHSCALE=,F8.3)
  923 FORMAT(3X,3HNI=,I4,5H  NJ=,I4,5H  NK=,I4,5H  NL=,I4,5H  NM=,
     *I4,5H  NN=,I4,6H  GC1=,F10.5,6H  GQ1=,D15.7,6H  GQ2=,D15.7)
  925 FORMAT(3X,5HHINC=,F9.6,5X,5HNPTS=,I2,//)
  926 FORMAT(3X,3HNI=,I4,5H  NJ=,I4,5H  NK=,I4,5H  NL=,I4,
     *5H  NM=,I4)
  927 FORMAT(3X,47HQUADRATIC FORCE CONSTANTS -- EQUILIBRIUM VALUES)
  928 FORMAT(5X,4HFIJ=,F7.4,5H FIK=,F7.4,5H FIL=,F7.4,5H FJK=,F7.4,
     *5H FJL=,F7.4,5H FKL=,F7.4)
  929 FORMAT(3X,46HQUADRATIC FORCE CONSTANTS -- ASYMPTOTIC VALUES)
  930 FORMAT(3X,43HCUBIC FORCE CONSTANTS -- EQUILIBRIUM VALUES)
  931 FORMAT(5X,4HGIJ=,F7.4,5H GIK=,F7.4,5H GIL=,F7.4,5H GJK=,F7.4,
     *5H GJL=,F7.4,5H GKL=,F7.4)
  932 FORMAT(3X,42HCUBIC FORCE CONSTANTS -- ASYMPTOTIC VALUES)
  933 FORMAT(3X,45HQUARTIC FORCE CONSTANTS -- EQUILIBRIUM VALUES)
  934 FORMAT(5X,4HHIJ=,F7.4,5H HIK=,F7.4,5H HIL=,F7.4,5H HJK=,F7.4,
     *5H HJL=,F7.4,5H HKL=,F7.4)
  935 FORMAT(3X,44HQUARTIC FORCE CONSTANTS -- ASYMPTOTIC VALUES)
  936 FORMAT(3X,24HEQUILIBRIUM ANGLE VALUES)
  937 FORMAT(5X,5HTHIJ=,F8.4,6H THIK=,F8.4,6H THIL=,F8.4,
     *6H THJK=,F8.4,6H THJL=,F8.4,6H THKL=,F8.4)
  938 FORMAT(3X,34HASYMPTOTIC ANGLE VALUES -- SET ONE)
  939 FORMAT(3X,34HASYMPTOTIC ANGLE VALUES -- SET TWO)
  940 FORMAT(3X,35HOUT-OF-PLANE QUADRATIC AND QUARTIC ,
     *15HFORCE CONSTANTS)
  941 FORMAT(5X,3HF1=,F7.4,5H  F2=,F7.4,5H  F3=,F7.4,
     *5H  F4=,F7.4)
  942 FORMAT(5X,3HH1=,F7.4,5H  H2=,F7.4,5H  H3=,F7.4,
     *5H  H4=,F7.4)
  943 FORMAT(3X,34HNON-DIAGONAL CUBIC FORCE CONSTANTS)
  944 FORMAT(5X,4HGN1=,F7.4,5H GN2=,F7.4,5H GN3=,F7.4,
     *5H GN4=,F7.4,5H GN5=,F7.4)
  945 FORMAT(3X,24HEQUILIBRIUM BOND LENGTHS)
  946 FORMAT(5X,3HR1=,F12.8,5H  R2=,F12.8,5H  R3=,F12.8,
     *5H  R4=,F12.8)
  947 FORMAT(3X,6HNFTET=,I2,4X,7HNUMTET=,I2)
  948 FORMAT(15X,43HINDICES OF TETRAHEDRAL ANGLES TO BE PRINTED)
  949 FORMAT(3X,3HNI=,I4,5H  NJ=,I4,5H  NK=,I4,5H  NL=,I4,6H FRRZ=,F9.5,
     *6H RIJ0=,F8.4,5H CIJ=,F6.3,6H RKL0=,F8.4,5H CKL=,F6.3)
  950 FORMAT(3X,3HNI=,I4,5H  NJ=,I4,5H  NB=,I4,5H NRT=,I4,6H  FRT=,F9.5,
     *7H  R110=,F8.4,5H CIJ=,F6.3)
  951 FORMAT(3X,14HDIHEDRAL ANGLE,I3,6H,  NI=,I4,
     *5H  NJ=,I4,5H  NK=,I4,5H  NL=,I4)
  952 FORMAT(10X,4HN=  ,I2,6H  FDH=,F7.3,6H  GDH=,F8.3)
  953 FORMAT(3X,5HNFDH=,I2,5X,6HNUMDH=,I2)
  954 FORMAT(15X,40HINDICES OF DIHEDRAL ANGLES TO BE PRINTED)
  955 FORMAT(3X,35HACTIVATE WITH LOCAL MODE EXCITATION,/)
  956 FORMAT(3X,36HPARAMETERS FOR LOCAL MODE EXCITATION,/,6X,I3,
     *41H THE MORSE STRETCH TO BE EXCITED INTO N =,I2,6H LEVEL,/,6X,
     *19HLOCAL MODE ENERGY =,F8.3,6X,16H EDELTA(BOXING)=,F6.3,/)
  957 FORMAT(10X,'BOXING (N+1) AND (N-1) LEVELS',/,
     *10X,'E(N+1)=',F10.3,2X,'EDEL=',F8.3,/,
     *10X,'E(N-1)=',F10.3,2X,'EDEL=',F8.3)
  958 FORMAT(5X,6HMPLOT=,I2,8H  NPLOT=,I3,6H  NLM=,I3,7H  MNTR=,I3)
  960 FORMAT(3X,50H**  VZ LESS THAN ZERO INDICATES 3-FOLD TORSION  **)
  961 FORMAT(3X,38HTHE INDICES FOR THE MORSE OSCILLATORS ,
     *16HTO BE MONITORED ,4I3)
  962 FORMAT(5X,24HVIBRATIONAL TEMPERATURE=,F7.1)
  963 FORMAT(/,5X,38HDIATOM CANNOT HAVE BARRIER EXCITATION!,/)
  964 FORMAT(13X,41HSTART TRAJECTORIES AT A POTENTIAL BARRIER,//)
  965 FORMAT(3X,38HREACTION COORDINATE HAS FIXED ENERGY  ,F7.3,
     *10H  KCAL/MOL,//)
  966 FORMAT(3X,42HREACTION COORDINATE HAS FIXED TEMPERATURE ,F7.1,
     *3H  K,//)
  967 FORMAT(/,8X,47HORTHANT SAMPLING CANNOT HAVE BARRIER EXCITATION,
     *3H!!!,/)
  968 FORMAT(14X,38HINITIAL CONDITIONS ARE CHOSEN RANDOMLY,//)
  969 FORMAT(23X,21HMINIMUM ENERGY SEARCH,//)
  970 FORMAT(19X,30HINITIAL CONDITIONS ARE READ IN,//)
  971 FORMAT(22X,21H NORMAL MODE ANALYSIS,//)
  972 FORMAT(22X,23HREACTION PATH FOLLOWING,//)
  973 FORMAT(22X,23HTRAJECTORY CALCULATIONS)
  974 FORMAT(/,3X,'ACTIVATE WITH A BOLTZMAN DISTRIBUTION OF',
     *       ' TRANSLATIONAL ENERGIES',/,5X,
     *       'TRANSLATIONAL TEMPERATURE = ',F10.1,' KELVIN',
     *       /,5X,'INITIAL SEPARATION (A) = : ', F6.2,/)
C
C         INITIALIZE ARRAYS

C

      CALL CPU_TIME(START_TIME)

      CALL PES_INIT

      DO 11 I=1,2000
         NEVIB(I)=0
         NEVIBU(I)=0
         NEVIBL(I)=0
         NEVIBN(I)=0
         ESAV(I)=0.0D0
         ESQ(I)=0.0D0
   11 CONTINUE
      DO 13 I=1,20
         NDH(I)=0
   13 CONTINUE
      NMA=0
C
C         CONSTANTS WITHIN THE COMPUTER PROGRAM
C
C              BOND ENERGIES FROM KCAL/MOLE:(C1)
C              HARMONIC STRETCH FORCE CONSTANT FROM MDYN/A:(C2)
C              HARMONIC BEND FORCE CONSTANT FROM MDYN-A/RAD**2:(C3)
C              EQUILIBRIUM ANGLES FROM DEGREES:(C4)
C              GAS LAW CONSTANT IN INTEGRATION UNITS:(C5)
C              FREQUENCIES(X TWOPI) FROM CM-1:(C6)
C              PLANCK'S CONSTANT DIVIDED BY TWOPI IN INTEGRATION UNITS:(
C
      C1=0.04184000D0
      C2=6.022045D0
      C3=6.022045D0
      C4=0.01745329D0
      C5=0.083144D-3
      C6=1.8836518D-3
      C7=0.063508D0
C
      RAA1=1.0D0/2.0D0
      RA1=1.0D0-DSQRT(2.0D0)/2.0D0
      RA2=2.0D0*RA1
      RA3=2.0D0-3.0D0*DSQRT(2.0D0)/2.0D0
      RB1=2.0D0-RA1
      RB2=2.0D0*RB1
      RB3=4.0D0-RA3
      RC1=1.0D0/6.0D0
      RC2=1.0D0/3.0D0
C
      PI=4.0D0*DATAN(1.0D0)
      HALFPI=PI/2.0D0
      TWOPI=2.0D0*PI
      GAO=0.0D0
      NSAD=0
      NCBA=0
      NCAB=0
      IBAR=0
      NPTS=2
      HINC=0.001D0; NONREACT=0;NREACT=0;nxy=0;NREACT3=0
C
C         READ AND WRITE TWO TITLE CARDS
C
      READ(5,918)(TITLE(I),I=1,36)
      WRITE(6,919)(TITLE(I),I=1,36)
      call flush(6)
C
C         THE FOLLOWING LINES ARE FOR WRITING THE DATE & TIME
C         IN THE OUTPUT, RIGHT AFTER THE TITLE. THIS, OF COURSE,
C         IS MACHINE AND OPERATING SYSTEM DEPENDENT.
C
C         SUBROUTINE FDATE IS DESIGNED FOR UNIX-SUPPORTED SYSTEMS.
C         
      CALL FDATE(ADATE)
C
C         SUBROUTINE GDATE IS DESIGNED FOR UNICOS-SUPPORTED SYSTEMS
C         (CRAY COMPUTER SYSTEMS WITH CFT77 COMPILER).
C         
C     CALL GDATE(ADATE)
C
      WRITE(6,802)ADATE
      call flush(6)
C
C         READ # OF ATOMS AND # OF POTENTIAL TYPES
C
      READ(5,*)NATOMS,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,NTET,
     *NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      write(*,*)NATOMS,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,NTET,
     *NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      IF (NDMBE.NE.0) NDMBE=4
      WRITE(6,814)NATOMS,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,NTET,
     *NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      call flush(6)
      I3N=3*NATOMS
C
C         READ POTENTIAL PARAMETERS
C
      IF (NST.NE.0) THEN
         DO 15 I=1,NST
            READ(5,*)N1J(I),N1K(I),RSZ(I),FS(I)
            IF (RSZ(I).EQ.0.0D0) THEN
               RSZ(I)=RSZ(I-1)
               FS(I)=FS(I-1)
            ENDIF
            WRITE(6,803)N1J(I),N1K(I),RSZ(I),FS(I)
      call flush(6)
   15    CONTINUE
         WRITE (6,815)
      call flush(6)
      ENDIF
C
      IF (NM.NE.0) THEN
         DO 16 I=1,NM
            READ(5,*)N2J(I),N2K(I),RMZ(I),B(I),D(I)
            IF (RMZ(I).EQ.0.0D0) THEN
               RMZ(I)=RMZ(I-1)
               B(I)=B(I-1)
               D(I)=D(I-1)
            ENDIF
            WRITE(6,804)N2J(I),N2K(I),RMZ(I),B(I),D(I)
      call flush(6)
            IF (B(I).LE.0.0D0) THEN
               READ(5,*)CM1(I),CM2(I),CM3(I),CM4(I)
               WRITE(6,905)CM1(I),CM2(I),CM3(I),CM4(I)
      call flush(6)
            ENDIF
   16    CONTINUE
         WRITE (6,815)
      call flush(6)
      ENDIF
C
      IF (NB.NE.0) THEN
         DO 17 I=1,NB
            READ(5,*)N3J(I),N3K(I),N3M(I),THETAZ(I),FBZ(I),RJZ(I),
     *               CJ(I),RKZ(I),CK(I)
            IF (THETAZ(I).EQ.0.0D0) THEN
               THETAZ(I)=THETAZ(I-1)
               FBZ(I)=FBZ(I-1)
               RJZ(I)=RJZ(I-1)
               CJ(I)=CJ(I-1)
               RKZ(I)=RKZ(I-1)
               CK(I)=CK(I-1)
            ENDIF
            WRITE(6,805)N3J(I),N3K(I),N3M(I),THETAZ(I),FBZ(I),
     *                  RJZ(I),CJ(I),RKZ(I),CK(I)
   17    CONTINUE
         WRITE(6,815)
      ENDIF
C
      IF (NA.NE.0) THEN 
         DO 18 I=1,NA
            READ(5,*)N4J(I),N4K(I),N4M(I),N4N(I),FA(I)
            WRITE(6,830)N4J(I),N4K(I),N4M(I),N4N(I),FA(I)
   18    CONTINUE
         WRITE(6,815)
      ENDIF
C
      IF (NLJ.NE.0) THEN
         DO 19 I=1,NLJ
            READ(5,*)N5J(I),N5K(I),NREP(I),MREP(I),LREP(I),
     *               ALJ(I),BLJ(I),CLJ(I)
            IF (NREP(I).EQ.0.AND.MREP(I).EQ.0) THEN
               NREP(I)=NREP(I-1)
               MREP(I)=MREP(I-1)
               LREP(I)=LREP(I-1)
               ALJ(I)=ALJ(I-1)
               BLJ(I)=BLJ(I-1)
               CLJ(I)=CLJ(I-1)
            ENDIF
            WRITE(6,831)N5J(I),N5K(I),ALJ(I),BLJ(I),CLJ(I),
     *                  NREP(I),MREP(I),LREP(I)
   19    CONTINUE
         WRITE(6,815)
      ENDIF
C
      IF (NTAU.NE.0) THEN
         WRITE(6,960)
         DO 20 I=1,NTAU
            READ(5,*)N6I(I),N6J(I),N6K(I),N6L(I),N6M(I),N6N(I),VZTAU(I)
            WRITE(6,834)N6I(I),N6J(I),N6K(I),N6L(I),N6M(I),N6N(I),
     *                  VZTAU(I)
   20    CONTINUE
         WRITE(6,815)
      ENDIF
C
      IF (NEXP.NE.0) THEN
         DO 21 I=1,NEXP
            READ(5,*)N7J(I),N7K(I),NPOW(I),AEX(I),BEX(I),CEX(I)
            IF (NPOW(I).EQ.0.AND.I.NE.1) THEN
               NPOW(I)=NPOW(I-1)
               AEX(I)=AEX(I-1)
               BEX(I)=BEX(I-1)
               CEX(I)=CEX(I-1)
             ENDIF
             WRITE(6,837)N7J(I),N7K(I),NPOW(I),AEX(I),BEX(I),CEX(I)
   21    CONTINUE
         WRITE(6,815)
      ENDIF
C
      IF (NGHOST.NE.0) THEN
         DO 22 I=1,NGHOST
            READ(5,*)N8I(I),N8J(I),N8K(I),N8L(I),N8M(I),N8N(I),
     *               GC1(I),GEX1(I),GEX2(I)
            WRITE(6,923)N8I(I),N8J(I),N8K(I),N8L(I),N8M(I),N8N(I),
     *                  GC1(I),GEX1(I),GEX2(I)
   22    CONTINUE
         WRITE(6,815)
      ENDIF
C
      IF (NTET.NE.0) THEN
         DO 23 I=1,NTET
            READ(5,*)N9I(I),N9J(I),N9K(I),N9L(I),N9M(I)
            READ(5,*)(FT0(I,J),J=1,6)
            READ(5,*)(FT2(I,J),J=1,6)
            READ(5,*)(GT0(I,J),J=1,6)
            READ(5,*)(GT2(I,J),J=1,6)
            READ(5,*)(HT0(I,J),J=1,6)
            READ(5,*)(HT2(I,J),J=1,6)
            READ(5,*)(THT(I,J),J=1,6)
            READ(5,*)(THT1(I,J),J=1,6)
            READ(5,*)(THT2(I,J),J=1,6)
            READ(5,*)(FD1(I,J),J=1,4)
            READ(5,*)(HD1(I,J),J=1,4)
            READ(5,*)(GN0(I,J),J=1,5)
            READ(5,*)(R0(I,J),J=1,4)
            WRITE(6,926)N9I(I),N9J(I),N9K(I),N9L(I),N9M(I)
            WRITE(6,927)
            WRITE(6,928)(FT0(I,J),J=1,6)
            WRITE(6,929)
            WRITE(6,928)(FT2(I,J),J=1,6)
            WRITE(6,930)
            WRITE(6,931)(GT0(I,J),J=1,6)
            WRITE(6,932)
            WRITE(6,931)(GT2(I,J),J=1,6)
            WRITE(6,933)
            WRITE(6,934)(HT0(I,J),J=1,6)
            WRITE(6,935)
            WRITE(6,934)(HT2(I,J),J=1,6)
            WRITE(6,936)
            WRITE(6,937)(THT(I,J),J=1,6)
            WRITE(6,938)
            WRITE(6,937)(THT1(I,J),J=1,6)
            WRITE(6,939)
            WRITE(6,937)(THT2(I,J),J=1,6)
            WRITE(6,940)
            WRITE(6,941)(FD1(I,J),J=1,4)
            WRITE(6,942)(HD1(I,J),J=1,4)
            WRITE(6,943)
            WRITE(6,944)(GN0(I,J),J=1,5)
            WRITE(6,945)
            WRITE(6,946)(R0(I,J),J=1,4)
   23    CONTINUE
         WRITE(6,815)
      ENDIF
C
      IF (NVRR.NE.0) THEN
         DO 24 I=1,NVRR
            READ(5,*)N10I(I),N10J(I),N10K(I),N10L(I),
     *           FKRRZ(I),RIJ0(I),CIJ(I),RKL0(I),CKL(I)
            WRITE(6,949)N10I(I),N10J(I),N10K(I),N10L(I),
     *           FKRRZ(I),RIJ0(I),CIJ(I),RKL0(I),CKL(I)
   24    CONTINUE
         WRITE(6,815)
      ENDIF
C
      IF (NVRT.NE.0) THEN
         DO 25 I=1,NVRT
            READ(5,*)N11I(I),N11J(I),N11B(I),NRT(I),
     *               FKRTZ(I),R110(I),CRT(I)
            WRITE(6,950)N11I(I),N11J(I),N11B(I),NRT(I),
     *               FKRTZ(I),R110(I),CRT(I)
   25    CONTINUE
         WRITE(6,815)
      ENDIF
C
      IF (NVTT.NE.0) THEN
         DO 26 I=1,NVTT
            READ(5,*)N12B(I),N12BB(I),NTT(I),FKTTZ(I)
            WRITE(6,898)N12B(I),N12BB(I),NTT(I),FKTTZ(I)
   26    CONTINUE
         WRITE(6,815)
      ENDIF
C
      IF (NANG.NE.0) THEN
         DO 28 I=1,NANG
            READ(5,*)N13I(I),N13J(I),N13K(I),N13L(I)
            READ(5,*)NDH(I)
            K=NDH(I)
            WRITE(6,951)I,N13I(I),N13J(I),N13K(I),N13L(I)
            DO 27 J=1,K
               READ(5,*) FDH(I,J),GDH(I,J)
               WRITE(6,952) J,FDH(I,J),GDH(I,J)
   27       CONTINUE 
   28    CONTINUE
         WRITE(6,815)
      ENDIF
C
      IF (NAXT.NE.0) THEN
         DO 29 I=1,NAXT
            READ(5,*)N14I(I),N14J(I),N14K(I),ZAXT(I)
            WRITE(6,899)N14I(I),N14J(I),N14K(I),ZAXT(I)
   29    CONTINUE
         WRITE(6,815)
      ENDIF
C
      IF (NRYD.NE.0) THEN
         DO 30 I=1,NRYD
            READ(5,*)N16J(I),N16K(I),RYDZ(I),DRYD(I),ARYD(I)
            WRITE(6,804)N16J(I),N16K(I),RYDZ(I),ARYD(I),DRYD(I)
   30    CONTINUE
         WRITE(6,815)
      ENDIF
C
      IF (NHFD.NE.0) THEN
         IF (NHFD.LT.0) THEN
            I=0
            IF (NHFD.EQ.-1.OR.NHFD.EQ.-3) THEN
               READ(5,*)N17JA,N17KA,RHFDA,AHFDA,BHFDA,
     *         C6HFDA,C8HFDA,C10HFDA
               WRITE(6,806)N17JA,N17KA
               WRITE(6,801)RHFDA,AHFDA,BHFDA,C6HFDA,C8HFDA,C10HFDA
               DO 31 J=N17JA,N17KA
               DO 31 K=J+1,N17KA
                  I=I+1
                  N17J(I)=J
                  N17K(I)=K
                  RHFD(I)=RHFDA
                  RHFD(I)=RHFDA
                  AHFD(I)=AHFDA
                  BHFD(I)=BHFDA
                  C6HFD(I)=C6HFDA
                  C8HFD(I)=C8HFDA
                  C10HFD(I)=C10HFDA
   31          CONTINUE
            ENDIF
            IF (NHFD.EQ.-2.OR.NHFD.EQ.-3) THEN
               READ(5,*)N17JA,N17KA,RHFDA,AHFDA,BHFDA,
     *         C6HFDA,C8HFDA,C10HFDA,K
               IF (I.NE.0) WRITE(6,815)
               WRITE(6,807)K,N17JA,N17KA
               WRITE(6,801)RHFDA,AHFDA,BHFDA,C6HFDA,C8HFDA,C10HFDA
               DO 32 J=N17JA,N17KA
                  I=I+1
                  N17J(I)=MIN0(J,K)
                  N17K(I)=MAX0(J,K)
                  RHFD(I)=RHFDA
                  RHFD(I)=RHFDA
                  AHFD(I)=AHFDA
                  BHFD(I)=BHFDA
                  C6HFD(I)=C6HFDA
                  C8HFD(I)=C8HFDA
                  C10HFD(I)=C10HFDA
   32          CONTINUE
            ENDIF
            NHFD=I
         ELSE
            DO 33 I=1,NHFD
               READ(5,*)N17J(I),N17K(I),RHFD(I),AHFD(I),BHFD(I),
     *         C6HFD(I),C8HFD(I),C10HFD(I)
               WRITE(6,808)N17J(I),N17K(I),RHFD(I),AHFD(I),BHFD(I),
     *         C6HFD(I),C8HFD(I),C10HFD(I)
   33       CONTINUE
         ENDIF
         WRITE(6,815)
      ENDIF
C
      IF (NLEPSA.NE.0) THEN
         DO 34 I=1,NLEPSA
            READ(5,*)N18J1(I),N18K1(I),RLZ1(I),BL1(I),DL1(I),DELTA1(I)
            WRITE(6,849)N18J1(I),N18K1(I),RLZ1(I),BL1(I),DL1(I),
     *                  DELTA1(I)
            READ(5,*)N18J2(I),N18K2(I),RLZ2(I),BL2(I),DL2(I),DELTA2(I)
            WRITE(6,849)N18J2(I),N18K2(I),RLZ2(I),BL2(I),DL2(I),
     *                  DELTA2(I)
            READ(5,*)N18J3(I),N18K3(I),RLZ3(I),BL3(I),DL3(I),DELTA3(I)
            WRITE(6,849)N18J3(I),N18K3(I),RLZ3(I),BL3(I),DL3(I),
     *                  DELTA3(I)
   34    CONTINUE
         WRITE (6,815)
      ENDIF
C
      IF (NLEPSB.NE.0) THEN
         DO 35 I=1,NLEPSB
            READ(5,*)N19J1(I),N19K1(I),RLZS1(I),BLS1(I),DLS1(I),
     *               RLZT1(I),BLT1(I),DLT1(I)
            WRITE(6,850)N19J1(I),N19K1(I),RLZS1(I),BLS1(I),DLS1(I),
     *                  RLZT1(I),BLT1(I),DLT1(I)
            READ(5,*)N19J2(I),N19K2(I),RLZS2(I),BLS2(I),DLS2(I),
     *               RLZT2(I),BLT2(I),DLT2(I)
            WRITE(6,850)N19J2(I),N19K2(I),RLZS2(I),BLS2(I),DLS2(I),
     *                  RLZT2(I),BLT2(I),DLT2(I)
            READ(5,*)N19J3(I),N19K3(I),RLZS3(I),BLS3(I),DLS3(I),
     *               RLZT3(I),BLT3(I),DLT3(I)
            WRITE(6,850)N19J3(I),N19K3(I),RLZS3(I),BLS3(I),DLS3(I),
     *                  RLZT3(I),BLT3(I),DLT3(I)
   35    CONTINUE
         WRITE (6,815)
      ENDIF
C
C         CONVERT POTENTIAL PARAMETERS TO INTEGRATION UNITS
C
      DO 45 I=1,NST
         FS(I)=FS(I)*C2
   45 CONTINUE
      DO 47 I=1,NM
         D(I)=D(I)*C1
   47 CONTINUE
      DO 49 I=1,NB
         FBZ(I)=FBZ(I)*C3
         THETAZ(I)=THETAZ(I)*C4
   49 CONTINUE
      DO 51 I=1,NA
         FA(I)=FA(I)*C3
   51 CONTINUE
      DO 53 I=1,NLJ
         ALJ(I)=ALJ(I)*C1
         BLJ(I)=BLJ(I)*C1
         CLJ(I)=CLJ(I)*C1
   53 CONTINUE
      DO 55 I=1,NTAU
         VZTAU(I)=VZTAU(I)*C1
   55 CONTINUE
      DO 57 I=1,NEXP
         AEX(I)=AEX(I)*C1
         CEX(I)=CEX(I)*C1
   57 CONTINUE
      DO 59 I=1,NGHOST
         GEX1(I)=GEX1(I)*C1
         GEX2(I)=GEX2(I)*C1
   59 CONTINUE
      DO 65 I=1,NTET
         DO 61 J=1,6
            FT0(I,J)=FT0(I,J)*C3
            FT2(I,J)=FT2(I,J)*C3
            GT0(I,J)=GT0(I,J)*C3
            GT2(I,J)=GT2(I,J)*C3
            HT0(I,J)=HT0(I,J)*C3
            HT2(I,J)=HT2(I,J)*C3
            THT(I,J)=THT(I,J)*C4
            THT1(I,J)=THT1(I,J)*C4
            THT2(I,J)=THT2(I,J)*C4
   61    CONTINUE
         DO 63 J=1,4
            FD1(I,J)=FD1(I,J)*C3
            HD1(I,J)=HD1(I,J)*C3
   63    CONTINUE
         DO 64 J=1,5
            GN0(I,J)=GN0(I,J)*C3
   64    CONTINUE
   65 CONTINUE
      DO 67 I=1,NVRR
         FKRRZ(I)=FKRRZ(I)*C2
   67 CONTINUE
      DO 69 I=1,NVRT
         FKRTZ(I)=FKRTZ(I)*C2
   69 CONTINUE
      DO 71 I=1,NVTT
         FKTTZ(I)=FKTTZ(I)*C3
   71 CONTINUE
      DO 75 I=1,NANG
         K=NDH(I)
         DO 73 J=1,K
            FDH(I,J)=FDH(I,J)*C1
            GDH(I,J)=GDH(I,J)*C4
   73    CONTINUE
   75 CONTINUE
      DO 77 I=1,NAXT
         ZAXT(I)=ZAXT(I)*C1
   77 CONTINUE
      DO 78 I=1,NRYD
         DRYD(I)=DRYD(I)*C1
   78 CONTINUE
      DO 79 I=1,NHFD
         AHFD(I)=AHFD(I)*C1
         C6HFD(I)=C6HFD(I)*C1
         C8HFD(I)=C8HFD(I)*C1
         C10HFD(I)=C10HFD(I)*C1
   79 CONTINUE
      DO 80 I=1,NLEPSA
         DL1(I)=DL1(I)*C1
         DL2(I)=DL2(I)*C1
         DL3(I)=DL3(I)*C1
   80 CONTINUE
      DO 81 I=1,NLEPSB
         DLS1(I)=DLS1(I)*C1
         DLS2(I)=DLS2(I)*C1
         DLS3(I)=DLS3(I)*C1
         DLT1(I)=DLT1(I)*C1
         DLT2(I)=DLT2(I)*C1
         DLT3(I)=DLT3(I)*C1
   81 CONTINUE
C
      READ(5,*)VZERO
      WRITE(6,838)VZERO
      call flush(6)
      VZERO=VZERO*C1   !-->C1=0.04184000D0
C
C         INPUT FOR TRAJECTORIES
C
C            NSELT=-3 STATIONARY POINT SEARCH
C                     (OPTION NOT AVAILABLE IN THIS VERSION)
C            NSELT=-2 PROGRAM FINDS REACTION PATH
C            NSELT=-1 PROGRAM DOES NORMAL MODE ANALYSIS
C            NSELT=0  INITIAL Q'S AND P'S ARE READ IN
C            NSELT=1  PROGRAM FINDS MINIMUM ENERGY GEOMETRY
C                     (INITIAL Q'S AND P'S ARE READ IN)
C            NSELT=2  CHOOSE INITIAL CONDITIONS FOR ONE OR TWO REACTANTS
C                     NACT ARE THE OPTIONS FOR CHOOSING INITIAL CONDITION
C            NSELT=3  CHOOSE INITIAL CONDITIONS FROM POTENTIAL BARRIER
C
C            NACT=0   REACTANTS ARE ATOMS AND/OR DIATOMS.
C            NACT=1   ACTIVATE WITH ORTHANT SAMPLING
C            NACT=2   ACTIVATE WITH MICROCANONICAL NORMAL MODE SAMPLING
C            NACT=3   ACTIVATE WITH FIXED NORMAL MODE ENERGIES
C            NACT=4   LOCAL MODE EXCITATION
C            NACT=5   CHOOSE NORMAL MODE ENERGIES FROM A BOLTZMANN
C                     DISTRIBUTION
C
C         INITIALIZE SOME PARAMETERS.  SPECIFIC VALUES MAY BE READ IN.
C
      NATOMA(1)=0
      NATOMB(1)=0
      NT=1
      NPATHS=0
      NABJ(1)=1
      NABK(1)=1
      RMAX(1)=100.D0
      RBAR(1)=100.D0
C
      READ(5,*)NSELT,NCHKP
      READ(5,*)(W(I),I=1,NATOMS)
      WRITE(6,815)
      WRITE(6,828)NATOMS
      WRITE(6,810)(W(I),I=1,NATOMS)
      WRITE(6,815)
      WRITE(6,827)NSELT
      IF (NSELT.LT.0) GOTO 87
      WRITE(6,973)
      call flush(6)
      READ(5,*)NT,NS,NIP,NCROT
      READ(5,*)TIME

      NTeffect=NT

      SYBTI=10.0D0*TIME*DBLE(NIP)
      IF (NSELT.EQ.3) THEN
         WRITE(6,964)
         call flush(6)
         READ(5,*)NBAR,DUM
         IF (NBAR.EQ.1) THEN
            EBAR=DUM
            WRITE(6,965)EBAR
            call flush(6)
         ELSEIF (NBAR.EQ.2) THEN
            TBAR=DUM
            WRITE(6,966)TBAR
         ENDIF
      ENDIF
      IF (NSELT.EQ.2.OR.NSELT.EQ.3) READ(5,*)NACTA,NACTB,ISEED
      IF (NSELT.EQ.2) WRITE(6,968)
      IF (NSELT.EQ.1) WRITE(6,969)
      IF (NSELT.EQ.0) WRITE(6,970)
      WRITE(6,811)NT,NS,NIP,NCROT
      WRITE(6,812)ISEED,TIME
      IF (NSELT.EQ.3.AND.NACTA.EQ.1) THEN
         WRITE(6,967)
         STOP
      ENDIF
      IF (NSELT.EQ.0) GOTO 140
      WRITE(6,815)
      IF (NSELT.EQ.1) GOTO 145
      IF (NSELT.GE.2.AND.NACTA.LE.1.AND.NACTB.LE.1) GOTO 88
C
C         READ DISPLACEMENT INTERVAL, HINC.
C         READ NUMBER OF DISPLACEMENTS ABOUT CARTESIAN MINIMUM, NPTS
C
   87 READ(5,*)HINC,NPTS
      IF (NSELT.GT.0) WRITE(6,925)HINC,NPTS
      IF (NSELT.EQ.-1) THEN
         WRITE(6,971)
         WRITE(6,925)HINC,NPTS
         GOTO 145
      ENDIF
      IF (NSELT.EQ.-2) THEN
         WRITE(6,972)
         WRITE(6,925)HINC,NPTS
      ENDIF
C
C         STATIONARY POINT SEARCH
C         (OPTION NOT AVAILABLE IN THIS VERSION)
C
      IF (NSELT.EQ.-3) THEN
         READ(5,*)NT,NC,NX,TIME
C        CALL STATPT
         WRITE(6,925)HINC,NPTS
         GOTO 145
      ENDIF
C
C         READ PARAMETERS FOR REACTANTS
C
C
C             PARAMETERS FOR REACTANT A
C
   88 READ(5,*)NATOMA(1),NLINA
C     write(6,*)'here 1',NATOMA(1),NLINA
      IF (NSELT.EQ.3.AND.NATOMA(1).EQ.2) THEN
         WRITE(6,963)
         STOP
      ENDIF
      IF (NSELT.EQ.3.AND.NATOMA(1).LT.2) THEN
         WRITE(6,*)"ERROR INPUT FOR BARRIER EXCITATION!!!"
         STOP
      ENDIF
C
C             NLINA=0, MOLECULE IS NONLINEAR
C             NLINA=1, MOLECULE IS LINEAR
C
      K=NATOMA(1)
      IF (NSELT.NE.-2) WRITE(6,844)
      IF (NACTA.EQ.1) WRITE(6,813)
      IF (NACTA.EQ.2) WRITE(6,835)
      IF (NACTA.EQ.3) WRITE(6,914)
      IF (NACTA.EQ.4) WRITE(6,955)
      IF (NACTA.EQ.5) WRITE(6,826)
      WTA(1)=0.0D0
      DO 89 J=1,K
         LA(1,J)=J
         LL(J)=LA(1,J)
         WTA(1)=WTA(1)+W(J)
   89 CONTINUE
      IF (NSELT.EQ.-2) GOTO 107
      K=3*K
      READ(5,*)(QZA(1,J),J=1,K)
      WRITE(6,906)
      WRITE(6,836)(QZA(1,J),J=1,K)
C
C             TRANSFORM QZA TO THE CENTER OF MASS / PRINCIPAL
C             AXES OF INERTIA FRAME
C
      DUM=0.0D0
      DO 90 J=1,K/3
         DUM1=QZA(1,3*J)-QZA(1,3)
         DUM=DUM+DUM1*DUM1
   90 CONTINUE
      IF (DUM.LE.1.0D-10) THEN
         DO 91 J=1,K/3
            QZDUM=QZA(1,3*J)
            QZA(1,3*J)=QZA(1,3*J-1)
            QZA(1,3*J-1)=QZA(1,3*J-2)
            QZA(1,3*J-2)=QZDUM
   91    CONTINUE
      ENDIF
      DO 92 J=1,K
         Q(J)=QZA(1,J)
   92 CONTINUE
      WT=WTA(1)
      N=NATOMA(1)
      CALL CENMAS(WT,QCM,VCM,N)
      CALL ROTN(AM,EROT,N)
      CA(1,1)=AIXX
      CA(2,1)=-AIXY
      CA(2,2)=AIYY
      CA(3,1)=-AIXZ
      CA(3,2)=-AIYZ
      CA(3,3)=AIZZ
      CALL EIGN(CA,CB,3,RHO)
      AI(1)=EIG(1)
      AI(2)=EIG(2)
      AI(3)=EIG(3)
C
C     TRANSPOSE MATRIX CB
C
      DO II=1,3
         DO JJ=1,II
            DUM=CB(II,JJ)
            CB(II,JJ)=CB(JJ,II)
            CB(JJ,II)=DUM
         END DO
      END DO
C
C        SET PHASE OF THE EIGENVECTOR
C
      DO 95 I=1,3
         CBMAX=0.0D0
         DO 93 J=1,3
            IF (DABS(CB(J,I)).GE.DABS(CBMAX)) CBMAX=CB(J,I)
   93    CONTINUE
         IF (CBMAX.LT.0.0D0) THEN
            DO 94 J=1,3
               CB(J,I)=-CB(J,I)
   94       CONTINUE
         ENDIF
   95 CONTINUE
C
C        CHECK FOR RIGHT-HANDED CARTESIAN SYSTEM
C
      DETCB1=CB(1,1)*(CB(2,2)*CB(3,3)-CB(2,3)*CB(3,2))
      DETCB2=CB(1,2)*(CB(2,3)*CB(3,1)-CB(2,1)*CB(3,3))
      DETCB3=CB(1,3)*(CB(2,1)*CB(3,2)-CB(2,2)*CB(3,1))
      DETCB=DETCB1+DETCB2+DETCB3
      IF (DETCB.LT.0.0) THEN
         DO 96 J=1,3
            CB(J,1)=-CB(J,1)
   96    CONTINUE
      END IF
      DO 99 J=1,K/3
         DO 98 JL=1,3
            DUM=0.0D0
            DO 97 L=1,3
               DUM=DUM+CB(L,JL)*QQ(3*J+L-3)
   97       CONTINUE
            QZA(1,3*J+JL-3)=DUM
   98    CONTINUE
   99 CONTINUE
C
C             PARAMETERS FOR DIATOM
C             DIATOM IS TREATED SEMICLASSICALLY BY EBK QUANTIZATION
C
      IF (NATOMA(1).GT.2) GOTO 100
      IF (NATOMA(1).EQ.1) GOTO 107
C-----Swapnil----------------------
      READ(5,*)TRVA,AIA,NNA,JA
      WRITE(6,846)
      WRITE(6,847)TRVA,AIA,NNA,JA   ! N vibrational quantum number, J rotational quantum number
      GOTO 107
C
C             REACTANT A IS A POLYATOMIC
C
  100 CONTINUE
      IF (NACTA.EQ.1.OR.NACTA.EQ.2) THEN
         READ(5,*)ENMTA,PSCALA
         IF (NACTA.EQ.1) WRITE(6,920)ENMTA,PSCALA
         IF (NACTA.EQ.2) WRITE(6,921)ENMTA
         GOTO 105
      ENDIF
C
      IF (NACTA.EQ.3 .OR. NACTA.EQ.4) THEN
         J=K-6+NLINA
         IF (NSELT.NE.3) THEN
            READ(5,*)(ANQA(I),I=1,J)
            WRITE(6,845)
            WRITE(6,809)(ANQA(I),I=1,J)
         ELSE
            READ(5,*)(ANQA(I),I=1,J-1)
            WRITE(6,845)
            WRITE(6,809)(ANQA(I),I=1,J-1)
         ENDIF
      ELSE
         READ(5,*)TVIBA
         write(*,*)TVIBA
         WRITE(6,962)TVIBA
      ENDIF
C
C             SET NMA AND INITIALIZE N.M. ARRAYS
C
      NMA=K-6+NLINA
C
      DO 103 I=1,NMA
         DO 101 J=1,2000
            ENSAV(I,J)=0.0D0
            ENSQ(I,J)=0.0D0
  101    CONTINUE
  103 CONTINUE
C
C             NROTA=0, SAMPLE ROTATIONAL ENERGY FROM A THERMAL
C                      DISTRIBUTION
C             NROTA=1, ROTATIONAL ENERGY OF EACH AXIS IS RT/2
C
  105 CONTINUE
      READ(5,*)NROTA,TROTA
      WRITE(6,904)NROTA,TROTA
      WRITE(6,900)(AI(I),I=1,3)
C
C             PARAMETERS FOR LOCAL MODE EXCITATION
C             NEXM    : THE INDEX OF THE MORSE OSCILLATOR TO BE EXCITED
C             NLEV   : THE QUANTUM NUMBER OF THE INITIAL EXCITATION
C             ENON    : THE INITIAL BOND ENERGY IN KCAL/MOLE
C             EDELTA  : BOXING LENGTH OF ENERGY
C
      IF (NACTA.EQ.4) THEN
         WRITE(6,815)
         READ(5,*)NEXM,NLEV
         CALL LMODE(0,ENU,EDELTU,ENL,EDELTL)
         WRITE(6,956)NEXM,NLEV,ENON,EDELTA
         WRITE(6,957)ENU,EDELTU,ENL,EDELTL
      ENDIF
C
C             PARAMETERS FOR PLOTTING MODE ENERGIES
C
C             NPLOT   : THE INCREMENT IN CYCLE COUNT FOR LISTING MODE
C                       ENERGIES
C             MPLOT   : FOR THE TIME AVERAGED PLOTTING
C                       MPLOT=0 : DO NOT PRINT ON FILE 12 THE AVERAGE
C                                 MODE ENERGIES AT CYCLES
C                       MPLOT=1 : PRINT ON FILE 12 THE AVERAGE MODE
C                                 ENERGIES AT CYCLES INCREMENTED BY
C                                 NPLOT
C             NLM     : NUMBER OF BOND MODES MONITORED IN ADDITION TO
C                       THE EXCITED ONE
C             MNTR    : INDEX FOR NORMAL MODE WHOSE POPULATION IS TO BE
C                       MONITORED
C
C      READ(5,*)MPLOT,NPLOT,NLM,MNTR
C      WRITE(6,958)MPLOT,NPLOT,NLM,MNTR
C
C             INITIALIZE THE LOCAL MODE ARRAYS EXCEPT THE EXCITED ONE
C
C      IF (MPLOT.EQ.1.AND.NLM.NE.0) THEN
C         IF (NLM.NE.0) THEN
C            READ(5,*)(MNLM(I),I=1,NLM)
C            WRITE(6,961)(MNLM(I),I=1,NLM)
C            DO 106 I=1,NLM
C            DO 106 J=1,2000
C               EBSAV(I,J)=0.0D0
C               EBSQ(I,J)=0.0D0
C  106       CONTINUE
C         ENDIF
C      ENDIF
C
C             PARAMETERS FOR REACTANT B
C
  107 READ(5,*)NATOMB(1),NLINB
      IF(NSELT.EQ.3.AND.NATOMB(1).NE.0)THEN
         WRITE(6,*)"ERROR INPUT FOR BARRIER EXCITATION!!!"
         STOP
      ENDIF
      IF (NATOMB(1).EQ.0.AND.NSELT.EQ.-2) GOTO 145
      IF (NATOMB(1).EQ.0) GOTO 140
      IF (NSELT.NE.-2) THEN
         WRITE(6,815)
         WRITE(6,901)
      ENDIF
      IF (NACTB.EQ.1) WRITE(6,813)
      IF (NACTB.EQ.2) WRITE(6,835)
      IF (NACTB.EQ.3) WRITE(6,914)
      IF (NACTB.EQ.4) WRITE(6,955)
      IF (NACTB.EQ.5) WRITE(6,826)
      K=NATOMB(1)
      WTB(1)=0.0D0
      DO 109 J=1,K
         M=J+NATOMA(1)
         LB(1,J)=M
         LL(J)=LB(1,J)
         WTB(1)=WTB(1)+W(M)
  109 CONTINUE
      IF (NSELT.EQ.-2) GOTO 145
      K=3*K
      READ(5,*)(QZB(1,J),J=1,K)
      WRITE(6,907)
      WRITE(6,836)(QZB(1,J),J=1,K)
C
C             TRANSFORM QZB TO THE CENTER OF MASS / PRINCIPAL
C             AXES OF INERTIA FRAME
C
      DUM=0.0D0
      DO 111 J=1,K/3
         DUM1=QZB(1,3*J)-QZB(1,3)
         DUM=DUM+DUM1*DUM1
  111 CONTINUE
      IF (DUM.LE.1.0D-10) THEN
         DO 113 J=1,K/3
            QZDUM=QZB(1,3*J)
            QZB(1,3*J)=QZB(1,3*J-1)
            QZB(1,3*J-1)=QZB(1,3*J-2)
            QZB(1,3*J-2)=QZDUM
  113    CONTINUE
      ENDIF
C
      I=3*NATOMA(1)
      DO 115 J=1,K
         Q(J+I)=QZB(1,J)
  115 CONTINUE
      WT=WTB(1)
      N=NATOMB(1)
      CALL CENMAS(WT,QCM,VCM,N)
      CALL ROTN(AM,EROT,N)
      CA(1,1)=AIXX
      CA(2,1)=-AIXY
      CA(2,2)=AIYY
      CA(3,1)=-AIXZ
      CA(3,2)=-AIYZ
      CA(3,3)=AIZZ
      CALL EIGN(CA,CB,3,RHO)
      BI(1)=EIG(1)
      BI(2)=EIG(2)
      BI(3)=EIG(3)
C
C     TRANSPOSE MATRIX CB
C
      DO II=1,3
         DO JJ=1,II
            DUM=CB(II,JJ)
            CB(II,JJ)=CB(JJ,II)
            CB(JJ,II)=DUM
         END DO
      END DO
C
C        SET PHASE OF THE EIGENVECTOR
C
      DO 118 ICB=1,3
         CBMAX=0.0D0
         DO 116 J=1,3
            IF (DABS(CB(J,ICB)).GE.DABS(CBMAX)) CBMAX=CB(J,ICB)
  116    CONTINUE
         IF (CBMAX.LT.0.0D0) THEN
            DO 117 J=1,3
               CB(J,ICB)=-CB(J,ICB)
  117       CONTINUE
         ENDIF
  118 CONTINUE
C
C        CHECK FOR RIGHT-HANDED CARTESIAN SYSTEM
C
      DETCB1=CB(1,1)*(CB(2,2)*CB(3,3)-CB(2,3)*CB(3,2))
      DETCB2=CB(1,2)*(CB(2,3)*CB(3,1)-CB(2,1)*CB(3,3))
      DETCB3=CB(1,3)*(CB(2,1)*CB(3,2)-CB(2,2)*CB(3,1))
      DETCB=DETCB1+DETCB2+DETCB3
      IF (DETCB.LT.0.0) THEN
         DO 137 J=1,3
            CB(J,1)=-CB(J,1)
  137    CONTINUE
      ENDIF
      DO 139 J=1,K/3
         DO 138 JL=1,3
            DUM=0.0D0
            DO 127 L=1,3
               DUM=DUM+CB(L,JL)*QQ(I+3*J+L-3)
  127       CONTINUE
            QZB(1,3*J+JL-3)=DUM
  138    CONTINUE
  139 CONTINUE
C
C             PARAMETERS FOR DIATOM
C             DIATOM IS TREATED SEMICLASSICALLY BY EBK QUANTIZATION
C
      IF (NATOMB(1).LE.2) THEN
         IF (NATOMB(1).NE.1) THEN
C-----------Swapnil-----------------------
            READ(5,*)TRVB,AIB,NNB,JB
            WRITE(6,846)
            WRITE(6,847)TRVB,AIB,NNB,JB
            WRITE(6,*)
         ENDIF
      ELSE
C
C             REACTANT B IS A POLYATOMIC
C
         IF (NACTB.EQ.1.OR.NACTB.EQ.2) THEN
            READ(5,*)ENMTB,PSCALB
            IF(NACTB.EQ.1)WRITE(6,920)ENMTB,PSCALB
            IF(NACTB.EQ.2)WRITE(6,921)ENMTB
         ELSE
            IF (NACTB.EQ.3.OR.NACTB.EQ.4) THEN
               J=K-6+NLINB
               READ(5,*)(ANQB(I),I=1,J)
               WRITE(6,845)
               WRITE(6,809)(ANQB(I),I=1,J)
            ELSE
               READ(5,*)TVIBB
               WRITE(6,962)TVIBB
            ENDIF
         ENDIF
C
C             NROTB=0, SAMPLE ROTATIONAL ENERGY FROM A THERMAL
C                      DISTRIBUTION
C             NROTB=1, ROTATIONAL ENERGY OF EACH AXIS IS RT/2
C
         READ(5,*)NROTB,TROTB
         WRITE(6,904)NROTB,TROTB
         WRITE(6,900)(BI(I),I=1,3)
      ENDIF
C
C         REACTANT A AND B INTERNUCLEAR PARAMETERS FOR THE FIRST
C         REACTION PATH.
C
      READ(5,*)NABJ(1),NABK(1),RMAX(1),RBAR(1),DELH(1)
      WRITE(6,848)NABJ(1),NABK(1),RMAX(1),RBAR(1),DELH(1)
C
C             NOB=0, RANDOMLY SAMPLE IMPACT PARAMETER BETWEEN 0 AND BMAX
C             NOB=1, IMPACT PARAMETER EQUALS BMAX
C
      READ(5,*)NREL,SEREL,S
      IF (NREL.EQ.1) THEN
         WRITE(6,902)SEREL,S
         SEREL=SEREL*C1
      ELSEIF (NREL.EQ.0) THEN
         TRANS=SEREL
         WRITE(6,974)TRANS,S
      ENDIF 
      READ(5,*)NOB,BMAX
      WRITE(6,903)NOB,BMAX
C
C         PARAMETERS FOR CLASSIFYING REACTION EVENTS
C         NPATHS=NUMBER OF REACTION PATHS IN ADDITION TO THE
C         REACTION PATH 1, WHICH IS FOR REACTANTS A AND B
C
  140 CONTINUE
      WRITE(6,815)
      READ(5,*)NPATHS
      WRITE(6,843)NPATHS
      IF (NPATHS.NE.0) THEN
         M=NPATHS+1
         DO 144 I=2,M
            READ(5,*)RMAX(I),RBAR(I),NATOMA(I),NATOMB(I),DELH(I)
            WRITE(6,839)I,RMAX(I),RBAR(I),NATOMA(I),NATOMB(I),DELH(I)
            READ(5,*)NABJ(I),NABK(I)
            WRITE(6,842)NABJ(I),NABK(I)
            K=NATOMA(I)
            READ(5,*)(LA(I,J),J=1,K)
            WTA(I)=0.0D0
            DO 142 J=1,K
               WTA(I)=WTA(I)+W(LA(I,J))
  142       CONTINUE
            WRITE(6,840)
            WRITE(6,909)(LA(I,J),J=1,K)
            K=3*NATOMA(I)
            READ(5,*)(QZA(I,J),J=1,K)
            WRITE(6,906)
            WRITE(6,836)(QZA(I,J),J=1,K)
            K=NATOMB(I)
            IF (K.EQ.0) GOTO 144
            READ(5,*)(LB(I,J),J=1,K)
            WTB(I)=0.0D0
            DO 143 J=1,K
               WTB(I)=WTB(I)+W(LB(I,J))
  143       CONTINUE
            WRITE(6,841)
            WRITE(6,909)(LB(I,J),J=1,K)
            K=3*NATOMB(I)
            READ(5,*)(QZB(I,J),J=1,K)
            WRITE(6,907)
            WRITE(6,836)(QZB(I,J),J=1,K)
            WRITE(6,815)
  144    CONTINUE
      ENDIF
  145 CONTINUE
C
C         INFORMATION TO BE PRINTED
C
      READ(5,*)NFQP,NCOOR
      WRITE(6,816)NFQP,NCOOR
C
C         NFQP=0, DO NOT PRINT Q AND P ARRAYS
C         NCOOR=0, DO NOT WRITE COORDINATES INTO UNIT 8
C
      READ(5,*)NFR,NUMR
      WRITE(6,817)NFR,NUMR
      IF (NFR.NE.0) THEN
         READ(5,*)(JR(I),KR(I),I=1,NUMR)
         WRITE(6,*)
         DO 200 I=1,NUMR
            WRITE(6,818)JR(I),KR(I)
  200    CONTINUE
         WRITE(6,815)
      ENDIF
C
      READ(5,*)NFB,NUMB
      WRITE(6,819)NFB,NUMB
      IF (NFB.NE.0) THEN
         WRITE(6,*)
         READ(5,*)(KB(I),IB(I),MB(I),I=1,NUMB)
         WRITE(6,829)(KB(I),IB(I),MB(I),I=1,NUMB)
         WRITE(6,815)
      ENDIF
C
      READ(5,*)NFA,NUMA
      WRITE(6,822)NFA,NUMA
      IF (NFA.NE.0) THEN
         READ(5,*)(IA(I),I=1,NUMA)
         WRITE(6,823)
         WRITE(6,821)(IA(I),I=1,NUMA)
         WRITE(6,815)
      ENDIF
C
      READ(5,*)NFTAU,NUMTAU
      WRITE(6,824)NFTAU,NUMTAU
      IF (NFTAU.NE.0) THEN
         READ(5,*)(ITAU(I),I=1,NUMTAU)
         WRITE(6,825)
         WRITE(6,821)(ITAU(I),I=1,NUMTAU)
      ENDIF
C
      READ(5,*)NFTET,NUMTET
      WRITE(6,947)NFTET,NUMTET
      IF (NFTET.NE.0) THEN
         READ(5,*)(ITET(I),I=1,NUMTET)
         WRITE(6,948)
         WRITE(6,821)(ITET(I),I=1,NUMTET)
      ENDIF
C
      READ(5,*) NFDH,NUMDH
      WRITE(6,953) NFDH,NUMDH
      IF (NFDH.NE.0) THEN
         READ(5,*)(IDH(I),I=1,NUMDH)
         WRITE(6,954)
         WRITE(6,821)(IDH(I),I=1,NUMDH)
      ENDIF
      WRITE(6,815)
C
C         SET FLAGS AND PARAMETERS
C
C             NSFLAG:  FOR CALCULATING QMIN,QMAX, AND PMAX IN 'INITQP'
C             NAM:     FOR CALCULATTING ANGULAR MOMENTUM IN 'ROTN',
C                      'INITQP', AND 'ORTHAN'
C             NAST:    FOR PASSING BARRIER IN 'MAIN'
C             NFINAL:  FOR CALCULATING EROT IN 'FINAL'.
C
      NSFLAG=0
      NAM=0
      ATIME=TIME/1440.0D0
      NI=I3N
      NID=2*NI
      NTZ=0  ! 
C
C         IF NCHKP .NE. 0 THEN CALCULATIONS ARE RESTARTED FROM CHECKPOINT
C         FILE (ANY TYPE OF VENUS CALCULATION PRODUCES A CHECKPOINT FILE
C         IN UNIT 50, WHICH CONTAINS Q,P,QDOT,etc. AND THE RANDOM NUMBER
C         GENERATOR INFORMATION).
C
C         IF NCHKP IS 1, CALCULATIONS ARE RESTARTED WHERE LEFT, IN
C         CASE OF A COMPUTER CRASH, OR UNDER-ESTIMATION OF THE CYCLE
C         NUMBER IN REACTION PATH FOLLOWING, NUMBER OF TRAJECTORIES,
C         ETC. (THE CODE FOLLOWS INPUT UPDATES)
C
C         IF NCHKP IS -1, NEW CALCULATIONS ARE STARTED WITH CARTESIAN
C         COORDINATES AND MOMENTA READ FROM CHECKPOINT FILE. FOR EXAMPLE,
C         ONE CAN PERFORM A SEQUENCE OF CALCULATIONS WITH THIS OPTION :
C         MINIMUM ENERGY SEARCH, REFINEMENT BY REACTION PATH FOLLOWING,
C         NORMAL MODE ANALYSIS, WHERE Q AND P'S CAN BE PASSED THRU THE
C         CHECKPOINT FILE. THIS OPTION IS AVAILABLE FOR NSELT .NE. 2 ONLY.
C
C         IF NCHKP IS -2, THEN AN ARRAY FOR THE RANDOM NUMBER GENERATOR IS
C         READ IN FROM CHECKPOINT FILE IN UNIT 50.
C
      IF(NCHKP.EQ.0)GOTO 223
C
      IF (NCHKP.EQ.-2) THEN
         OPEN(50,FORM='UNFORMATTED')
         READ(50,ERR=222)QDUM,QDUM,QDUM,QDUM,TABDUM,VDUM,RANLST,GDUM,
     *        NFDUM,ISEED0,ISEED3,NDUM,NDUM,NDUM,NDUM,NDUM,IBFCTR
         CLOSE(50)
         WRITE(6,895)
         GOTO 451
      ENDIF
C
      OPEN(50,FORM='UNFORMATTED')
      READ(50,ERR=222)Q,P,QDOT,PDOT,TABLE,VRELO,RANLST,GTEMP,NFLAG,
     *ISEED0,ISEED3,NX,NC,NTZ,INTST,NAST,IBFCTR
      CLOSE(50)
      CALL DVDQ
      CALL ENERGY
      IF (NCHKP.EQ.-1) WRITE(6,894)
      IF (NCHKP.EQ.1) WRITE(6,897)
C
      IF (NSELT.LT.0) THEN
         IF (NSELT.NE.-3.OR.NCHKP.EQ.-1) NTZ=1
         NDUM=MAX0(1,NTZ)
         DO 220 J=1,NDUM
            READ(5,*)(QDUM(I),I=1,I3N)
            READ(5,*)(QDUM(I),I=1,I3N)
  220    CONTINUE
         DO 219 I=1,I3N
            P(I)=0.0D0
  219    CONTINUE
         IF (NCHKP.EQ.-1) THEN
            NC=0
            NX=0
         ENDIF
         IF (NSELT.EQ.-2) CALL MPATH
         CALL GWRITE
         IF (NSELT.EQ.-3) THEN
C           CALL STATPT
            GOTO 451
         ENDIF
         I=0
         CALL NMODE(NATOMS,I)
      ENDIF
C
      IF (NCOOR.EQ.1) CALL SYBMOL
      IF (NSELT.EQ.0.OR.NSELT.EQ.1) THEN
         NDUM=MAX0(1,NTZ)
         IF (NC.EQ.NS) NDUM=NDUM-1
         DO 221 J=1,NDUM
            READ(5,*)(QDUM(I),I=1,I3N)
            READ(5,*)(QDUM(I),I=1,I3N)
  221    CONTINUE
         IF (NCHKP.EQ.-1) THEN
            NC=0
            NTZ=1
            NX=NIP
         ENDIF
      ENDIF
C
      IF (NC.EQ.NS.AND.NCHKP.EQ.1) THEN
         NTZ=NTZ-1
         GOTO 451
      ENDIF
      IF (NSELT.EQ.0.AND.NCHKP.EQ.-1) GOTO 425
      CALL GWRITE
      IF (NSELT.EQ.1) GOTO 447
      IF (NSELT.EQ.0) GOTO 400
      IF (NCHKP.EQ.-1) THEN
         WRITE(6,891)
         STOP
      ENDIF
      GOTO 400
  222 WRITE(6,890)
      STOP
C
C         INITIALIZE ARRAY OF RANDOM NUMBERS FOR ROUTINES RAND0 AND RAND1.
C
  223 IF (NSELT.EQ.2.OR.NSELT.EQ.3) CALL RANDST(ISEED)
C
C         INCREMENT NUMBER OF TRAJECTORIES NTZ  BY 1
C
  451 NTZ=NTZ+1

C-----Swapnil----------------------------------------
      IF(TRVA.GE.0.0D0) NSFLAG=0
      IF(TRVB.GE.0.0D0) NSFLAG=0

C
C          BARRIER CROSSING PARAMETERS INITIALIZATION
C
      IBAR=0
      GAO=0.0D0
C-->
      htmin=100000.0d0
      htmax=-100000.0d0
C-->      
C
C         WRITE RANDOM NUMBER ARRAY AND OTHER RELEVANT INFORMATION
C         TO CHECKPOINT FILE IN UNIT 50.
C
      OPEN(50,FORM='UNFORMATTED')
      REWIND(50)
      WRITE(50)Q,P,QDOT,PDOT,TABLE,VRELO,RANLST,GTEMP,NFLAG,ISEED0,
     *ISEED3,NX,NC,NTZ,INTST,NAST,IBFCTR
      CLOSE(50)
      IF (NSELT.EQ.2.OR.NSELT.EQ.3) WRITE(6,896)(ISEED3(9-I),I=1,8)
C
C         UPDATE PRINT ARRAYS FOR MODE POPULATIONS AFTER COMPLETING
C         NTZ TRAJECTORIES.
C
      IF (NTZ.GE.3 .AND. MPLOT.EQ.1) THEN
         NDUM=NTZ-1
C
C              NORMAL MODE POPULATIONS
C
         IF (NMA.NE.0) THEN
            CALL WENMOD(ETIM,ENSAV,ENSQ,NMA,ISAV,NDUM,NEVIBN,MNTR)
         ENDIF
C
C              THE EXCITED LOCAL MODE POPULATIONS
C
         IF (NACTA.EQ.4) THEN
            NOUT=0
            CALL WEBOND(ETIM,ESAV,ESQ,NEVIB,ISAV,NDUM,NOUT)
            NOUT=1
            CALL WEBOND(ETIM,ESAV,ESQ,NEVIBU,ISAV,NDUM,NOUT)
            NOUT=-1
            CALL WEBOND(ETIM,ESAV,ESQ,NEVIBL,ISAV,NDUM,NOUT)
C
C              REMAINING LOCAL MODE POPULATIONS
C
            IF (NLM.NE.0) THEN
               CALL WLBOND(ETIM,EBSAV,EBSQ,NLM,ISAV,NDUM)
            ENDIF
         ENDIF
      ENDIF
C
      IF (NTZ.GT.NT)then
      write(6,*)'FINAL! ','TOTAL Trajectories:',NT
      write(6,*)'Non-reactive trajectory numbers:',NONREACT
C      write(6,*)'Reactive trajectory numbers:    ',NREACT
      write(6,*)'Reactive 2 traj number:', NREACT2
      write(6,*)'Reactive 3 traj number:', NREACT3
      write(6,*)'Reactive 4 traj number:', NREACT4
      write(6,*)'Reactive 5 traj number:', NREACT5
      write(6,*)'nxy= ',nxy
C
       call cpu_time(finish_time)
       write(6,*)'total time cost ',finish_time-start_time,' seconds'
       write(6,*)'total trajectory number ', NT
       write(6,*)'mean time cost per one trajectory:',
     $ (finish_time-start_time)/NT, 'seconds'

       write(6,*)'+++++++++++++++++++++++++++++++++++++++++'
       write(6,*)'TOTAL effective Trajectories : ',NTeffect
       write(6,*)'Non-reactive traj number:      ',NONREACT
      write(6,*)'Reactive 2 traj number:', NREACT2
      write(6,*)'Reactive 3 traj number:', NREACT3
      write(6,*)'Reactive 4 traj number:', NREACT4
      write(6,*)'Reactive 5 traj number:', NREACT5
C       write(6,*)'Reactive traj number:          ',NREACT
C       write(6,*)'Reactive 2 traj number:        ',NREACT2
       write(6,*)'traj with too long time:       ',nxy 
       write(6,*)'+++++++++++++++++++++++++++++++++++++++++'
       
       write(999,*)'+++++++++++++++++++++++++++++++++++++++++'
       write(999,*)'TOTAL effective Trajectories: ',NTeffect
       write(999,*)'Non-reactive traj number:     ',NONREACT
       write(999,*)'Reactive 2 traj number:', NREACT2
       write(999,*)'Reactive 3 traj number:', NREACT3
       write(999,*)'Reactive 4 traj number:', NREACT4
       write(999,*)'Reactive 5 traj number:', NREACT5
C       write(999,*)'Reactive traj number:         ',NREACT
C       write(999,*)'Reactive 2 traj number:       ',NREACT2
       write(999,*)'traj with too long time:      ',nxy 
       write(999,*)'+++++++++++++++++++++++++++++++++++++++++'
       
       STOP
      endif

      NC=0
      DO 421 I=1,8
         ISEED0(I)=ISEED3(I)
  421 CONTINUE
      VRELO=0.0D0
      INTST=0
      NAST=2
      NFINAL=0
      KRE=1
C
C         INITIALIZE THE Q AND P ARRAYS
C
      J=3*NATOMA(1)
      DO 453 I=1,J
         Q(I)=QZA(1,I)
         P(I)=0.0D0
  453 CONTINUE
      K=3*NATOMB(1)
      DO 454 I=1,K
         Q(J+I)=QZB(1,I)
         P(J+I)=0.0D0
  454 CONTINUE

C
C         SELECT INITIAL CONDITIONS
C
      CALL SELECT
      

      IF (NCOOR.EQ.1.AND.NSELT.NE.-2) CALL SYBMOL

C
C         SET ARRAYS FOR MODE POPULATIONS
C
      TI=0.0D0
      IF (MPLOT.NE.1) GOTO 425
      ISAV=1
      ETIM(ISAV)=TI

C
C              NORMAL MODE ARRAYS
C
      IF (NMA.NE.0) THEN
C
C              CALCULATE INITIAL ENERGY AND BIN WIDTH FOR THE NORMAL
C              MODE WHOSE POPULATION IS TO BE MONITORED.
C
         IF (MNTR.NE.0) THEN
            NEVIBN(ISAV)=NEVIBN(ISAV)+1
            I=MNTR
            WWA(I)=WWA(I)/C6/349.757D0
            ENN=(ANQA(I)+0.5D0)*WWA(I)
            EDELTN=0.5D0*WWA(I)
            WWA(I)=WWA(I)*C6*349.757D0
         ENDIF
C
         CALL ENMODE(ENM,NMA)
         DO 422 I=1,NMA
            ENSAV(I,ISAV)=ENSAV(I,ISAV)+ENM(I)
            ENSQ(I,ISAV)=ENSQ(I,ISAV)+ENM(I)*ENM(I)
  422    CONTINUE
      ENDIF
C 
C              THE EXCITED LOCAL MODE ARRAYS
C
      IF (NACTA.EQ.4) THEN
         CALL EBOND(EBCH,EKCH,RCH,NEXM)
         NEVIB(ISAV)=NEVIB(ISAV)+1
         ESAV(ISAV)=ESAV(ISAV)+EBCH
         ESQ(ISAV)=ESQ(ISAV)+EBCH**2
C
C              REMAINING LOCAL MODE ARRAYS
C
         IF (NLM.NE.0) THEN
            DO 424 I=1,NLM
               J=MNLM(I)
               CALL EBOND(EBM(I),EK,RCH,J)
               EBSAV(I,ISAV)=EBSAV(I,ISAV)+EBM(I)
               EBSQ(I,ISAV)=EBSQ(I,ISAV)+EBM(I)*EBM(I)
  424       CONTINUE
         ENDIF
      ENDIF
C
  425 CONTINUE
      CALL GWRITE
C
C         SEARCH FOR STATIONARY POINTS IF NSELT=-3
C         (OPTION NOT AVAILABLE IN THIS VERSION)
C
C         PERFORM REACTION PATH FOLLOWING IF NSELT=-2
C         PERFORM NORMAL MODE ANALYSIS IF NSELT=-1
C
      I=0
      IF (NSELT.EQ.-1) THEN
         CALL NMODE(NATOMS,I)
         GOTO 451 
      ENDIF
      IF (NSELT.EQ.-2) CALL MPATH
      NC=0
      NX=NIP
      IF (NSELT.EQ.-3) THEN
C        CALL STATPT
         GOTO 451
      ENDIF
      NXPLOT=NPLOT
C
C         INTEGRATE TRAJECTORY
C


  402 NCZ=NC
      CALL PARTI
      DO 401 NC=1,6
         CALL RUNGEK
  401 CONTINUE
      NC=NCZ+6
  400 NC=NC+1   ! next cycle 
      CALL ADAMSM 
C
C         DETERMINE MODE POPULATIONS
C
      IF (MPLOT.NE.1) GOTO 426
      IF (NC.LT.NXPLOT) GOTO 426
      NXPLOT=NXPLOT+NPLOT
      TI=DBLE(NC)*TIME
      IF (ISAV.GE.2000) GOTO 426
      ISAV=ISAV+1
      ETIM(ISAV)=TI
C
C              NORMAL MODE ENERGIES
C
      IF (NMA.NE.0) THEN
         CALL ENMODE(ENM,NMA)
         IF (MNTR.NE.0) THEN
            I=MNTR
            IF (DABS(ENN-ENM(I)).LT.EDELTN) NEVIBN(ISAV)=NEVIBN(ISAV)+1
         ENDIF
         DO 428 I=1,NMA
            ENSAV(I,ISAV)=ENSAV(I,ISAV)+ENM(I)
            ENSQ(I,ISAV)=ENSQ(I,ISAV)+ENM(I)*ENM(I)
  428    CONTINUE
      ENDIF
C
C              THE EXCITED LOCAL MODE ENERGIES AND POPULATIONS
C
      IF (NACTA.EQ.4) THEN
         CALL EBOND(EBCH,EKCH,RCH,NEXM)
         IF (DABS(ENON-EBCH).LT.EDELTA) NEVIB(ISAV)=NEVIB(ISAV)+1
         IF (DABS(ENU-EBCH).LT.EDELTU) NEVIBU(ISAV)=NEVIBU(ISAV)+1
         IF (DABS(ENL-EBCH).LT.EDELTL) NEVIBL(ISAV)=NEVIBL(ISAV)+1
         ESAV(ISAV)=ESAV(ISAV)+EBCH
         ESQ(ISAV)=ESQ(ISAV)+EBCH*EBCH
C
C              REMAINING LOCAL MODE ENERGIES
C
         IF (NLM.NE.0) THEN
            DO 429 I=1,NLM
               J=MNLM(I)
               CALL EBOND(EBM(I),EK,RCH,J)
               EBSAV(I,ISAV)=EBSAV(I,ISAV)+EBM(I)
               EBSQ(I,ISAV)=EBSQ(I,ISAV)+EBM(I)*EBM(I)
  429       CONTINUE
         ENDIF 
      ENDIF
  426 CONTINUE
C
      IF (NFINAL.EQ.1) GOTO 414

      IF (NC.GE.NS) then
        write(999,'(i7,E12.5,a,i7)')NTZ,htmax-htmin,'-kcal/mol- ',NPATH
        call flush(999)
        write(6,*)'traj with long life time'
        write(6,'(i7,E12.5,a,i7)')NTZ,htmax-htmin,' kcal/mol ',NPATH
        call flush(6)
      write(26,*)
      write(26,'(i7,E12.5,a,i7)')NTZ,htmax-htmin,' kcal/mol ', NPATH
      write(26,*)
      call flush(26)

        if((htmax-htmin).le.0.04d0) then      !--> only those trajectories with energy conserved are considered
C-->         if(NPATH.eq.1)NONREACT=NONREACT+1   !--> collision and then
Cre-separate
C-->         if(NPATH.eq.2)NREACT=NREACT+1       !--> reaction counter
Cfor OH+CO->H+CO2
          nxy=nxy+1
        else
          NTeffect=NTeffect-1
        endif

        GOTO 450
      ENDIF

      IF (NC.EQ.NX) GOTO 449
      IF (NSELT.EQ.1) GOTO 400
C
C         SUBROUTINE TEST CHECKS FOR EVENTS.
C
C             NTEST=0, A REACTION HAS NOT OCCURRED.
C             NTEST=1, REACTIVE COORDINATE EQUALS RBAR.
C             NTEST=2, REACTIVE COORDINATE EQUALS RMAX.
C
C         TO TERMINATE A TRAJECTORY IF NUMBER OF INNER TURNING POINTS
C         EXCEEDS 100:
C
C     IF (INTST.GT.99) THEN
C        NPATH=1+NPATHS
C        GOTO 410
C     ENDIF
C
C      WRITE(500,'(A8,A6,I2,A8,I2)') 'lastc ','NTEST=',NTEST,'NAST=',NAST
C      WRITE(500,*)

      CALL TEST
C       WRITE(500,'(A8,A6,I2,A8,I2)')'endc ','NTEST=',NTEST,'NAST=',NAST
C       WRITE(500,*)
      
      IF (NTEST.EQ.1.AND.NAST.EQ.0) GOTO 406
      IF (NTEST.EQ.2.AND.NAST.EQ.1) GOTO 410
      IF (NTEST.EQ.2.AND.NAST.EQ.0) GOTO 410
      IF (NTEST.EQ.0.AND.NAST.NE.0) NAST=0
      IF (NTEST.EQ.1.AND.NAST.EQ.2) NAST=1
      GOTO 400
      !NTEST=1 NAST=0   NTEST=1 for RJK > RBAR
  406 NAST=1 
      WRITE(6,815)
      WRITE(6,910)NPATH
      CALL ENERGY
      CALL GWRITE
      GOTO 400
  410 CONTINUE
      CALL DVDQ
      CALL ENERGY
      CALL GWRITE
  414 CONTINUE
      CALL FINAL
C
C         AVERAGE A AND B ROTATIONAL ENERGIES OVER NCROT CYCLES
C
      ERAVA(KRE)=EROTA
      ERAVB(KRE)=EROTB
      KRE=KRE+1
      IF (KRE.LE.NCROT) GOTO 400
      EROTA=0.0D0
      EROTB=0.0D0
      DO 412 I=1,NCROT
         EROTA=EROTA+ERAVA(I)
  412 EROTB=EROTB+ERAVB(I)
      EROTA=EROTA/FLOAT(NCROT)
      EROTB=EROTB/FLOAT(NCROT)
      SDA=0.0D0
      SDB=0.0D0
      DO 413 I=1,NCROT
         SDA=SDA+(EROTA-ERAVA(I))**2
         SDB=SDB+(EROTB-ERAVB(I))**2
  413 CONTINUE 
      SDA=DSQRT(SDA/(NCROT-1))
      SDB=DSQRT(SDB/(NCROT-1))
      CALL GFINAL
C    
C     calculate reactive and non-reactive trajec. numbers NREACT and NONREACT
C
       write(6,*)
       write(6,'(i7,E12.5,a,i7)')NTZ,htmax-htmin,' kcal/mol ',NPATH
       write(6,*)
       call flush(6)
       write(999,'(i7,E12.5,a,i7,i10)')NTZ,htmax-htmin,
     &' kcal/mol ',NPATH,NC
       call flush(999)
       if((htmax-htmin).le.0.04d0) then      ! only those trajectories with energy conserved are considered
         if(NPATH.eq.1)NONREACT=NONREACT+1   ! collision and then re-separate
C         if(NPATH.eq.2)NREACT=NREACT+1       ! reaction counter for F+H1OH2->Fh1 + OH2
C         if(NPATH.eq.3)NREACT3=NREACT3+1       ! reaction counter for F+H1OH2 -> FH2 + Oh1
        if(NPATH.eq.2)NREACT2=NREACT2+1 
        if(NPATH.eq.3)NREACT3=NREACT3+1 
        if(NPATH.eq.4)NREACT4=NREACT4+1 
        if(NPATH.eq.5)NREACT5=NREACT5+1 

       else
         NTeffect=NTeffect-1
       endif

      GOTO 451
  447 DO 448 I=1,I3N
  448 P(I)=0.0D0
      GOTO 402
  449 CALL ENERGY
      REWIND 7
      CALL GWRITE
      NX=NX+NIP
      IF (NSELT.EQ.1) GOTO 447
      GOTO 400
  450 CALL ENERGY
      CALL GWRITE
      GOTO 451

      END
C
C         PERFORM ONE CYCLE OF RUNGE-KUTTA-GILL INTEGRATION
C         OF THE EQUATIONS OF MOTION.
C
      SUBROUTINE RUNGEK
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER(ND1=100,NDP=10)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/RKUTTA/RAA1,RA1,RA2,RA3,RB1,RB2,RB3,RC1,RC2
      COMMON/INTEGR/ATIME,NI,NID
      COMMON/PRLIST/T,V,H,TIME,NTZ,NT,ISEED0(8),NC,NX
      COMMON/TABLEB/TABLE(42*ND1)
      DIMENSION BQ(3*ND1),BP(3*ND1)
C
      DO 501 I=1,NI
         RDUM=RAA1*TIME
         Q(I)=Q(I)+RDUM*QDOT(I)
         P(I)=P(I)+RDUM*PDOT(I)
         BQ(I)=QDOT(I)
         BP(I)=PDOT(I)
  501 CONTINUE
      CALL PARTI
      DO 502 I=1,NI
         RDUM=RA1*TIME
         Q(I)=Q(I)+(QDOT(I)-BQ(I))*RDUM
         P(I)=P(I)+(PDOT(I)-BP(I))*RDUM
         BQ(I)=(RA2*QDOT(I)-RA3*BQ(I))
         BP(I)=(RA2*PDOT(I)-RA3*BP(I))
  502 CONTINUE
      CALL PARTI
      DO 503 I=1,NI
         RDUM=RB1*TIME
         Q(I)=Q(I)+(QDOT(I)-BQ(I))*RDUM
         P(I)=P(I)+(PDOT(I)-BP(I))*RDUM
         BQ(I)=(RB2*QDOT(I)-RB3*BQ(I))
         BP(I)=(RB2*PDOT(I)-RB3*BP(I))
  503 CONTINUE
      CALL PARTI
      DO 504 I=1,NI
         Q(I)=Q(I)+(QDOT(I)*RC1-BQ(I)*RC2)*TIME
         P(I)=P(I)+(PDOT(I)*RC1-BP(I)*RC2)*TIME
  504 CONTINUE
      CALL PARTI
      I=NC*NID
      DO 505 K=1,NI
         M=I+K
         N=M+NI
         TABLE(M)=PDOT(K)
         TABLE(N)=QDOT(K)
  505 CONTINUE
      RETURN
      END
C
C         PERFORM ONE CYCLE OF SIXTH-ORDER ADAMS-MOULTON INTEGRATION
C         OF THE EQUATIONS OF MOTION.
C
      SUBROUTINE ADAMSM
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/INTEGR/ATIME,NI,NID
      COMMON/PRLIST/T,V,H,TIME,NTZ,NT,ISEED0(8),NC,NX
C     COMMON/PRLIST/T,V,H,TIME
      COMMON/TABLEB/TABLE(42*ND1)
C
C         CODE IS OPTIMIZED FOR VECTORIZATION
C
      DO 601 I=1,NI
         J=I+NI
         TABLE(I)=P(I)
         TABLE(J)=Q(I)
  601 CONTINUE
C
C         ADAMS-MOULTON PREDICTOR
C
      DO 800 I=1,NI
         J=NID+I
         ASUM=-475.D0*TABLE(J)
         J=J+NID
         ASUM=ASUM+2877.D0*TABLE(J)
         J=J+NID
         ASUM=ASUM-7298.D0*TABLE(J)
         J=J+NID
         ASUM=ASUM+9982.D0*TABLE(J)
         J=J+NID
         ASUM=ASUM-7923.D0*TABLE(J)
         J=J+NID
         ASUM=ASUM+4277.D0*TABLE(J)
         ASUM=ASUM*ATIME
         ASUM=ASUM+P(I)
         P(I)=ASUM
  800 CONTINUE
      DO 1800 I=NI+1,NID
         J=NID+I
         ASUM=-475.D0*TABLE(J)
         J=J+NID
         ASUM=ASUM+2877.D0*TABLE(J)
         J=J+NID
         ASUM=ASUM-7298.D0*TABLE(J)
         J=J+NID
         ASUM=ASUM+9982.D0*TABLE(J)
         J=J+NID
         ASUM=ASUM-7923.D0*TABLE(J)
         J=J+NID
         ASUM=ASUM+4277.D0*TABLE(J)
         ASUM=ASUM*ATIME
         L=I-NI
         ASUM=ASUM+Q(L)
         Q(L)=ASUM
 1800 CONTINUE
      CALL PARTI
C
C         ADAMS-MOULTON CORRECTOR
C
      DO 850 I=1,NI
         J=2*NID+I
         ASUM=27.D0*TABLE(J)
         J=J+NID
         ASUM=ASUM-173.D0*TABLE(J)
         J=J+NID
         ASUM=ASUM+482.D0*TABLE(J)
         J=J+NID
         ASUM=ASUM-798.D0*TABLE(J)
         J=J+NID
         ASUM=ASUM+1427.D0*TABLE(J)
         ASUM=ASUM+475.D0*PDOT(I)
         ASUM=ASUM*ATIME+TABLE(I)
         P(I)=ASUM
  850 CONTINUE
      DO 1850 I=NI+1,NID
         J=2*NID+I
         ASUM=27.D0*TABLE(J)
         J=J+NID
         ASUM=ASUM-173.D0*TABLE(J)
         J=J+NID
         ASUM=ASUM+482.D0*TABLE(J)
         J=J+NID
         ASUM=ASUM-798.D0*TABLE(J)
         J=J+NID
         ASUM=ASUM+1427.D0*TABLE(J)
         L=I-NI
         ASUM=ASUM+475.0*QDOT(L)
         ASUM=ASUM*ATIME+TABLE(I)
         Q(L)=ASUM
 1850 CONTINUE
      CALL PARTI
      DO 610 L=1,5
         I=NID*L
         DO 609 K=1,NID
            M=I+K
            N=M+NID
            TABLE(M)=TABLE(N)
  609    CONTINUE
  610 CONTINUE
      L=NID*6
      DO 611 I=1,NI
         J=L+I
         K=J+NI
         TABLE(J)=PDOT(I)
         TABLE(K)=QDOT(I)
  611 CONTINUE
      RETURN
      END
C
C         EVALUATE AND WRITE LOCAL MODE POPULATION ARRAYS
C
      SUBROUTINE WLBOND(T,EB,EBSQ,NLM,N,NUM)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION T(2000),EB(2,2000),EBSQ(2,2000),
     *          PT(2000),PEB(2,2000),PEBSQ(2,2000)
      ANUM=DBLE(NUM)
      BNUM=DBLE(NUM-1)
      DO 10 I=1,NLM
         DO 40 J=1,N
            PT(J)=T(J)/100.0D0
            DUM1=(EBSQ(I,J)-EB(I,J)*EB(I,J)/ANUM)/BNUM
            IF (DUM1.LT.0.0D0) THEN
               WRITE(7,9997)DUM1
               DUM1=-DUM1
            ENDIF
            PEBSQ(I,J)=DSQRT(DUM1)
            PEB(I,J)=EB(I,J)/ANUM
   40    CONTINUE
   10 CONTINUE
C
      DO 20 I=1,NUM
         WRITE(16,9990)I
         DO 30 J=1,N
            WRITE(16,9995)PT(J),PEB(I,J),PEBSQ(I,J)
   30    CONTINUE
   20 CONTINUE
      WRITE(16,9991)NUM
      REWIND 16
 9991 FORMAT(I10)
 9990 FORMAT(5X,18HANOTHER LOCAL MODE,I4)
 9995 FORMAT((3(1PD15.4,1H,)))
 9997 FORMAT(3X,8H   DUM =,D15.4)
      RETURN
      END
C
C         CALCULATE NORMAL MODE ENERGIES
C
      SUBROUTINE ENMODE(EN,NMA)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      COMMON/CHEMAC/WWA(3*ND1),CA(3*ND1,3*ND1),AI(3),ENMTA,
     *AMPA(3*ND1),WWB(3*ND1),CB(3*ND1,3*ND1),BI(3),ENMTB,
     *AMPB(3*ND1),SEREL,S,BMAX,TROTA,TROTB,ANQA(3*ND1),ANQB(3*ND1),
     *TVIBA,TVIBB,NROTA,NROTB,NOB
      COMMON/FRAGB/WTA(NDP),WTB(NDP),LA(NDP,ND1),LB(NDP,ND1),
     *             QZA(NDP,3*ND1),QZB(NDP,3*ND1),NATOMA(NDP),NATOMB(NDP)
      DIMENSION QNCR(ND1),DQNCR(ND1),EN(ND1),A(3*ND1,3*ND1)
      N=NATOMA(1)
      I3N=3*N

C
C         SET UP APPROPRIATE TRANSFORMATION MATRIX A
C
      DO 70 I=1,NMA
         DO 80 J=1,N
            K=0
   90       KK=3*J-K
            A(KK,I)=CA(KK,I)*W(J)
            K=K+1
            IF (K.LT.3) GOTO 90
   80    CONTINUE
   70 CONTINUE
C
      DO 20 I=1,N
         J=0
   30    II=3*I-J
         P(II)=P(II)/W(I)
         J=J+1
         IF (J.LT.3) GOTO 30
   20 CONTINUE
C
C         TRANSFORM FROM CARTESIAN COORDINATES AND VELOCITIES
C         INTO NORMAL MODE COORDINATES AND VELOCITIES
C
      DO 10 I=1,NMA
         QNCR(I)=0.0D0
         DQNCR(I)=0.0D0
         DO 40 J=1,I3N
            QNCR(I)=QNCR(I)+A(J,I)*(Q(J)-QZA(1,J))
            DQNCR(I)=DQNCR(I)+A(J,I)*P(J)
   40    CONTINUE
C
C         CALCULATE FOR THE NORMAL MODE ENERGIES
C
         EN(I)=(DQNCR(I)*DQNCR(I)+WWA(I)*WWA(I)*QNCR(I)*QNCR(I))/2.0D0
         EN(I)=EN(I)/C1
   10 CONTINUE
C
C         TRANSFORM ALL P'S BACK AND STORE THEM
C
      DO 50 I=1,N
         J=0
   60    II=3*I-J
         P(II)=P(II)*W(I)
         J=J+1
         IF (J.LT.3) GOTO 60
   50 CONTINUE
      RETURN
      END
C
C         EVALUATE AND WRITE NORMAL MODE POPULATION ARRAYS
C
      SUBROUTINE WENMOD(T,E,ENSQ,NMA,N,NUM,NBOX,NI)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION NBOX(2000),PNT(2000),PLOG(2000),PT(2000),T(2000),
     *E(30,2000),ENSQ(30,2000),PE(30,2000),PENSQ(30,2000)
C
      ANUM=DBLE(NUM)
      BNUM=DBLE(NUM-1)
      DO 10 I=1,NMA
         DO 40 J=1,N
            IF (I.EQ.NI) THEN
               PNT(J)=DBLE(NBOX(J))/ANUM
               PLOG(J)=0.0D0
               IF (PNT(J).NE.0.0D0) PLOG(J)=DLOG(PNT(J))
            ENDIF
            PT(J)=T(J)/100.0D0
            DUM1=(ENSQ(I,J)-E(I,J)*E(I,J)/ANUM)/BNUM
            IF (DUM1.LT.0.0D0) THEN
               WRITE(7,9997)DUM1
               DUM1=-DUM1
            ENDIF
            PENSQ(I,J)=DSQRT(DUM1)
            PE(I,J)=E(I,J)/ANUM
   40    CONTINUE
   10 CONTINUE
      DO 20 I=1,NMA
         WRITE(15,9990)I
         DO 30 J=1,N
            IF (I.EQ.NI) THEN 
               WRITE(15,9996)PT(J),PE(I,J),PENSQ(I,J),PNT(J),PLOG(J)
            ELSE
               WRITE(15,9995)PT(J),PE(I,J),PENSQ(I,J)
            ENDIF
   30    CONTINUE
   20 CONTINUE
      WRITE(15,9991)NUM
      REWIND 15
 9991 FORMAT(I10)
 9990 FORMAT(5X,28HNORMAL MODE COORDINATE **** ,I3)
 9995 FORMAT((3(1PD15.4,1H,)))
 9996 FORMAT((5(1PD15.4,1H,)))
 9997 FORMAT(3X,8H   DUM1=,E15.4)
      RETURN
      END
C
C         CALCULATE LOCAL MODE (MORSE OSCILLATOR) ENERGIES 
C
      SUBROUTINE EBOND(H,T,R,I)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      COMMON/MORSEB/RMZ(100),B(100),D(100),N2J(100),N2K(100),
     *CM1(100),CM2(100),CM3(100),CM4(100)
C
      DE=D(I)
      BETA=B(I)
      R0=RMZ(I)
      WA=W(N2J(I))
      WB=W(N2K(I))
      WT=WA+WB
      WJ=WB/WT
      WI=WA/WT
      UMASS=WA*WB/WT
      IZ=3*N2J(I)
      JZ=3*N2K(I)
      IY=IZ-1
      IX=IY-1
      JY=JZ-1
      JX=JY-1
      R=DSQRT((Q(IX)-Q(JX))**2 + (Q(IY)-Q(JY))**2 + (Q(IZ)-Q(JZ))**2)
      T=((WJ*P(IX)-WI*P(JX))**2 + (WJ*P(IY)-WI*P(JY))**2 +
     *                            (WJ*P(IZ)-WI*P(JZ))**2)/2.0D0/UMASS
      V=DEXP(-BETA*(R-R0))
      V=DE*(V**2-2*V+1.0D0)
      T=T/C1
      V=V/C1
      H= V + T
      RETURN
      END
C
C         EVALUATE AND WRITE EXCITED LOCAL MODE POPULATION ARRAYS
C
      SUBROUTINE WEBOND(T,E,ESQ,NEBOX,N,NUM,NOUT)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION T(2000),E(2000),ESQ(2000),NEBOX(2000),
     *PNT(2000),PT(2000),PESQ(2000),PE(2000),PLOG(2000)
C
      ANUM=DBLE(NUM)
      BNUM=DBLE(NUM-1)
      ANORM=DBLE(NUM)
      DO 10 I=1,N
         PNT(I)=DBLE(NEBOX(I))/ANORM
         PT(I)=T(I)/100.0D0
         PESQ(I)=DSQRT((ESQ(I)-E(I)*E(I)/ANUM)/BNUM)
         PE(I)=E(I)/ANUM
         PLOG(I)=0.0D0
         IF(PNT(I).NE.0)PLOG(I)=DLOG(PNT(I))
   10 CONTINUE
      IF (NOUT.EQ.0) IP=12
      IF (NOUT.EQ.1) IP=13
      IF (NOUT.EQ.-1) IP=14
      DO 11 I=1,N
         WRITE(IP,9999)PT(I),PE(I),PESQ(I),PNT(I),PLOG(I)
   11 CONTINUE
      WRITE(IP,9998) NUM
      REWIND IP
 9999 FORMAT((5(1PE15.4,1H,)))
 9998 FORMAT(I10)
      RETURN
      END
C
C         WRITE RELEVANT INFORMATION IN OUTPUT FILE
C
      SUBROUTINE GWRITE
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/PRLIST/T,V,H,TIME,NTZ,NT,ISEED0(8),NC,NX
      COMMON/PARRAY/KR(300),JR(300),KB(300),MB(300),IB(300),IA(300),
     *ITAU(300),ITET(300),IDH(300)
      COMMON/SELTB/QZ(3*ND1),NSELT,NSFLAG,NACTA,NACTB,NLINA,NLINB
      COMMON/PRFLAG/NFQP,NCOOR,NFR,NUMR,NFB,NUMB,NFA,NUMA,NFTAU,NUMTAU,
     *NFTET,NUMTET,NFDH,NUMDH
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/COORS/R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      COMMON/FORCES/N,I3N,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      COMMON/RANCOM/RANLST(100),ISEED3(8),IBFCTR
      COMMON/TESTIN/VRELO,INTST
      COMMON/TABLEB/TABLE(42*ND1)
      COMMON/GPATHB/WM(3*ND1),TEMP(NDP),AI1D(5),AAI(2),BBI(2),SYMM(5),
     *SYMA,SYMB,GTEMP(NDP),NFLAG(NDP),N1DR,N2DR
      COMMON/TESTB/RMAX(NDP),RBAR(NDP),NTEST,NPATHS,NABJ(NDP),NABK(NDP),
     *NPATH,NAST

      COMMON/hdiag/htmin,htmax
      real*8 rxoc, rxho,rxco1,rxch,tv1(1:3),tv2(1:3),tv3(1:3),tv4(1:3),
     $ cx(1:3,1:4),tv5(1:3),tv6(1:3),cosphi
      integer*8 lr
C
    1 FORMAT(2X,19HTHE CYCLE COUNT IS:,I14,16X,5HTIME:,F12.3)
    2 FORMAT(2X,16HKINETIC ENERGY: ,D17.9,21H    POTENTIAL ENERGY: ,
     *D17.9,/,2X,16HTOTAL ENERGY:   ,D17.9)
    3 FORMAT(19X,1HQ,37X,1HP)
    4 FORMAT(F11.6,2F12.6,2X,3F12.6)
    5 FORMAT(4X,8H ATOMS  ,5X,14HBOND LENGTH(A))
    6 FORMAT(2X,2I4,10X,F8.5)
    7 FORMAT(5X,5HATOMS,7X,15HANGLE (DEGREES))
    8 FORMAT(2X,3I3,8X,F8.3)
    9 FORMAT(1X,'XXXXXXXXXXXXXXXXXXXXXXXX TRAJECTORY NUMBER ',I4,
     *' XXXXXXXXXXXXXXXXXXXXXXXXX')
   10 FORMAT(2X,30HTHE CURRENT RANDOM NUMBER IS: ,8I4,' BASE 256')
   11 FORMAT(2X,6HNUMBER,5X,14HALPHA(DEGREES))
   12 FORMAT(4X,I3,12X,F8.3)
   13 FORMAT(2X,6HNUMBER,5X,12HTAU(DEGREES))
   14 FORMAT(/)
   15 FORMAT(2X,6HNUMBER,5X,26HTHETA(TETRAHEDRAL,DEGREES))
   16 FORMAT(2X,6HNUMBER,5X,17HDIHEDRAL(DEGREES))
   17 FORMAT(1X,3F11.7)
C
C         WRITE RELEVANT INFORMATION IN CHECKPOINT FILE
C
      OPEN(50,FORM='UNFORMATTED')
      REWIND(50)
      WRITE(50)Q,P,QDOT,PDOT,TABLE,VRELO,RANLST,GTEMP,NFLAG,ISEED0,
     *ISEED3,NX,NC,NTZ,INTST,NAST,IBFCTR
      CLOSE(50)
C
C         WRITE TRAJECTORY INFORMATION
C
      CNC=NC
      TI=TIME*CNC
      WRITE(6,9)NTZ
      WRITE(6,1)NC,TI
      IF (NSELT.EQ.2.OR.NSELT.EQ.3) WRITE(6,10)(ISEED0(9-I),I=1,8)
      WRITE(6,2)T,V,H

      if(H.lt.htmin) htmin=H
      if(H.gt.htmax) htmax=H
C
C         WRITE COORDINATES FOR GRAPHICS
C              output :   transform  unit 8 to 28 ! xcj
C      IF (NCOOR.EQ.1.AND.NSELT.NE.-2) THEN
C         WRITE(28,9)NTZ 
C         WRITE(28,17)(Q(I),I=1,N*3)
C       Li Jun out put for moden view
C        call rclose(Q,lr)

      !  WRITE(1000+NTZ,'(i6)')5
      !  WRITE(1000+NTZ,'(2I5)')NTZ,NPATH
      !  WRITE(1000+NTZ,'(a2,3f20.8)')'H',Q(1:3)
      !  WRITE(1000+NTZ,'(a2,3f20.8)')'H',Q(4:6)
      !  WRITE(1000+NTZ,'(a2,3f20.8)')'H',Q(7:9)
      !  WRITE(1000+NTZ,'(a2,3f20.8)')'H',Q(10:12)
      !  WRITE(1000+NTZ,'(a2,3f20.8)')'C',Q(13:15)

      !  call flush(1000 + NTZ)

C      if(V.le.-1.0d0)then
C        write(317,'(i6)')4
C        write(317,'(f20.10,f15.8)')V/627.509d0-188.9056917480d0, TI
C        write(317,'(a2,3f10.5,i6)')'O',Q(4:6),1
C        write(317,'(a2,3f10.5,i6)')'O',Q(10:12),1
C        write(317,'(a2,3f10.5,i6)')'C',Q(7:9),1
C        write(317,'(a2,3f10.5,i6)')'H',Q(1:3),1
C        call flush(317)
C      endif
C      ENDIF
C
C         WRITE COORDINATES AND MOMENTA 
C
      IF (NFQP.NE.0) THEN
         WRITE(6,3)
         J=1
         DO 50 L=1,N
            M=J+2
            WRITE(6,4)(Q(I),I=J,M),(P(I),I=J,M)
            J=J+3
   50    CONTINUE
      ENDIF
C
C         CALCULATE AND WRITE POSSIBLE INTERATOMIC DISTANCES
C
      IF (NFR.NE.0) THEN
         WRITE(6,5)
         WRITE(28,5)
         DO 52 I=1,NUMR
            J3=3*JR(I)
            J2=J3-1
            J1=J2-1
            K3=3*KR(I)
            K2=K3-1
            K1=K2-1
            T1=Q(K1)-Q(J1)
            T2=Q(K2)-Q(J2)
            T3=Q(K3)-Q(J3)
            RR=DSQRT(T1*T1+T2*T2+T3*T3)
            WRITE(6,6)JR(I),KR(I),RR
            WRITE(28,6)JR(I),KR(I),RR
   52    CONTINUE
      ENDIF
C      rxoc=dsqrt((Q(7)-Q(4))**2+(Q(8)-Q(5))**2+(Q(9)-Q(6))**2)
C      rxho=dsqrt((Q(1)-Q(4))**2+(Q(2)-Q(5))**2+(Q(3)-Q(6))**2)
C      rxch=dsqrt((Q(1)-Q(7))**2+(Q(2)-Q(8))**2+(Q(3)-Q(9))**2)
C     rxco1=dsqrt((Q(10)-Q(7))**2+(Q(11)-Q(8))**2+(Q(12)-Q(9))**2)
C     write(5000+NTZ,'(8f12.5)')TI,V,T,H,rxoc,rxho,rxch,rxco1
C     call flush(5000+NTZ)   
C
C         CALCULATE AND WRITE POSSIBLE ANGLES 
C
      IF (NFB.NE.0) THEN
         WRITE(6,7)
         DO 54 I=1,NUMB
            K3=3*KB(I)
            K2=K3-1
            K1=K2-1
            M3=3*MB(I)
            M2=M3-1
            M1=M2-1
            I3=3*IB(I)
            I2=I3-1
            I1=I2-1
            T1=Q(I1)-Q(M1)
            T2=Q(I2)-Q(M2)
            T3=Q(I3)-Q(M3)
            T4=Q(K1)-Q(M1)
            T5=Q(K2)-Q(M2)
            T6=Q(K3)-Q(M3)
            R1=DSQRT(T1*T1+T2*T2+T3*T3)
            R2=DSQRT(T4*T4+T5*T5+T6*T6)
            CTHETA=(T1*T4+T2*T5+T3*T6)/R1/R2
            IF (CTHETA.GT. 1.00D0) CTHETA= 1.00D0
            IF (CTHETA.LT.-1.00D0) CTHETA=-1.00D0
            DUM=DACOS(CTHETA)/C4
            WRITE(6,8)KB(I),MB(I),IB(I),DUM
   54    CONTINUE
      ENDIF
C
C         WRITE ALPHA, TAU, TETRAHEDRAL AND DIHEDRAL ANGLES
C         THESE ARE POTENTIAL FUNCTION - DEPENDENT
C
      IF (NFA.NE.0) THEN
         WRITE(6,11)
         DO 56 I=1,NUMA
            DUM=ALPHA(IA(I))/C4
            WRITE(6,12)IA(I),DUM
   56    CONTINUE
      ENDIF
      IF (NFTAU.NE.0) THEN
         WRITE(6,13)
         DO 58 I=1,NUMTAU
            DUM=DACOS(CTAU(ITAU(I)))/C4
            WRITE(6,12)ITAU(I),DUM
   58    CONTINUE
      ENDIF
      IF (NFTET.NE.0) THEN
         WRITE(6,15)
         DO 60 I=1,NUMTET
            DUM=TT(1,ITET(I))/C4
            WRITE(6,12)ITET(I),DUM
   60    CONTINUE
      ENDIF
      IF (NFDH.NE.0) THEN
         WRITE(6,16)
         cx(1:3,1)=(/Q(1),Q(2),Q(3)/)
         cx(1:3,2)=(/Q(4),Q(5),Q(6)/)
         cx(1:3,3)=(/Q(7),Q(8),Q(9)/)
         cx(1:3,4)=(/Q(10),Q(11),Q(12)/)
         tv1(1:3)=cx(:,1)-cx(:,2)
         tv2(1:3)=cx(:,3)-cx(:,2)
         
         tv3(1:3)=cx(:,4)-cx(:,3)
         tv4(1:3)=cx(:,2)-cx(:,3)
       call crossp(tv2(1:3), tv1(1:3),tv5(1:3)) !--> crossproduct for the norm
       call crossp(tv3(1:3), tv2(1:3),tv6(1:3)) !--> crossproduct for the norm
       if(dsqrt( sum(tv5(:)**2))*dsqrt(sum(tv6(:)**2)).lt.1.0d-10)
     &  then
        DANG(1) = 0.0d0
       else
       cosphi=dot_product(tv5(:),tv6(:))/(dsqrt(sum(tv5(:)**2))
     $ *dsqrt(sum(tv6(:)**2)))
       DANG(1) = dacos( max(-1.0d0,min(1.0d0,cosphi)))
       DANG(1) = 180.0d0-DANG(1)/C4
            DUM=DANG(IDH(1))
            WRITE(6,12) IDH(1),DUM
       endif

C        DO 62 I=1,NUMDH
C           DUM=DANG(IDH(I))/C4
C           WRITE(6,12) IDH(I),DUM
C  62    CONTINUE
      ENDIF
      WRITE(6,14)
C
      RETURN
      END
      
       subroutine crossp(v1,v2,v3)
      real(kind=8)::v1(1:3),v2(1:3),v3(1:3)
      !-->-->--> cross product of two 3-dimensional vectors
      v3(1)=v1(2)*v2(3)-v1(3)*v2(2)
      v3(2)=v1(3)*v2(1)-v1(1)*v2(3)
      v3(3)=v1(1)*v2(2)-v1(2)*v2(1)
      return
      end subroutine crossp

      
C     subroutine rclose(Q,lr)
C     implicit none
C     real*8 Q(300),r1,r2,r3,r4,r5,r6,rx(1:6)
C     integer*8 lr,i,j

C     lr=1
C     r1=dsqrt((Q(1)-Q(4))**2+(Q(2)-Q(5))**2+(Q(3)-Q(6))**2)
C     r2=dsqrt((Q(1)-Q(7))**2+(Q(2)-Q(8))**2+(Q(3)-Q(9))**2)
C     r3=dsqrt((Q(1)-Q(10))**2+(Q(2)-Q(11))**2+(Q(3)-Q(12))**2)
C     r4=dsqrt((Q(4)-Q(7))**2+(Q(5)-Q(8))**2+(Q(6)-Q(9))**2)
C     r5=dsqrt((Q(4)-Q(10))**2+(Q(5)-Q(11))**2+(Q(6)-Q(12))**2)
C     r6=dsqrt((Q(7)-Q(10))**2+(Q(8)-Q(11))**2+(Q(9)-Q(12))**2)

C     rx(1)=r1
C     rx(2)=r2
C     rx(3)=r3
C     rx(4)=r4
C     rx(5)=r5
C     rx(6)=r6
C     
C     do i=1,6
C      if(rx(i).lt.0.6d0)then
C        lr=0
C        return
C      endif
C     enddo

C     return
C     enddo

C
C         SELECT INITIAL CONDITIONS FOR COORDINATES AND MOMENTA
C
      SUBROUTINE SELECT
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/SELTB/QZ(3*ND1),NSELT,NSFLAG,NACTA,NACTB,NLINA,NLINB
      COMMON/TRANSB/TRANS,NREL
      COMMON/TESTB/RMAX(NDP),RBAR(NDP),NTEST,NPATHS,NABJ(NDP),NABK(NDP),
     *NPATH,NAST
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      COMMON/WASTE/QQ(3*ND1),PP(3*ND1),WX,WY,WZ,L(ND1),NAM
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/FORCES/NATOMS,I3N,NST,NM,NBB,NAA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      COMMON/PRLIST/T,V,H,TIME,NTZ,NT,ISEED0(8),NC,NX
      COMMON/HFIT/PSCALA,PSCALB,VZERO
      COMMON/FINALB/EROTA,EROTB,EA(3),EB(3),AMA(4),AMB(4),AN,AJ,BN,BJ,
     *OAM(4),EREL,ERELSQ,BF,SDA,SDB,DELH(NDP),ANG(16),NFINAL
      COMMON/FRAGB/WTA(NDP),WTB(NDP),LA(NDP,ND1),LB(NDP,ND1),
     *QZA(NDP,3*ND1),QZB(NDP,3*ND1),NATOMA(NDP),NATOMB(NDP)
      COMMON/CHEMAC/WWA(3*ND1),CA(3*ND1,3*ND1),AI(3),ENMTA,
     *AMPA(3*ND1),WWB(3*ND1),CB(3*ND1,3*ND1),BI(3),ENMTB,
     *AMPB(3*ND1),SEREL,S,BMAX,TROTA,TROTB,ANQA(3*ND1),ANQB(3*ND1),
     *TVIBA,TVIBB,NROTA,NROTB,NOB
      COMMON/DIATB/NA,JA,NB,JB
      COMMON/VECTB/VI(4),OAMI(4),AMAI(4),AMBI(4),ETAI,ERAI,ETBI,ERBI
      COMMON/ARRAYS/A(3*ND1,3*ND1),DAA(3*ND1),B(3*ND1,3*ND1),DBB(3*ND1)
      COMMON/EIGVL/EIG(3*ND1)
      COMMON/SADDLE/EBAR,TBAR,EZERO,NBAR 
      
      COMMON/hdiag/htmin,htmax

C-----Swapnil-------------------------------------------------------
      COMMON/TMPNJ/TRVA,AIA,TRVB,AIB
      COMMON/WNJ/WD1,WD2


      DIMENSION QMAXA(3*ND1),QMINA(3*ND1),PMAXA(ND1),QMAXB(3*ND1),
     *QMINB(3*ND1),PMAXB(ND1)
      data RMINA,RMAXA,RMASSA,ENJA,PTESTA,ALA/0.0,0.0,0.0,0.0,0.0,0.0/
      data RMINB,RMAXB,RMASSB,ENJB,PTESTB,ALB/0.0,0.0,0.0,0.0,0.0,0.0/
      save RMINA,RMAXA,RMASSA,ENJA,PTESTA,ALA
      save RMINB,RMAXB,RMASSB,ENJB,PTESTB,ALB	
      SAVE NMBAR,NMB,NMA
      SAVE WWASTORE, WWBSTORE


C
   45 FORMAT(//,10X,34HSELECT:NORMAL MODE QUANTUM NUMBERS)
   46 FORMAT(15X,10F10.2)
  100 FORMAT(10X,20HDIATOM A FREQUENCY =,F7.1,19H CM-1, AND ENERGY =,
     *F7.2,9H KCAL/MOL,/)
  106 FORMAT(10X,20HSELECT: JXA,JYA,JZA=,3D13.5,6H H-BAR,/)
  117 FORMAT(10X,10HREACTANT A)
  124 FORMAT(/,10X,15HSELECT: EROTA =,F7.3,9H KCAL/MOL,/,
     *10X,10HJX,JY,JZ =,3D13.5,6H H-BAR,/)
  128 FORMAT(10X,20HDIATOM B FREQUENCY =,F7.1,19H CM-1, AND ENERGY =,
     *F7.2,9H KCAL/MOL,/)
  136 FORMAT(10X,20HSELECT: JXB,JYB,JZB=,3D13.5,6H H-BAR,/)
  158 FORMAT(//,10X,10HREACTANT B)
  162 FORMAT(/,10X,17HIMPACT PARAMETER=,F7.3,3H(A))
  163 FORMAT(/,10X,15HSELECT: EROTB =,F7.3,9H KCAL/MOL,/,
     *10X,10HJX,JY,JZ =,3D13.5,6H H-BAR,/)
  167 FORMAT(10X,25HORBITAL ANGULAR MOMENTUM=,D12.5,6H H-BAR)
  169 FORMAT(/,5X,'RELATIVE TRANSLATIONAL ENERGY SELECTED: ',F7.2,
     *' KCAL/MOL',/)
       
       real*8 ekin0,xr(1:I3N),vel0(1:I3N),sumvel
C
C         NSELT=-1 PROGRAM DOES NORMAL MODE ANALYSIS
C         NSELT=0  Q'S AND P'S ARE READ IN
C         NSELT=1  PROGRAM FINDS MINIMUM ENERGY GEOMETRY
C                  (Q'S AND P'S ARE READ IN)
C         NSELT=2  CHOOSE INITIAL CONDITIONS FOR ONE OR TWO MOLECULES
C         NSELT=3  CHOOSE INITIAL CONDITIONS FROM POTENTIAL BARRIER
C
C         NACT=1  ACTIVATE WITH ORTHANT SAMPLING
C         NACT=2  ACTIVATE WITH MICROCANONICAL NORMAL MODE SAMPLING
C         NACT=3  ACTIVATE WITH NORMAL MODE SAMPLING
C         NACT=4  ACTIVATE WITH NORMAL MODE EXCITATION
C         NACT=5  ACTIVATE WITH BOLTZMANN VIBRATIONAL DISTRIBUTION
C
      IF (NSELT.NE.2.AND.NSELT.NE.3) THEN
         READ(5,*)(Q(I),I=1,I3N)
         READ(5,*)(P(I),I=1,I3N)
      
C       read(5,*)ekin0
C     call random_seed()
C      
C     do i=1,I3N
C        call random_number(xr)
C        vel0(i)=-1.0d0+2.0d0*xr(i)
C     enddo

C     sumvel=0.0d0
C     j=1
C     do i=1,I3N/3
C      sumvel=sumvel+W(i)/2.0d0*(vel0(j)**2+
C    $         +vel0(j+1)**2+vel0(j+2)**2 )
C      j=j+3
C     enddo
C     
C     do i=1,I3N
C       vel0(i)=dsqrt(ekin0/sumvel)*vel0(i)
C     enddo

C     P(:)=vel0(:)
         CALL DVDQ
         CALL ENERGY
         GOTO 999
      ENDIF
C
C         IN THE MAIN PROGRAM THE COORDINATES Q ARE SET EQUAL TO QZ
C         AND THE MOMENTA P ARE SET EQUAL TO ZERO (FOR NSELT=2).
C
C         INITIAL CONDITIONS FOR REACTANT A
C
      IF (NATOMA(1).LE.1) THEN
C
C             IF A IS AN ATOM ZERO ITS Q ELEMENTS
C
         J3=3*LA(1,1)
         J2=J3-1
         J1=J2-1
         Q(J1)=0.0D0
         Q(J2)=0.0D0
         Q(J3)=0.0D0
         GOTO 126
      ENDIF
C
C             DISPLACE REACTANT B BY 1000.0 ANGSTROMS
C

      WRITE(6,117)
      N=NATOMB(1)
      IF (N.NE.0) THEN
         DO 97 I=1,N
            J3=3*LB(1,I)
            K3=3*I
            Q(J3)=QZB(1,K3)+5.0D0   ! for fhoh, especially
C            Q(J3)=QZB(1,K3)+1000.0D0
   97    CONTINUE
      ENDIF

C
C             ENERGY REFERENCE FOR SEPARATED REACTANTS
C
      CALL DVDQ
 
      CALL ENERGY
      DH=V
C
C             SELECT INITIAL Q'S AND P'S FOR REACTANT A
C

      IF (NATOMA(1).GT.2) GOTO 120
      L(1)=LA(1,1)
      L(2)=LA(1,2)
C
C          DIATOM A IS TREATED SEMICLASSICALLY
C

      IF (NSFLAG.NE.1) THEN
        IF(NTZ.EQ.1)THEN
         I=0
         N=NATOMA(1)
         CALL NMODE(N,I)
         DUM=EIG(6)
        ENDIF

C--------Swapnil--------------------------------------------
         IF(TRVA.GE.0.0D0)THEN
           WRITE(6,*)'NA AND JA SAMPLED FROM A DISTRIBUTION'
           WRITE(6,*)'TRVA = ',TRVA
C          CALCULATE N
           IF(NTZ.EQ.1)THEN
             WWA(1)=EIG(6)*C6
             WWASTORE=WWA(1)
           ELSE
             WWA(1)=WWASTORE
             DUM=WWA(1)/C6
           ENDIF
           NMBAR=1
           CALL THRMAN(WWA,NA,TRVA,NMBAR)
           WRITE(6,*)'NA = ',NA
C          CALCULATE J
           WD1=W(L(1))
           WD2=W(L(2))
           CALL PROBJ(TRVA,AIA,ISEED,JA)
           WRITE(6,*)'JA = ',JA
         ELSE
           WRITE(6,*)'NA AND JA USED AS PROVIDED IN INPUT FILE'
         ENDIF

         ENJA=(DBLE(NA)+0.5D0)*DUM/349.755D0*C1
         CALL INITEBK(NA,JA,RMINA,RMAXA,DH,RMASSA,ENJA,PTESTA,ALA)
         SDUM=ENJA/C1
         WRITE(6,100)DUM,SDUM
      ENDIF
C
C             SELECT INITIAL RELATIVE COORDINATE AND MOMENTUM.
C
      DUM=ALA**2/2.0D0/RMASSA
  102 RAND=RAND0(ISEED)
      R=RMINA+(RMAXA-RMINA)*RAND
      Q(3*L(1))=-0.5D0*R
      Q(3*L(1)-1)=0.0D0
      Q(3*L(1)-2)=0.0D0
      Q(3*L(2))= 0.5D0*R
      Q(3*L(2)-1)=0.0D0
      Q(3*L(2)-2)=0.0D0
      CALL DVDQ
      CALL ENERGY
      VDUM=(V-DH)*C1
      SUMM=ENJA-DUM/R**2-VDUM
      IF (SUMM.LE.0.0D0) THEN
         SUMM=0.0D0
         PR=0.0D0
      ELSE
         PR=DSQRT(2.0D0*RMASSA*SUMM)
         SDUM=PTESTA/PR
         RAND=RAND0(ISEED)
         IF (SDUM.LT.RAND) GOTO 102
      ENDIF
      RAND=RAND0(ISEED)
      IF (RAND.LT.0.5D0) PR=-PR
C
C             CHOOSE INITIAL CARTESIAN COORDINATES AND MOMENTA, AND
C             ANGULAR MOMENTUM.  DIATOM LIES ALONG THE X-AXIS.
C             THEN RANDOMLY ROTATE THE CARTESIAN COORDINATES AND
C             MOMENTA IN THE CENTER OF MASS FRAME.
C
      CALL HOMOQP(R,PR,ALA,AMA,RMASSA,AI)
      AMAI(1)=AMA(1)/C7
      AMAI(2)=AMA(2)/C7
      AMAI(3)=AMA(3)/C7
      AMAI(4)=AMA(4)/C7
      WRITE(6,106)AMAI(1),AMAI(2),AMAI(3)
      GOTO 126
C
  120 CONTINUE
C
C             FRAGMENT A IS A POLYATOMIC
C
      IF (NACTA.EQ.1) GOTO 123
C
C             CALCULATE NORMAL MODE EIGENVALUES AND EIGENVECTORS
C
      IF (NSFLAG.EQ.1.AND.NACTA.NE.5) GOTO 123
      IF (NSFLAG.EQ.1.AND.NACTA.EQ.5) GOTO 113
      N=NATOMA(1)
      K=3*N
      M=6-NLINA
      NMA=K-M
C
C             TRANSITION STATE ONLY HAS 3N-7 NORMAL MODES FOR A 
C             NONLINEAR MOLECULE, AND 3N-6 MODES FOR A LINEAR ONE
C
      IF (NSELT.EQ.3) THEN
         NMBAR=NMA-1
         IBARR=1
      ELSE
         NMBAR=NMA
         IBARR=0
      ENDIF
C
      I=0
      CALL NMODE(N,I)
      DO 121 I=1,NMBAR
         WWA(I)=EIG(I+M+IBARR)*C6
         DO 119 J=1,K
            CA(J,I)=A(I+M+IBARR,J)
  119    CONTINUE
  121 CONTINUE
      IF (NSELT.EQ.3) THEN
         WWA(NMA)=EIG(1)*C6
         DO 321 J=1,K
            CA(J,NMA)=A(1,J)
  321    CONTINUE
      ENDIF
C
      IF (NACTA.EQ.2) GOTO 123
C
C             CHOOSE NORMAL MODE QUANTUM NUMBERS FROM A THERMAL
C             DISTRIBUTION IF NACT=5
C
  113 CONTINUE
      IF (NACTA.EQ.5) THEN
         CALL THRMAN(WWA,ANQA,TVIBA,NMBAR)
         WRITE(6,45)
         WRITE(6,46)(ANQA(I),I=1,NMBAR)
         WRITE(9,46)(ANQA(I),I=1,NMBAR)
      ENDIF      
C
C             CALCULATE NORMAL MODE ENERGIES AND AMPLITUDES
C
      ENMTA=0.0D0
      DO 122 I=1,NMBAR
         DUM=(ANQA(I)+0.5D0)*WWA(I)/C6/349.757D0
         ENMTA=ENMTA+DUM
         DUM=DUM*C1
         AMPA(I)=DSQRT(2.0D0*DUM)/WWA(I)
  122 CONTINUE
C
C             CHOOSE THE ANGULAR MOMENTUM VECTOR
C
  123 CONTINUE
      CALL ROTEN(AMA,AI,TROTA,EROTA,NROTA,NLINA)
C
C             SAVE INITIAL ROTATIONAL ANGULAR MOMENTUM
C
      AMAI(1)=AMA(1)/C7
      AMAI(2)=AMA(2)/C7
      AMAI(3)=AMA(3)/C7
      AMAI(4)=DSQRT(AMAI(1)**2+AMAI(2)**2+AMAI(3)**2)
      WRITE(6,124)EROTA,AMAI(1),AMAI(2),AMAI(3)
C
C             CHOOSE THE INITIAL COORDINATES AND MOMENTA
C
      N=NATOMA(1)
      DO 125 I=1,N
         L(I)=LA(1,I)
         J3=3*L(I)
         J2=J3-1
         J1=J2-1
         K3=3*I
         K2=K3-1
         K1=K2-1
         QZ(J1)=QZA(1,K1)
         QZ(J2)=QZA(1,K2)
         QZ(J3)=QZA(1,K3)
  125 CONTINUE
      DUM1=WTA(1)
      ETAI=EROTA+ENMTA
      IF (NACTA.EQ.1) THEN
         CALL ORTHAN(AMA,DUM1,ENMTA,ETAI,QMAXA,QMINA,PMAXA,
     *               PSCALA,ERAI,N)
         GOTO 126
      ENDIF
C
C             CALCULATE NORMAL MODE ENERGIES AND AMPLITUDES FOR A
C             MICROCANONICAL ENSEMBLE
C
      IF (NACTA.EQ.2) THEN
         DUM=ENMTA*C1
         NN=NMBAR-1
         DO 94 I=1,NN
            RAND=RAND0(ISEED)
            SDUM=1.0D0/FLOAT(NMBAR-I)
            SDUM=DUM*(1.0D0-RAND**SDUM)
            DUM=DUM-SDUM
            AMPA(I)=DSQRT(2.0D0*SDUM)/WWA(I)
   94    CONTINUE
         AMPA(NMBAR)=DSQRT(2.0D0*DUM)/WWA(NMBAR)
      ENDIF
      CALL INITQP(WWA,AMPA,CA,AMA,DUM1,ETAI,EROTA,AI,ERAI,N,NMBAR)
C
C         INITIAL CONDITION FOR REACTION COORDINATE
C
      IF (NSELT.EQ.3) CALL BAREXC(DUM1,CA,AMA,ERAI,N,NMA)
C
C         INITIAL CONDITIONS FOR REACTANT B
C
  126 CONTINUE
      IF (NATOMB(1).EQ.0) THEN
         IF (NATOMA(1).NE.2) GOTO 999
         CALL DVDQ
         CALL ENERGY
         GOTO 999
      ENDIF
      IF (NATOMB(1).GT.1) GOTO 129
C
C             IF FRAGMENT B IS AN ATOM ZERO ITS Q ELEMENTS
C
      J3=3*LB(1,1)
      J2=J3-1
      J1=J2-1
      Q(J1)=0.0D0
      Q(J2)=0.0D0
      Q(J3)=0.0D0
      GOTO 160
C
C             SELECT INITIAL Q'S AND P'S FOR REACTANT B.
C
C             PUT Q'S AND P'S OF A IN TEMPORARY STORAGE.
C             SET P ARRAY TO ZERO AND EQUATE THE Q AND QZ ARRAYS FOR A
C
  129 CONTINUE
      WRITE(6,158)
      N=NATOMA(1)
      DO 130 I=1,N
         J3=3*LA(1,I)
         J2=J3-1
         J1=J2-1
         K3=3*I
         K2=K3-1
         K1=K2-1
         QQ(J1)=Q(J1)
         QQ(J2)=Q(J2)
         QQ(J3)=Q(J3)
         PP(J1)=P(J1)
         PP(J2)=P(J2)
         PP(J3)=P(J3)
         Q(J1)=QZA(1,K1)
         Q(J2)=QZA(1,K2)
         Q(J3)=QZA(1,K3)+5.0D0   ! for HOH ,especially
C         Q(J3)=QZA(1,K3)+1000.0D0
         P(J1)=0.0D0
         P(J2)=0.0D0
         P(J3)=0.0D0
  130 CONTINUE
C
C             RESET Q ARRAY TO QZ ARRAY FOR B
C
      N=NATOMB(1)
      DO 127 I=1,N
         J3=3*LB(1,I)
         K3=3*I
         Q(J3)=QZB(1,K3)
  127 CONTINUE
C
      IF (NATOMB(1).GT.2) GOTO 150
      L(1)=LB(1,1)
      L(2)=LB(1,2)
C
C          DIATOM B IS TREATED SEMICLASSICALLY
C
      IF (NSFLAG.NE.1) THEN
        IF(NTZ.EQ.1)THEN
          I=NATOMA(1)
          N=NATOMB(1)
          CALL NMODE(N,I)
          DUM=EIG(6)
        ENDIF

         IF(TRVB.GE.0.0D0)THEN
           WRITE(6,*)'NB AND JB SAMPLED FROM A DISTRIBUTION'
           WRITE(6,*)'TRVB = ',TRVB
C          CALCULATE N
           IF(NTZ.EQ.1)THEN
             WWB(1)=EIG(6)*C6
             WWBSTORE=WWB(1)
           ELSE
             WWB(1)=WWBSTORE
             DUM=WWB(1)/C6
           ENDIF
           NMBAR=1
           CALL THRMAN(WWB,NB,TRVB,NMBAR)
           WRITE(6,*)'NB = ',NB
C          CALCULATE J
           WD1=W(L(1))
           WD2=W(L(2))
           CALL PROBJ(TRVB,AIB,ISEED,JB)
           WRITE(6,*)'JB = ',JB
         ELSE
           WRITE(6,*)'NB AND JB USED AS PROVIDED IN INPUT FILE'
         ENDIF

         ENJB=(DBLE(NB)+0.5D0)*DUM/349.755D0*C1
         CALL INITEBK(NB,JB,RMINB,RMAXB,DH,RMASSB,ENJB,PTESTB,ALB)
         SDUM=ENJB/C1
         WRITE(6,128)DUM,SDUM
      ENDIF
C
C             SELECT INITIAL RELATIVE COORDINATE AND MOMENTUM
C
      DUM=ALB**2/2.0D0/RMASSB
  132 RAND=RAND0(ISEED)
      R=RMINB+(RMAXB-RMINB)*RAND
      Q(3*L(1))=-0.5D0*R
      Q(3*L(1)-1)=0.0D0
      Q(3*L(1)-2)=0.0D0
      Q(3*L(2))= 0.5D0*R
      Q(3*L(2)-1)=0.0D0
      Q(3*L(2)-2)=0.0D0
      CALL DVDQ
      CALL ENERGY
      VDUM=(V-DH)*C1
      SUMM=ENJB-DUM/R**2-VDUM
      IF (SUMM.LE.0.0D0) THEN
         SUMM=0.0D0
         PR=0.0D0
      ELSE
         PR=DSQRT(2.0D0*RMASSB*SUMM)
         SDUM=PTESTB/PR
         RAND=RAND0(ISEED)
         IF (SDUM.LT.RAND) GOTO 132
      ENDIF
      RAND=RAND0(ISEED)
      IF (RAND.LT.0.5D0) PR=-PR
C
C             CHOOSE INITIAL CARTESIAN COORDINATES AND MOMENTA, AND
C             ANGULAR MOMENTUM.  DIATOM LIES ALONG THE X-AXIS.
C             THEN RANDOMLY ROTATE THE CARTESIAN COORDINATES AND
C             MOMENTA IN THE CENTER OF MASS FRAME.
C
  142 CONTINUE
      CALL HOMOQP(R,PR,ALB,AMB,RMASSB,BI)
      AMBI(1)=AMB(1)/C7
      AMBI(2)=AMB(2)/C7
      AMBI(3)=AMB(3)/C7
      AMBI(4)=AMB(4)/C7
      WRITE(6,136)AMBI(1),AMBI(2),AMBI(3)
      GOTO 155
C
  150 CONTINUE
C
C             FRAGMENT B IS A POLYATOMIC
C
      IF (NACTB.EQ.1) GOTO 153
C
C             CALCULATE NORMAL MODE EIGENVALUES AND EIGENVECTORS
C
      IF (NSFLAG.EQ.1.AND.NACTB.NE.5) GOTO 153
      IF (NSFLAG.NE.1.OR.NACTB.NE.5) THEN
         N=NATOMB(1)
         K=3*N
         M=6-NLINB
         NMB=K-M
         I=NATOMA(1)
         CALL NMODE(N,I)
         DO 159 I=1,NMB
            WWB(I)=EIG(I+M)*C6
            DO 151 J=1,K
               CB(J,I)=A(I+M,J)
  151       CONTINUE
  159    CONTINUE  
      ENDIF
C
      IF (NACTB.EQ.2) GOTO 153
C
C             CHOOSE NORMAL MODE QUANTUM NUMBERS FROM A THERMAL
C             DISTRIBUTION IF NACT=5
C
      IF (NACTB.EQ.5) THEN
         CALL THRMAN(WWB,ANQB,TVIBB,NMB)
         WRITE(6,45)
         WRITE(6,46)(ANQB(I),I=1,NMB)
         WRITE(9,46)(ANQB(I),I=1,NMB)
      ENDIF
C             CALCULATE NORMAL MODE ENERGIES AND AMPLITUDES
C
      ENMTB=0.0D0
      DO 152 I=1,NMB
         DUM=(ANQB(I)+0.5D0)*WWB(I)/C6/349.757D0
         ENMTB=ENMTB+DUM
         DUM=DUM*C1
         AMPB(I)=DSQRT(2.0D0*DUM)/WWB(I)
  152 CONTINUE
C
C             CHOOSE THE ANGULAR MOMUNTUM VECTOR
C
  153 CONTINUE
      CALL ROTEN(AMB,BI,TROTB,EROTB,NROTB,NLINB)
C
C             SAVE INITIAL ROTATIONAL ANGULAR MOMENTUM
C
      AMBI(1)=AMB(1)/C7
      AMBI(2)=AMB(2)/C7
      AMBI(3)=AMB(3)/C7
      AMBI(4)=DSQRT(AMBI(1)**2+AMBI(2)**2+AMBI(3)**2)
      WRITE(6,163)EROTB,AMBI(1),AMBI(2),AMBI(3)
C
C             CHOOSE THE INITIAL COORDINATES AND MOMENTA
C
      N=NATOMB(1)
      DO 154 I=1,N
         L(I)=LB(1,I)
         J3=3*L(I)
         J2=J3-1
         J1=J2-1
         K3=3*I
         K2=K3-1
         K1=K2-1
         QZ(J1)=QZB(1,K1)
         QZ(J2)=QZB(1,K2)
         QZ(J3)=QZB(1,K3)
  154 CONTINUE
      DUM1=WTB(1)
      ETBI=EROTB+ENMTB
      IF (NACTB.EQ.1) THEN
         CALL ORTHAN(AMB,DUM1,ENMTB,ETBI,QMAXB,QMINB,PMAXB,
     *               PSCALB,ERBI,N)
         GOTO 155
      ENDIF
C
C             CALCULATE NORMAL MODE ENERGIES AND AMPLITUDES FOR A
C             MICROCANONICAL ENSEMBLE
C
      IF (NACTB.EQ.2) THEN
         DUM=ENMTB*C1
         NN=NMB-1
         DO 147 I=1,NN
            RAND=RAND0(ISEED)
            SDUM=1.0D0/FLOAT(NMB-I)
            SDUM=DUM*(1.0D0-RAND**SDUM)
            DUM=DUM-SDUM
            AMPB(I)=DSQRT(2.0D0*SDUM)/WWB(I)
  147    CONTINUE
         AMPB(NMB)=DSQRT(2.0D0*DUM)/WWB(NMB)
      ENDIF
      CALL INITQP(WWB,AMPB,CB,AMB,DUM1,ETBI,EROTB,BI,ERBI,N,NMB)
C
C         PUT Q'S AND P'S OF A IN PERMANENT LOCATIONS
C
  155 CONTINUE
      N=NATOMA(1)
      DO 157 I=1,N
         K=0
  156    J=3*LA(1,I)-K
         Q(J)=QQ(J)
         P(J)=PP(J)
         K=K+1
         IF (K.LT.3) GOTO 156
  157 CONTINUE
C
C         SELECT IMPACT PARAMETER.  FIX POSITIONS OF A AND B FOR
C         CHOSEN IMPACT PARAMETER(B) AND SEPARATION(S).
C
  160 CONTINUE
      SB=BMAX
      IF (NOB.NE.1) THEN
         RAND=RAND0(ISEED)
         SB=BMAX*DSQRT(RAND)
      ENDIF
      WRITE(6,162)SB
      WRITE(26,162)SB
      DUM1=DSQRT(S*S-SB*SB)
      N=NATOMB(1)
      DO 164 I=1,N
         J=3*LB(1,I)
         Q(J)=Q(J)+DUM1
         Q(J-1)=Q(J-1)+SB
  164 CONTINUE
C
C         IF NREL = 0
C         CHOOSE RELATIVE ENERGY FROM BOLTZMANN DISTRIBUTION
C
      IF (NREL.EQ.0) THEN
         DUM=GAMA(2,ISEED)
         SEREL=0.00198717D0*DUM*TRANS
         WRITE(6,169)SEREL
         SEREL=SEREL*C1
      ENDIF
C
C             ADD RELATIVE TRANSLATIONAL ENERGY
C
      WT=WTA(1)+WTB(1)
      SDUM=WTA(1)*WTB(1)/WT
      DUM=DSQRT(2.0D0*SEREL/SDUM)
      VELA=DUM*WTB(1)/WT
      VELB=VELA-DUM
      N=NATOMA(1)
      DO 165 I=1,N
         J=3*LA(1,I)
         P(J)=P(J)+VELA*W(LA(1,I))
  165 CONTINUE
      N=NATOMB(1)
      DO 166 I=1,N
         J=3*LB(1,I)
         P(J)=P(J)+VELB*W(LB(1,I))
  166 CONTINUE
      CALL DVDQ
      CALL ENERGY
C
C         SAVE THE INITIAL RELATIVE VELOCITY AND ORBITAL ANGULAR MOMENTUM
C
      VI(1)=0.0D0
      VI(2)=0.0D0
      VI(3)=DUM
      VI(4)=DUM
      OAMI(1)=-SB*DUM*SDUM/C7
      OAMI(2)=0.0D0
      OAMI(3)=0.0D0
      OAMI(4)=DABS(OAMI(1))
      WRITE(6,167)OAMI(4)
      WRITE(26,167)OAMI(4)
C
  999 CONTINUE
      NSFLAG=1
      RETURN
      END
C
C         SET UP DATA FOR RANDOM NUMBER GENERATOR.
C
C         WRITTEN BY DAVID SCHWENKE (NASA AMES)
C         FOR MACHINES WITH A MAXIMUM INTEGER OF (2**32 - 1) OR LARGER
C         AND HAS PRECISION OF 1 IN 2**64
C         AMENDED BY KIERAN F. LIM (STANFORD UNIVERSITY)
C         FOR MACHINES WITH A MAXIMUM INTEGER OF (2**16 - 1) OR LARGER
C         NOTE:  DEC MICROVAX HAS A MAXIMUM INTEGER OF (2**31 - 1)
C         LATEST UPDATE: 12 APRIL 1990
C
C         THIS ROUTINE HITS INTEGER OVERFLOW ONLY IF THE MAXIMUM
C         INTEGER IS (2**16 - 1) = 65535 OR SMALLER
C
C         EITHER READ IN EXISTING SEQUENCE OF RANDOM NUMBERS FROM UNIT 50
C         OR START A NEW SEQUENCE:
C
C            1.  CONVERT ISEED TO BASE IBFCTR  (IBFCTR=256=2**8)
C                0 .LE. ISEED .LE.(2**31 - 1)
C            2.  TAKE ISEED3=2*ISEED+1
C                1 .LE. ISEED3 .LE.(2**32 - 1)
C                WITH ISEED3 ODD
C            3.  EXERCISE RANDOM NUMBER GENERATOR IN CASE
C                ISEED NOT CHOSEN BETWEEN 0 AND (2**31 - 1)
C            4.  PUT 100 RANDOM NUMBERS INTO ARRAY X: THIS IS
C                NEW SEQUENCE
C
C         RANDOM NUMBER GENERATOR IS FUNCTION RAND1 WHICH
C         USES THE MULTIPLICATIVE CONGRUENTIAL METHOD
C
C         REFERENCE: D.E. KNUTH, "THE ART OF COMPUTER PROGRAMMING",
C         VOL. 2 OF "SEMINUMERICAL ALGORITHMS" (ADDISON-WESLEY, 1981).
C         2ND EDITION.
C
C         CALCULATIONS IN BASE (IBFCTR=256=2**8)
C
      SUBROUTINE RANDST(ISEED)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/RANCOM/RANLST(100),ISEED3(8),IBFCTR
C
  910 FORMAT(/,1X,35HINITIATING A RANDOM NUMBER SEQUENCE,
     *' - INPUTTED ISEED IN BASE 10 = ',I10,
     *//,1X,'ISEED3 = 2 * ISEED + 1',
     */,1X,'IN BASE 256 (I.E. BASE 2**8) = ',8I4,/)
C
      IBFCTR = 256
C
C         CONVERT ISEED TO BASE IBFCTR
C         ANSWER IS STORED IN ISEED3
C
      IS=ISEED
      DO 140 I=1,8
         ISEED3(I)=MOD(IS,IBFCTR)
         IS=IS/IBFCTR
  140 CONTINUE
C
C         DOUBLE ISEED3
C         AT THIS STAGE ISEED3 IS ENSURED TO BE AN EVEN NUMBER
C
C         PROGRAM WILL CRASH IN THIS SECTION IF ISEED.GE.(2**31)
C         I.E. IN DO LOOP 180 AT LINE
C                                    ISEED3(I+1) = ISEED3(I+1) + 1
C
      DO 145 I=1,8
         ISEED3(I) = ISEED3(I) + ISEED3(I)
  145 CONTINUE
      DO 180 I=1,8
  150    CONTINUE
         IF (ISEED3(I)-IBFCTR) 170, 160, 160
  160    CONTINUE
         ISEED3(I) = ISEED3(I) - IBFCTR
         ISEED3(I+1) = ISEED3(I+1) + 1
         GOTO 150
  170    CONTINUE
  180 CONTINUE
C
C         ISEED3 + 1
C         THIS ENSURES THAT ISEED3 IA A ODD NUMBER
C
      ISEED3(1) = ISEED3(1) + 1
      DO 270 I=1,8
  240    CONTINUE
         IF (ISEED3(I)-IBFCTR) 260, 250, 250
  250    CONTINUE
         ISEED3(I) = ISEED3(I) - IBFCTR
         ISEED3(I+1) = ISEED3(I+1) + 1
         GOTO 240
  260    CONTINUE
  270 CONTINUE
      WRITE(6,910) ISEED, (ISEED3(9-I), I=1,8)
C
C         EXERCISE RANDOM NUMBER GENERATOR IN CASE
C         ISEED NOT CHOSEN BETWEEN 0 AND (2**31 - 1)
C
C         PUT 100 RANDOM NUMBERS INTO ARRAY RANLST: THIS IS A 
C         NEW SEQUENCE.
C
      DO 440 I=1,100
         RANLST(I)=RAND1(ISEED3)
  440 CONTINUE
      DO 450 I=1,100
         RANLST(I)=RAND1(ISEED3)
  450 CONTINUE
      ISEED=0
      RETURN
      END
C
C         FUNCTION RAND0(IDUM)
C         GETS THE NEXT RANDOM NUMBER FROM A SEQUENCE OF RANDOM NUMBERS
C         BY SHUFFLING THE SEQUENCE
C
C         REFERENCE: D.E. KNUTH, "THE ART OF COMPUTER PROGRAMMING",
C         VOL. 2 OF "SEMINUMERICAL ALGORITHMS" (ADDISON-WESLEY, 1981),
C         2ND EDITION. (PG. 32)
C
C         WRITTEN BY DAVID SCHWENKE (NASA AMES)
C         AMENDED BY KIERAN F. LIM (STANFORD UNIVERSITY)
C
C         IDUM IS A DUMMY NUMBER
C
      FUNCTION RAND0(IDUM)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/RANCOM/RANLST(100),ISEED3(8),IBFCTR
      J=INT(99E0*RANLST(100))+1
      RAND0 = RANLST(100)
      RANLST(100)=RANLST(J)
      RANLST(J)=RAND1(ISEED3)
      RETURN
      END
C
C         FUNCTION RAND1(ISEED)
C         RANDOM NUMBER GENERATION USING THE MULTIPLICATIVE
C         CONGRUENTIAL METHOD.
C
C         WRITTEN BY DAVID SCHWENKE (NASA AMES)
C         FOR MACHINES WITH A MAXIMUM INTEGER OF (2**32 - 1) OR LARGER
C         AND HAS PRECISION OF 1 IN 2**64
C
C         AMENDED BY KIERAN F. LIM (STANFORD uNIVERSITY)
C         FOR MACHINES WITH A MAXIMUM INTEGER OF (2**16 - 1) OR LARGER
C         NOTE:  DEC MICROVAX HAS A MAXIMUM INTEGER OF (2**31 - 1)
C
C         THIS ROUTINE HITS INTEGER OVERFLOW ONLY IF THE MAXIMUM
C         INTEGER IS (2**16 - 1) = 65535 OR SMALLER
C
C         IF RANLST(N) IS THE CURRENT SEED, THEN THE NEXT ONE RANLST(N+1)
C         IS GIVEN BY
C
C         RANLST(N+1)=(A*RANLST(N)+C)MOD(M)
C
C         AND THE RANDOM NUMBER IS RANLST(N+1)/M.
C         THE ARITHMETIC IS CARRIED OUT USING 8 "DIGIT" NUMBERS
C         OF BASE 2**8 (=256), THUS ISEED IS 8 ELEMENT ARRAY WITH
C         EACH ELEMENT A "DIGIT". THE UNITS "DIGIT" IS THE FIRST
C         ELEMENT OF ISEED.
C         A NINTH "DIGIT" IS PROVIDED FOR OVERFLOWS IN THE INTERMEDIATE
C         STEPS FOR ARITHMETIC OPERATIONS.
C
C         PARAMETERS:
C
C          M = 2**64 = (1) (0) (0) (0) (0) (0) (0) (0) (0) BASE 2**8
C          A = 6,364,136,223,846,793,005 BASE 10
C            = (22609) (62509) (19605) (322557) BASE 2**16
C            = (88) (81) (244) (45) (76) (149) (127) (45) BASE 256
C          C = 0
C
C         THESE PARAMETERS ARE FROM D.E. KNUTH, "THE ART OF COMPUTER
C         PROGRAMMING", VOL. 2 OF SEMINUMERICAL ALGORITHMS" (ADDISON-WESLEY
C         READING,MASS. 1981) 2ND EDITION,
C         SECTION 3.3.4, TABLE 1 AT PAGES 102-104
C         AND ARE ATTRIBUTED TO C.E. HAYNES
C
      FUNCTION RAND1(ISEED)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/RANCOM/RANLST(100),ISEED3(8),IBFCTR
      DIMENSION ISEED(8),IA(8),IC(8),ID(16)
C
C         BASE 2**16 INFORMATION
C
C         DATA IA/32557,19605,62509,22609/
C         DATA IC/0,0,0,0/ 
C         DATA BI/1.5258789062D-5/
C
C         BASE 2**8 INFORMATION
C
      DATA IA/45,127,149,76,45,244,81,88/
      DATA IC/0,0,0,0,0,0,0,0/
      DATA BI/3.90625D-3/
C
C         ID WILL EQUAL ISEED*IA+IC.
C         SET IT EQUAL TO IC
C
      DO 110 I=1,8
         ID(I)=IC(I)
         ID(I+8)=0
  110 CONTINUE
C
C         FORM IA*ISEED+IC
C
      DO 150 J=1,8
         DO 140 I=1,9-J
            K=J+I-1
C
C         IP IS UNNORMALIZED PRODUCT OF K DIGIT OF RESULT SO FAR.
C         IT SHOULD NEVER EXCEED IBFCTR*(IBFCTR-1).
C
            IP=IA(J)*ISEED(I)
C
C         NOW NORMALIZE THE RESULT (CARRY FORWARD TO NEXT DIGITS IF
C         NECESSARY)
C
  120       CONTINUE
            IP=IP+ID(K)
            ID(K)=MOD(IP,IBFCTR)
            IP=IP/IBFCTR
            IF (IP.EQ.0.OR.K.EQ.8) GOTO 130
            K=K+1
            GOTO 120
  130       CONTINUE
  140    CONTINUE
  150 CONTINUE
C
      DO 160 I=1,8
         ISEED(I)=ID(I)
  160 CONTINUE
C
C         NOW DETERMINE FLOATING POINT RANDOM NUMBER
C
      RAND1=FLOAT(ISEED(1))
      DO 170 I=2,8
         RAND1=FLOAT(ISEED(I))+RAND1*BI
  170 CONTINUE
      RAND1=RAND1*BI
      RETURN
      END     
C
C         FUNCTION GAMA RETURNS A DEVIATE DISTRIBUTED AS A GAMMA 
C         DISTRIBUTION OF INTEGER ORDER IA
C
      FUNCTION GAMA(IA,IDUM)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DUM=1.0D0
      DO 11 J=1,IA
         DUM=DUM*RAND0(IDUM)
   11 CONTINUE
      GAMA=-DLOG(DUM)
      RETURN
      END
C
C         CHECK FOR INTERMEDIATE AND FINAL EVENTS
C
      SUBROUTINE TEST
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      CHARACTER*10 TYPE
      CHARACTER*15 COMP
      COMMON/TESTB/RMAX(NDP),RBAR(NDP),NTEST,NPATHS,NABJ(NDP),NABK(NDP),
     *NPATH,NAST
      COMMON/COORS/R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      COMMON/PSN2/PESN2,GA,RA,RB
      COMMON/FORCES/N,I3N,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/PRLIST/T,V,H,TIME,NTZ,NT,ISEED0(8),NC,NX
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/FRAGB/WTA(NDP),WTB(NDP),LA(NDP,ND1),LB(NDP,ND1),
     *QZA(NDP,3*ND1),QZB(NDP,3*ND1),NATOMA(NDP),NATOMB(NDP)
      COMMON/WASTE/QQ(3*ND1),PP(3*ND1),WX,WY,WZ,L(ND1),NAM
      COMMON/TESTIN/VRELO,INTST
      COMMON/TESTSN2/GAO,NSAD,NCBA,NCAB,IBAR
      COMMON/FINALB/EROTA,EROTB,EA(3),EB(3),AMA(4),AMB(4),AN,AJ,BN,BJ,
     *OAM(4),EREL,ERELSQ,BF,SDA,SDB,DELH(NDP),ANG(16),NFINAL
      DIMENSION QCMA(3),VCMA(3),QCMB(3),VCMB(3),QR(3),VR(3)
      real*8 zuobiao(3,6),chang(15),cha(3,15)
      integer*4 ii,jj,kk,id
C
 900  FORMAT(4X,' TURNING POINT #  ','  CYCLE ','  RCM(A)',
     *       '    EA     ','    EB     ','    EROTA  ','    EROTB  ',
     *       '    JA     ','    JB     ','    L      ')
 903  FORMAT(8X,A10,I4,I8,F8.3,7D11.4)
 905  FORMAT(/,5X,32H$$$$BARRIER CROSSING NUMBER$$$$ ,I6,
     &       10H  AT CYCLE,I8)
 906  FORMAT(5X,37H$$$$BARRIER CROSSING FROM B TO A $$$$)
 907  FORMAT(5X,37H$$$$BARRIER CROSSING FROM A TO B $$$$)
 935  FORMAT(7X,4HRA= ,F7.3,3X,4HRB= ,F7.3,3X,4HGA= ,F7.3)
 910  FORMAT(4X,' TURNING POINT #  ',5X,' COMPLEX ',6X,
     *'  CYCLE ','  RCM(A)',
     *       '    EA     ','    EB     ','    EROTA  ','    EROTB  ',
     *       '    JA     ','    JB     ','    L      ')
 913  FORMAT(8X,A10,I4,2X,A17,I8,F8.3,7D11.4)
   
      NTEST=0

            IF (NTEST.GT.0) GOTO 3
    1 CONTINUE
      NPATH=1
    3 RETURN  !NPATH=I, the path number:and NTEST=0 no reaction
      END
C
C         CALCULATE POTENTIAL, KINETIC AND TOTAL ENERGY OF THE
C         MOLECULAR SYSTEM
C
      SUBROUTINE ENERGY
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/HFIT/PSCALA,PSCALB,VZERO
      COMMON/PRLIST/T,V,H,TIME,NTZ,NT,ISEED0(8),NC,NX
      COMMON/STRETB/RSZ(100),FS(100),N1J(100),N1K(100)
      COMMON/MORSEB/RMZ(100),B(100),D(100),N2J(100),N2K(100),
     *CM1(100),CM2(100),CM3(100),CM4(100)
      COMMON/BENDB/THETAZ(200),FBZ(200),CJ(200),CK(200),RJZ(200),
     *RKZ(200),FB(200),N3J(200),N3K(200),N3M(200)
      COMMON/ALPHAB/FA(20),N4J(20),N4K(20),N4M(20),N4N(20)
      COMMON/LENJB/ALJ(200),BLJ(2000),CLJ(200),N5J(200),N5K(200),
     *NREP(200),MREP(200),LREP(200)
      COMMON/TAUB/VZTAU(20),N6I(20),N6J(20),N6K(20),N6L(20),N6M(20),N6N(
     *20)
      COMMON/EXPB/AEX(100),BEX(100),CEX(100),N7J(100),N7K(100),NPOW(100)
      COMMON/GHOSTB/GC1(20),GEX1(20),GEX2(20),N8I(20),N8J(20),N8K(20),
     *N8L(20),N8M(20),N8N(20)
      COMMON/VRRB/FKRRZ(100),FKRR(100),CIJ(100),CKL(100),RIJ0(100),
     *            RKL0(100),N10I(100),N10J(100),N10K(100),N10L(100)
      COMMON/VRTB/FKRTZ(100),FKRT(100),CRT(100),R110(100),
     *            N11I(100),N11J(100),N11B(100),NRT(100)
      COMMON/VTTB/FKTTZ(100),FKTT(100),N12B(100),N12BB(100),NTT(100)
      COMMON/ANGLEB/FDH(20,4),GDH(20,4),NDH(20),N13I(20),
     *N13J(20),N13K(20),N13L(20)
      COMMON/AXTB/ZAXT(300),VAXT(300),N14I(300),N14J(300),N14K(300)
      COMMON/RYDBGB/RYDZ(100),DRYD(100),ARYD(100),VRYD(100),
     *N16J(100),N16K(100)
      COMMON/HFDB/AHFD(100),BHFD(100),RHFD(100),VHFD(100),C6HFD(100),
     *C8HFD(100),C10HFD(100),N17J(100),N17K(100)
      COMMON/LEPSA/RLZ1(100),RLZ2(100),RLZ3(100),BL1(100),BL2(100),
     *BL3(100),DL1(100),DL2(100),DL3(100),N18J1(100),N18K1(100),
     *N18J2(100),N18K2(100),N18J3(100),N18K3(100),DELTA1(100),
     *DELTA2(100),DELTA3(100),VLEPSA(100)
      COMMON/LEPSB/RLZS1(100),RLZS2(100),RLZS3(100),RLZT1(100),
     *RLZT2(100),RLZT3(100),BLS1(100),BLS2(100),BLS3(100),BLT1(100),
     *BLT2(100),BLT3(100),DLS1(100),DLS2(100),DLS3(100),DLT1(100),
     *DLT2(100),DLT3(100),VLEPSB(100),N19J1(100),N19K1(100),
     *N19J2(100),N19K2(100),N19J3(100),N19K3(100)
      COMMON/DMBEB/VDMBE,NDMB(3)
      COMMON/COORS/R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      COMMON/FORCES/N,I3N,NS,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,NTET,
     *NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      COMMON/PSN2/PESN2,GA,RA,RB
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      COMMON/TETRAB/ N9I(20),N9J(20),N9K(20),N9L(20),N9M(20),
     +               FT0(20,6),FT2(20,6),GT0(20,6),GT2(20,6),
     +               HT0(20,6),HT2(20,6),THT(20,6),R0(20,4),
     +               THT1(20,6),THT2(20,6),FD1(20,4),
     +               HD1(20,4),GN0(20,5),FT(20,6),GT(20,6),
     +               HT(20,6),FD(20,4),HD(20,4),DLTA(20,48),
     +               TETTST,SGN1,SGN2,SGN3,SGN4
      COMMON/CUBEB/ S3(4),DS3(4),CBIC(15,6),ANG1(20,6,4),GN4(20)
C
      T=0.0D0
      V=0.0D0
C
C         CALCULATE POTENTIAL ENERGY OF HARMONIC STRETCHES
C
      IF (NS.NE.0) THEN
         DO 1 I=1,NS
            NJ=N1J(I)
            NK=N1K(I)
            JK=(NJ-1)*(2*N-NJ)/2+NK-NJ
            V=V+FS(I)*(R(JK)-RSZ(I))**2/2.0D0
    1    CONTINUE
      ENDIF
C
C         CALCULATE POTENTIAL ENERGY OF MORSE FUNCTIONS
C
      IF (NM.NE.0) THEN
         DO 2 I=1,NM
            NJ=N2J(I)
            NK=N2K(I)
            JK=(NJ-1)*(2*N-NJ)/2+NK-NJ
C
C             BETA PARAMETER IS REPRESENTED AS A CUBIC POLYNOMIAL
C
            BETAM=B(I)
            RLCM=R(JK)-RMZ(I)
            IF (B(I).LE.0.0D0) THEN
               BETAM=CM1(I)+CM2(I)*RLCM+CM3(I)*RLCM**2+CM4(I)*RLCM**3
            ENDIF
            V=V+D(I)*(1.0D0-DEXP(-BETAM*RLCM))**2
   2     CONTINUE
      ENDIF
C
C         CALCULATE POTENTIAL ENERGY OF HARMONIC BENDS
C
      IF (NB.NE.0) THEN
         DO 3 I=1,NB
            V=V+FB(I)*(THETA(I)-THETAZ(I))**2/2.0D0
    3    CONTINUE
         EH2O=V
      ENDIF
C
C         CALCULATE POTENTIAL ENERGY OF ALPHA BENDS
C
      IF (NA.NE.0) THEN
         DO 4 I=1,NA
            V=V+FA(I)*(ALPHA(I)-PI)**2/2.0D0
    4    CONTINUE
      ENDIF
C
C         CALCULATE POTENTIAL ENERGY OF GENERAL LENNARD-JONES POTENTIAL
C         IF NREP(I), MREP(I), OR LREP(I) = 0, THE PROGRAM BYPASSES THE
C         APPROPRIATE PART OF THE POTENTIAL.
C
      IF (NLJ.NE.0) THEN
         DO 51 I=1,NLJ
            NJ=N5J(I)
            NK=N5K(I)
            JK=(NJ-1)*(2*N-NJ)/2+NK-NJ
            IF (NREP(I).NE.0) THEN 
               V=V+ALJ(I)/R(JK)**NREP(I)
            ENDIF
            IF (MREP(I).NE.0) THEN
               V=V+BLJ(I)/R(JK)**MREP(I)
            ENDIF
            IF (LREP(I).NE.0) THEN
               V=V+CLJ(I)/R(JK)**LREP(I)
            ENDIF
   51    CONTINUE
      ENDIF
C
C         CALCULATE TORSION POTENTIALS
C         VZTAU .LT. ZERO INDICATES 3-FOLD TORSION
C
      IF (NTAU.NE.0) THEN
         DO 63 I=1,NTAU
            IF (VZTAU(I).LT.0) THEN 
               V=V-VZTAU(I)*(0.5D0-1.5D0*CTAU(I)+2.0D0*CTAU(I)**3)
            ELSE
               V=V+VZTAU(I)*(1.0D0-CTAU(I)**2)
            ENDIF
   63    CONTINUE
      ENDIF
C
C         CALCULATE POTENTIAL ENERGY OF REPULSIONS AND ELECTROSTATIC
C         INTERACTIONS.  IF AEX(I).LT.0 PROGRAM BYPASSES REPULSION.
C         IF NPOW(I)=0 PROGRAM BYPASSES ELECTROSTATIC INTERACTION.
C
      IF (NEXP.NE.0) THEN
         DO 70 I=1,NEXP
            NJ=N7J(I)
            NK=N7K(I)
            JK=(NJ-1)*(2*N-NJ)/2+NK-NJ
            IF (AEX(I).GE.0) THEN
               V=V+AEX(I)*DEXP(-BEX(I)*R(JK))
            ENDIF
            IF (NPOW(I).NE.0) THEN
               V=V+CEX(I)/R(JK)**NPOW(I)
            ENDIF
   70    CONTINUE
      ENDIF
C
C         CALCULATE POTENTIAL ENERGY OF GHOST PAIRS
C
      IF (NGHOST.NE.0) THEN
         DO 9 I=1,NGHOST
            V=V+GEX1(I)/GR(I,1)+GEX2(I)*(1.D0/GR(I,2)
     *         +1.D0/GR(I,3)+1.D0/GR(I,4)+1.D0/GR(I,5))
    9    CONTINUE
      ENDIF
C
C         CALCULATE POTENTIAL ENERGY FOR TETRAHEDRAL CENTERS
C
      IF (NTET.NE.0) THEN
         DO 15 I=1,NTET
            DO 12 J=1,6
               V=V+0.5D0*FT(I,J)*ANG1(I,J,2)+GT(I,J)*ANG1(I,J,3)
     *            +HT(I,J)*ANG1(I,J,4)
   12       CONTINUE
            DO 14 J=1,4
               K=1+12*(J-1)
               V=V+FD(I,J)*(DLTA(I,K+1)+DLTA(I,K+5)+DLTA(I,K+9))
     *            +HD(I,J)*(DLTA(I,K+3)+DLTA(I,K+7)+DLTA(I,K+11))
   14       CONTINUE
            DUM1=ANG1(I,1,1)*ANG1(I,2,1)*ANG1(I,4,1)
            DUM2=ANG1(I,3,1)*ANG1(I,1,1)*ANG1(I,5,1)
            DUM3=ANG1(I,3,1)*ANG1(I,2,1)*ANG1(I,6,1)
            DUM4=ANG1(I,5,1)*ANG1(I,4,1)*ANG1(I,6,1)
            V=V+GN4(I)*(DUM1+DUM2+DUM3+DUM4)
   15    CONTINUE
      ENDIF
C
C         CALCULATE POTENTIAL ENERGY OF R-R COUPLING
C
      IF (NVRR.NE.0) THEN
         DO 16 I=1,NVRR
            IA=N10I(I)
            JA=N10J(I)
            KA=N10K(I)
            LA=N10L(I)
            IJ=(IA-1)*(2*N-IA)/2+JA-IA
            KL=(KA-1)*(2*N-KA)/2+LA-KA
            V=V+FKRR(I)*(R(IJ)-RIJ0(I))*(R(KL)-RKL0(I))
   16    CONTINUE
      ENDIF
C
C         CALCULATE POTENTIAL ENERGY OF R-THETA COUPLING
C
      IF (NVRT.NE.0) THEN
         DO 17 I=1,NVRT
            IA=N11I(I)
            JA=N11J(I)
            IB=N11B(I)
            IJ=(IA-1)*(2*N-IA)/2+JA-IA
            V=V+FKRT(I)*(R(IJ)-R110(I))*(THETA(IB)-THETAZ(IB))
   17    CONTINUE
      ENDIF
C
C         CALCULATE POTENTIAL ENERGY OF THETA-THETA COUPLING
C
      IF (NVTT.NE.0) THEN
         DO 18 I=1,NVTT
            JB=N12B(I)
            JBB=N12BB(I)
            V=V+FKTT(I)*(THETA(JB)-THETAZ(JB))*(THETA(JBB)-THETAZ(JBB))
   18    CONTINUE
      ENDIF
C
C         CALCULATE POTENTIAL ENERGY OF DIHEDRAL ANGLES
C
      IF (NANG.NE.0) THEN
         DO 21 I=1,NANG
            K=NDH(I)
            DO 19 J=1,K
               DUM=DBLE(J)
               V=V+FDH(I,J)*(1.0D0+DCOS(DUM*DANG(I)-GDH(I,J)))/2.0D0
   19       CONTINUE
   21    CONTINUE
      ENDIF
C
C         CALCULATE AXILROD-TELLER THREE-BODY POTENTIAL ENERGY
C
      IF (NAXT.NE.0) THEN
         DO 23 I=1,NAXT
            V=V+VAXT(I)
   23    CONTINUE
      ENDIF
C
C         CALCULATE SN2 POTENTIAL ENERGY
C
      IF (NSN2.NE.0) THEN
C         V=V+PESN2
       CALL POT0(I3N,VV)
        
           V=V+vv
      ENDIF
C
C         CALCULATE RYDBERG FUNCTION POTENTIAL ENERGY
C
      IF (NRYD.NE.0) THEN
         DO 25 I=1,NRYD
            V=V+VRYD(I)
   25    CONTINUE
      ENDIF
C
C         CALCULATE HARTREE-FOCK DISPERSION POTENTIAL ENERGY
C
      IF (NHFD.NE.0) THEN
          DO 27 I=1,NHFD
             V=V+VHFD(I)
   27     CONTINUE
      ENDIF
C
C         CALCULATE LEPS(A) FUNCTION POTENTIAL ENERGY
C
      IF (NLEPSA.NE.0) THEN
         DO 29 I=1,NLEPSA
            V=V+VLEPSA(I)
   29    CONTINUE
      ENDIF
C
C         CALCULATE LEPS(B) FUNCTION POTENTIAL ENERGY
C
      IF (NLEPSB.NE.0) THEN
         DO 31 I=1,NLEPSB
            V=V+VLEPSB(I)
   31    CONTINUE
      ENDIF
C
C         CALCULATE DOUBLE MANY-BODY EXPANSION POTENTIAL ENERGY
C
      IF (NDMBE.NE.0) V=V+VDMBE
C
C         ADD VZERO TO THE POTENTIAL ENERGY
C
      V=V+VZERO
C
C         CALCULATE KINETIC ENERGY
C
      J=1
      DO 80 I=1,N
         T=T+(P(J)**2+P(J+1)**2+P(J+2)**2)/2.0d0/W(I)
         J=J+3
   80 CONTINUE
C
C         CONVERT ENERGY TO KCAL/MOLE
C
      T=T/C1
      V=V/C1
      H=T+V
      RETURN
      END
C
C         DRIVER ROUTINE FOR CALCULATING ENERGY DERIVATIVES
C
      SUBROUTINE PARTI
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/FORCES/N,I3N,NS,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      J=1
      DO 1 I=1,N
         K=J+1
         L=J+2
         QDOT(J)=P(J)/W(I)
         QDOT(K)=P(K)/W(I)
         QDOT(L)=P(L)/W(I)
         J=J+3
    1 CONTINUE
      CALL DVDQ
      RETURN
      END
C
C         CALCULATE POTENTIAL ENERGY PARTIAL DERIVATIVES WITH 
C         RESPECT TO COORDINATES (PDOT)
C
      SUBROUTINE DVDQ
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/FORCES/N,I3N,NS,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,NTET,
     *NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
C
C         ZERO PDOT'S
C
      DO 101 I=1,I3N
         PDOT(I)=0.0D0
  101 CONTINUE

C
C         CALCULATE PARTIALS OF HARMONIC STRETCHES
C
      IF (NS.NE.0) THEN
         DO 1 I=1,NS
            CALL STRET(I)
    1    CONTINUE
      ENDIF

C
C         CALCULATE PARTIALS OF MORSE STRETCHES
C
      IF (NM.NE.0) THEN
         DO 2 I=1,NM
            CALL MORSE(I)
    2    CONTINUE
      ENDIF

C
C         CALCULATE PARTIALS OF HARMONIC BENDS
C
      IF (NB.NE.0) THEN
         DO 3 I=1,NB
            CALL HBEND(I)
    3    CONTINUE
      ENDIF

C
C         CALCULATE PARTIALS OF ALPHA BENDS
C
      IF (NA.NE.0) THEN
         DO 4 I=1,NA
            CALL HALPHA(I)
    4    CONTINUE
      ENDIF

C
C         CALCULATE PARTIALS OF LENNARD-JONES INTERACTIONS
C
      IF (NLJ.NE.0) THEN
         CALL LENJ(1,NLJ)
      ENDIF
C
C         CALCULATE PARTIALS OF TORSION POTENTIALS
C
      IF (NTAU.NE.0) THEN
         DO 6 I=1,NTAU
            CALL HTAU(I)
    6    CONTINUE
      ENDIF
C
C         CALCULATE PARTIALS OF REPULSIONS AND ELECTROSTATIC
C         INTERACTIONS
C
      IF (NEXP.NE.0) THEN
         DO 7 I=1,NEXP
            CALL HEXP(I)
    7    CONTINUE
      ENDIF
C
C         CALCULATE PARTIALS OF GHOST PAIRS
C
      IF (NGHOST.NE.0) THEN
         DO 8 I=1,NGHOST
            CALL GHOST(I)
    8    CONTINUE
      ENDIF
C
C         CALCULATE PARTIALS OF TETRAHEDRAL CENTERS
C
      IF (NTET.NE.0) THEN
         DO 9 I=1,NTET
            CALL TETRA(I)
    9    CONTINUE
      ENDIF
C
C         CALCULATE PARTIALS OF R-R COUPLING
C
      IF (NVRR.NE.0) THEN
         DO 11 I=1,NVRR
            CALL VRR(I)
   11    CONTINUE
      ENDIF
C
C         CALCULATE PARTIALS OF R-THETA COUPLING
C
      IF (NVRT.NE.0) THEN
         DO 12 I=1,NVRT
            CALL VRT(I)
   12    CONTINUE
      ENDIF
C
C         CALCULATE PARTIALS OF THETA-THETA COUPLING
C
      IF (NVTT.NE.0) THEN
         DO 14 I=1,NVTT
            CALL VTT(I)
   14    CONTINUE
      ENDIF
C
C         CALCULATE PARTIALS OF DIHEDRAL ANGLES
C
      IF (NANG.NE.0) THEN
         DO 13 I=1,NANG
            CALL DANGLE(I)
   13    CONTINUE
      ENDIF
C
C         CALCULATE PARTIALS OF AXILROD-TELLER FUNCTION
C
      IF (NAXT.NE.0) THEN
         DO 15 I=1,NAXT
            CALL AXT(I)
15       CONTINUE
      ENDIF

C
C         CALCULATE PARTIALS OF SN2 FUNCTION
C
      IF (NSN2.NE.0) THEN
C         CALL VSN2
	  call DPESHON(I3N)
      ENDIF

C
C         CALCULATE PARTIALS OF RYDBERG POTENTIAL FUNCTION
C
      IF (NRYD.NE.0) THEN
         DO 17 I=1,NRYD
            CALL RYDBG(I)
   17    CONTINUE
      ENDIF

C
C         CALCULATE PARTIALS OF HARTREE-FOCK DISPERSION FUNCTION
C
      IF (NHFD.NE.0) THEN
         CALL HFD(1,NHFD)
      ENDIF
C
C         CALCULATE PARTIALS OF LEPS(A) POTENTIAL FUNCTION
C
      IF (NLEPSA.NE.0) THEN
         DO 19 I=1,NLEPSA
            CALL LEPS1(I)
   19    CONTINUE
      ENDIF
C
C         CALCULATE PARTIALS OF LEPS(B) POTENTIAL FUNCTION
C
      IF (NLEPSB.NE.0) THEN
         DO 21 I=1,NLEPSB
            CALL LEPS2(I)
   21    CONTINUE
      ENDIF
C
C         CALCULATE PARTIALS OF DOUBLE MANY-BODY EXPANSION PES
C
      IF (NDMBE.NE.0) CALL DMBE
C
C         MAKE PDOT=-DV/DQ
C
      DO 1000 I=1,I3N
         PDOT(I)=-PDOT(I)
 1000 CONTINUE

      RETURN
      END
C
C         CALCULATE HARMONIC STRETCH POTENTIAL ENERGY DERIVATIVES
C
      SUBROUTINE STRET(NL)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/COORS/R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      COMMON/STRETB/RSZ(100),FS(100),N1J(100),N1K(100)
      COMMON/FORCES/N,I3N,NS,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
C
C         CALCULATE INDICES FOR COORDINATES
C
      J3=3*N1J(NL)
      J2=J3-1
      J1=J2-1
      K3=3*N1K(NL)
      K2=K3-1
      K1=K2-1
C
C         CALCULATE INDEX FOR R
C
      JK=(N1J(NL)-1)*(2*N-N1J(NL))/2+N1K(NL)-N1J(NL)
C
C         CALCULATE RELATIVE COORDINATES AND R
C
      T1=Q(K1)-Q(J1)
      T2=Q(K2)-Q(J2)
      T3=Q(K3)-Q(J3)
      R(JK)=DSQRT(T1*T1+T2*T2+T3*T3)
C
C         CALCULATE (DV/DQ)'S
C
      DUM1=FS(NL)*(R(JK)-RSZ(NL))/R(JK)
      DUM2=T1*DUM1
      PDOT(K1)=PDOT(K1)+DUM2
      PDOT(J1)=PDOT(J1)-DUM2
      DUM2=T2*DUM1
      PDOT(K2)=PDOT(K2)+DUM2
      PDOT(J2)=PDOT(J2)-DUM2
      DUM2=T3*DUM1
      PDOT(K3)=PDOT(K3)+DUM2
      PDOT(J3)=PDOT(J3)-DUM2
      RETURN
      END
C
C         CALCULATE MORSE POTENTIAL ENERGY DERIVATIVES
C
      SUBROUTINE MORSE(NL)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/COORS/R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      COMMON/MORSEB/RMZ(100),B(100),D(100),N2J(100),N2K(100),
     *CM1(100),CM2(100),CM3(100),CM4(100)
      COMMON/FORCES/N,I3N,NS,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
C
C         CALCULATE INDICES FOR COORDINATES
C
      J3=3*N2J(NL)
      J2=J3-1
      J1=J2-1
      K3=3*N2K(NL)
      K2=K3-1
      K1=K2-1
C
C         CALCULATE  INDEX FOR R
C
      JK=(N2J(NL)-1)*(2*N-N2J(NL))/2+N2K(NL)-N2J(NL)
C
C         CALCULATE RELATIVE COORDINATES AND R
C
      T1=Q(K1)-Q(J1)
      T2=Q(K2)-Q(J2)
      T3=Q(K3)-Q(J3)
      R(JK)=DSQRT(T1*T1+T2*T2+T3*T3)
C
C         CALCULATE (DV/DQ)'S
C
      IF (B(NL).GT.0.0D0) THEN
         DUM1=DEXP(-B(NL)*(R(JK)-RMZ(NL)))
         DUM1=2.0D0*D(NL)*(1.0D0-DUM1)*B(NL)*DUM1/R(JK)
         DUM2=T1*DUM1
         PDOT(K1)=PDOT(K1)+DUM2
         PDOT(J1)=PDOT(J1)-DUM2
         DUM2=T2*DUM1
         PDOT(K2)=PDOT(K2)+DUM2
         PDOT(J2)=PDOT(J2)-DUM2
         DUM2=T3*DUM1
         PDOT(K3)=PDOT(K3)+DUM2
         PDOT(J3)=PDOT(J3)-DUM2
      ELSE
C
C         THE BETA PARAMETER IN THE MORSE FUNCTION IS REPRESENTED
C         AS A CUBIC POLYNOMIAL
C
         RLCM=R(JK)-RMZ(NL)
         BETAM=CM1(NL)+CM2(NL)*RLCM+CM3(NL)*RLCM**2+CM4(NL)*RLCM**3
         DBETAM=CM2(NL)+2.0D0*CM3(NL)*RLCM+3.0D0*CM4(NL)*RLCM**2
         DENOM=1.0D0/R(JK)
         DUM1=DEXP(-BETAM*RLCM)
         DUM2=DBETAM*(1.0D0-RMZ(NL)*DENOM)+BETAM*DENOM
         DUM3=2.0D0*D(NL)*(1.0D0-DUM1)*DUM1*DUM2
         DERV=DUM3*T1
         PDOT(K1)=PDOT(K1)+DERV
         PDOT(J1)=PDOT(J1)-DERV
         DERV=DUM3*T2
         PDOT(K2)=PDOT(K2)+DERV
         PDOT(J2)=PDOT(J2)-DERV
         DERV=DUM3*T3
         PDOT(K3)=PDOT(K3)+DERV
         PDOT(J3)=PDOT(J3)-DERV
      ENDIF
      RETURN
      END
C
C         CALCULATE HARMONIC BEND POTENTIAL ENERGY DERIVATIVES
C
      SUBROUTINE HBEND(NL)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/COORS/R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      COMMON/BENDB/THETAZ(200),FBZ(200),CJ(200),CK(200),RJZ(200),
     *RKZ(200),FB(200),N3J(200),N3K(200),N3M(200)
      COMMON/FORCES/N,I3N,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
C
C         CALCULATE INDICES FOR COORDINATES
C
      J3=3*N3J(NL)
      J2=J3-1
      J1=J2-1
      M3=3*N3M(NL)
      M2=M3-1
      M1=M2-1
      K3=3*N3K(NL)
      K2=K3-1
      K1=K2-1
C
C         CALCULATE INDICES FOR R'S
C
      IF (N3M(NL).LE.N3K(NL)) THEN
         KM=(N3M(NL)-1)*(2*N-N3M(NL))/2+N3K(NL)-N3M(NL)
      ELSE
         KM=(N3K(NL)-1)*(2*N-N3K(NL))/2+N3M(NL)-N3K(NL)
      ENDIF
      IF (N3M(NL).LE.N3J(NL)) THEN
         JM=(N3M(NL)-1)*(2*N-N3M(NL))/2+N3J(NL)-N3M(NL)
      ELSE
         JM=(N3J(NL)-1)*(2*N-N3J(NL))/2+N3M(NL)-N3J(NL)
      ENDIF
C
C         CALCULATE RELATIVE COORDINATES
C
      T1=Q(J1)-Q(M1)
      T2=Q(J2)-Q(M2)
      T3=Q(J3)-Q(M3)
      T4=Q(K1)-Q(M1)
      T5=Q(K2)-Q(M2)
      T6=Q(K3)-Q(M3)
C
C         CALCULATE ANGLE
C
      CTHETA=(T1*T4+T2*T5+T3*T6)/R(JM)/R(KM)
      IF (CTHETA.GT.1.00D0) CTHETA=1.00D0
      IF (CTHETA.LT.-1.00D0) CTHETA=-1.00D0
      THETA(NL)=DACOS(CTHETA)
C
C         CALCULATE SWITCHING FUNCTIONS AND FORCE CONSTANTS
C
      SRJ=0.0D0
      DUM1=R(JM)-RJZ(NL)
      DUM2=CJ(NL)*DUM1**2
      IF (DUM2.LE.85.0D0) THEN
         SRJ=1.0D0
         IF (CJ(NL).GT.0.0D0.AND.DUM1.GT.0.0D0) SRJ=DEXP(-DUM2)
      ENDIF
      SRK=0.0D0
      DUM1=R(KM)-RKZ(NL)
      DUM2=CK(NL)*DUM1**2
      IF (DUM2.LE.85.0D0) THEN
         SRK=1.0D0
         IF (CK(NL).GT.0.0D0.AND.DUM1.GT.0.0D0) SRK=DEXP(-DUM2)
      ENDIF
      FB(NL)=SRJ*SRK*FBZ(NL)
C
C         CALCULATE (DV/DQ)'S
C
      DUM3=FB(NL)*(THETA(NL)-THETAZ(NL))
      IF (DABS(THETA(NL)-PI).GT.0.1D0) THEN
         DUM1=-1.0D0/DSQRT(1.0D0-CTHETA**2)*DUM3
      ELSE
         DUM2=THETA(NL)-PI
         DUM1=FB(NL)/(1.D0-DUM2**2/6.D0+DUM2**4/120.D0-DUM2**6/5040.D0)
      ENDIF
      RJK=R(JM)*R(KM)
      RJ2=R(JM)**2
      RK2=R(KM)**2
      DUM2=CTHETA/RJ2
      PDOT(J1)=PDOT(J1)+DUM1*(T4/RJK-T1*DUM2)
      PDOT(J2)=PDOT(J2)+DUM1*(T5/RJK-T2*DUM2)
      PDOT(J3)=PDOT(J3)+DUM1*(T6/RJK-T3*DUM2)
      DUM2=CTHETA/RK2
      PDOT(K1)=PDOT(K1)+DUM1*(T1/RJK-T4*DUM2)
      PDOT(K2)=PDOT(K2)+DUM1*(T2/RJK-T5*DUM2)
      PDOT(K3)=PDOT(K3)+DUM1*(T3/RJK-T6*DUM2)
      PDOT(M1)=PDOT(M1)+DUM1*((-T1-T4)/RJK+CTHETA*(T1/RJ2+T4/RK2))
      PDOT(M2)=PDOT(M2)+DUM1*((-T2-T5)/RJK+CTHETA*(T2/RJ2+T5/RK2))
      PDOT(M3)=PDOT(M3)+DUM1*((-T3-T6)/RJK+CTHETA*(T3/RJ2+T6/RK2))
C
      DUM3=DUM3*(THETA(NL)-THETAZ(NL))
      DUM1=R(JM)-RJZ(NL)
      IF (CJ(NL).GE.0.0D0.AND.DUM1.GE.0.0D0) THEN
         DUM1=-DUM3*CJ(NL)*DUM1/R(JM)
         DUM2=T1*DUM1
         PDOT(J1)=PDOT(J1)+DUM2
         PDOT(M1)=PDOT(M1)-DUM2
         DUM2=T2*DUM1
         PDOT(J2)=PDOT(J2)+DUM2
         PDOT(M2)=PDOT(M2)-DUM2
         DUM2=T3*DUM1
         PDOT(J3)=PDOT(J3)+DUM2
         PDOT(M3)=PDOT(M3)-DUM2
      ENDIF
C
      DUM1=R(KM)-RKZ(NL)
      IF (CK(NL).GE.0.0D0.AND.DUM1.GE.0.0D0) THEN
         DUM1=-DUM3*CK(NL)*DUM1/R(KM)
         DUM2=T4*DUM1
         PDOT(K1)=PDOT(K1)+DUM2
         PDOT(M1)=PDOT(M1)-DUM2
         DUM2=T5*DUM1
         PDOT(K2)=PDOT(K2)+DUM2
         PDOT(M2)=PDOT(M2)-DUM2
         DUM2=T6*DUM1
         PDOT(K3)=PDOT(K3)+DUM2
         PDOT(M3)=PDOT(M3)-DUM2
      ENDIF
      RETURN
      END
C
C         CALCULATE HARMONIC ALPHA BEND POTENTIAL ENERGY DERIVATIVES
C
      SUBROUTINE HALPHA(NL)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/COORS/R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      COMMON/ALPHAB/FA(20),N4J(20),N4K(20),N4M(20),N4N(20)
      COMMON/FORCES/N,I3N,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
C
C         CALCULATE INDICES FOR COORDINATES
C
      J3=3*N4J(NL)
      J2=J3-1
      J1=J2-1
      K3=3*N4K(NL)
      K2=K3-1
      K1=K2-1
      M3=3*N4M(NL)
      M2=M3-1
      M1=M2-1
      N3=3*N4N(NL)
      N2=N3-1
      N1=N2-1
C
C         CALCULATE INDICES FOR R
C
      IF (N4K(NL).LE.N4J(NL)) THEN
         JK=(N4K(NL)-1)*(2*N-N4K(NL))/2+N4J(NL)-N4K(NL)
      ELSE
         JK=(N4J(NL)-1)*(2*N-N4J(NL))/2+N4K(NL)-N4J(NL)
      ENDIF
C
C         CALCULATE RELATIVE COORDINATES
C
      T1=Q(K1)-Q(J1)
      T2=Q(K2)-Q(J2)
      T3=Q(K3)-Q(J3)
      T4=Q(M1)-Q(J1)
      T5=Q(M2)-Q(J2)
      T6=Q(M3)-Q(J3)
      T7=Q(N1)-Q(J1)
      T8=Q(N2)-Q(J2)
      T9=Q(N3)-Q(J3)
C
C         CALCULATE ALPHA ANGLES
C
      XA=T5*T9-T6*T8
      YA=T6*T7-T4*T9
      ZA=T4*T8-T5*T7
      RA=DSQRT(XA*XA+YA*YA+ZA*ZA)
      CA=(XA*T1+YA*T2+ZA*T3)/RA/R(JK)
      ALPHA(NL)=DACOS(CA)+HALFPI
C
C         CALCULATE (DV/DQ)'S
C
      DUM4=-1.0D0/DSQRT(1.0D0-CA**2)*FA(NL)*(ALPHA(NL)-PI)
      RKA=R(JK)*RA
      DUM5=CA/R(JK)/R(JK)
      DUM6=CA/RA/RA
      DUM1=DUM4*(XA/RKA-DUM5*T1)
      DUM2=DUM4*(YA/RKA-DUM5*T2)
      DUM3=DUM4*(ZA/RKA-DUM5*T3)
      PDOT(K1)=PDOT(K1)+DUM1
      PDOT(K2)=PDOT(K2)+DUM2
      PDOT(K3)=PDOT(K3)+DUM3
      T96=T9-T6
      T85=T8-T5
      T74=T7-T4
      DUMX=DUM4*(T1/RKA-DUM6*XA)
      DUMY=DUM4*(T2/RKA-DUM6*YA)
      DUMZ=DUM4*(T3/RKA-DUM6*ZA)
      PDOT(J1)=PDOT(J1)-DUM1+T96*DUMY-T85*DUMZ
      PDOT(J2)=PDOT(J2)-DUM2+T74*DUMZ-T96*DUMX
      PDOT(J3)=PDOT(J3)-DUM3+T85*DUMX-T74*DUMY
      PDOT(M1)=PDOT(M1)+T8*DUMZ-T9*DUMY
      PDOT(M2)=PDOT(M2)+T9*DUMX-T7*DUMZ
      PDOT(M3)=PDOT(M3)+T7*DUMY-T8*DUMX
      PDOT(N1)=PDOT(N1)-T5*DUMZ+T6*DUMY
      PDOT(N2)=PDOT(N2)-T6*DUMX+T4*DUMZ
      PDOT(N3)=PDOT(N3)-T4*DUMY+T5*DUMX
      RETURN
      END
C
C         CALCULATE LENNARD-JONES POTENTIAL ENERGY DERIVATIVES
C
      SUBROUTINE LENJ(INL,LNL)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/COORS/R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      COMMON/LENJB/ALJ(200),BLJ(2000),CLJ(200),N5J(200),N5K(200),
     *NREP(200),MREP(200),LREP(200)
      COMMON/LENJC/JKA(200),RNA(200),RMB(200),RLC(200)
      COMMON/FORCES/N,I3N,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      LOGICAL FIRST,DIFFN,DIFFM,DIFFL
      DATA FIRST,DIFFN,DIFFM,DIFFL/.TRUE.,.FALSE.,.FALSE.,
     *          .FALSE./
      SAVE FIRST,DIFFN,DIFFM,DIFFL
C
      IF (FIRST) THEN
         DO 9997 NL=INL,LNL
            JKA(NL)=ISHFT((N5J(NL)-1)*(2*N-N5J(NL)),-1)+N5K(NL)-N5J(NL)
            RNA(NL)=-NREP(NL)*ALJ(NL)
            RMB(NL)=-MREP(NL)*BLJ(NL)
            RLC(NL)=-LREP(NL)*CLJ(NL)
 9997    CONTINUE
C
         NNEXP=NREP(INL)
         NTEXP=NNEXP+2
         DO 8000 NL=INL+1,LNL
            IF (NREP(NL).EQ.NNEXP) THEN
            ELSE
               DIFFN=.TRUE.
               GOTO 8005
            ENDIF
 8000    CONTINUE
 8005    CONTINUE
         MEXP=MREP(INL)
         MTEXP=MEXP+2
         DO 8010 NL=INL+1,LNL
            IF (MREP(NL).EQ.MEXP) THEN
            ELSE
               DIFFM=.TRUE.
               GOTO 8015
            ENDIF
 8010    CONTINUE
 8015    CONTINUE
         LEXP=LREP(INL)
         LTEXP=LEXP+2
         DO 8020 NL=INL+1,LNL
           IF (LREP(NL).EQ.LEXP) THEN
           ELSE
              DIFFL=.TRUE.
              GOTO 8025
           ENDIF
 8020    CONTINUE
 8025    CONTINUE
         FIRST=.FALSE.
      ENDIF
C
C         CODE FOR GENERAL LENNARD-JONES
C
      IF (DIFFN.OR.DIFFM.OR.DIFFL) THEN
         DO 9510 NL=INL,LNL
            J3=3*N5J(NL)
            J2=J3-1
            J1=J2-1
            K3=3*N5K(NL)
            K2=K3-1
            K1=K2-1
            JK=JKA(NL)
            T1=Q(K1)-Q(J1)
            T2=Q(K2)-Q(J2)
            T3=Q(K3)-Q(J3)
            R(JK)=DSQRT(T1*T1+T2*T2+T3*T3)
            RRJK=1.0/R(JK)
            DUM1=RNA(NL)*RRJK**(2+NREP(NL))
            DUM1=DUM1+RMB(NL)*RRJK**(MREP(NL)+2)
            DUM1=DUM1+RLC(NL)*RRJK**(LREP(NL)+2)
            TDUM1=DUM1*T1
            TDUM2=DUM1*T2
            TDUM3=DUM1*T3
            PDOT(K1)=PDOT(K1)+TDUM1
            PDOT(K2)=PDOT(K2)+TDUM2
            PDOT(K3)=PDOT(K3)+TDUM3
            PDOT(J1)=PDOT(J1)-TDUM1
            PDOT(J2)=PDOT(J2)-TDUM2
            PDOT(J3)=PDOT(J3)-TDUM3
 9510    CONTINUE
C
C         CODE FOR 12-6-1 LENNARD-JONES
C
      ELSE IF (NNEXP.EQ.12.AND.MEXP.EQ.6.AND.LEXP.EQ.1) THEN
         DO 9530 NL=INL,LNL
            J3=3*N5J(NL)
            J2=J3-1
            J1=J2-1
            K3=3*N5K(NL)
            K2=K3-1
            K1=K2-1
            JK=JKA(NL)
            T1=Q(K1)-Q(J1)
            T2=Q(K2)-Q(J2)
            T3=Q(K3)-Q(J3)
            R(JK)=DSQRT(T1*T1+T2*T2+T3*T3)
            RRJK=1.0/R(JK)
            DUM1=RNA(NL)*RRJK**8*RRJK**6 
            DUM1=DUM1+RMB(NL)*RRJK**8
            DUM1=DUM1+RLC(NL)*RRJK**3
            TDUM1=DUM1*T1
            TDUM2=DUM1*T2
            TDUM3=DUM1*T3
            PDOT(K1)=PDOT(K1)+TDUM1
            PDOT(K2)=PDOT(K2)+TDUM2
            PDOT(K3)=PDOT(K3)+TDUM3
            PDOT(J1)=PDOT(J1)-TDUM1
            PDOT(J2)=PDOT(J2)-TDUM2
            PDOT(J3)=PDOT(J3)-TDUM3
 9530    CONTINUE
C
C         CODE FOR 12-6-0 LENNARD-JONES
C
      ELSEIF (NNEXP.EQ.12.AND.MEXP.EQ.6.AND.LEXP.EQ.0) THEN
         DO 9550 NL=INL,LNL
            J3=3*N5J(NL)
            J2=J3-1
            J1=J2-1
            K3=3*N5K(NL)
            K2=K3-1
            K1=K2-1
            JK=JKA(NL)
            T1=Q(K1)-Q(J1)
            T2=Q(K2)-Q(J2)
            T3=Q(K3)-Q(J3)
            R(JK)=DSQRT(T1*T1+T2*T2+T3*T3)
            RRJK=1.0/R(JK)
            DUM1=RNA(NL)*RRJK**8*RRJK**6 
            DUM1=DUM1+RMB(NL)*RRJK**8
            TDUM1=DUM1*T1
            TDUM2=DUM1*T2
            TDUM3=DUM1*T3
            PDOT(K1)=PDOT(K1)+TDUM1
            PDOT(K2)=PDOT(K2)+TDUM2
            PDOT(K3)=PDOT(K3)+TDUM3
            PDOT(J1)=PDOT(J1)-TDUM1
            PDOT(J2)=PDOT(J2)-TDUM2
            PDOT(J3)=PDOT(J3)-TDUM3
 9550    CONTINUE
      ELSE
C
C         CODE FOR LENNARD-JONES WITH OTHER CONSTANT NREP, MREP AND LREP
C
         DO 9570 NL=INL,LNL
            J3=3*N5J(NL)
            J2=J3-1
            J1=J2-1
            K3=3*N5K(NL)
            K2=K3-1
            K1=K2-1
            JK=JKA(NL)
            T1=Q(K1)-Q(J1)
            T2=Q(K2)-Q(J2)
            T3=Q(K3)-Q(J3)
            R(JK)=DSQRT(T1*T1+T2*T2+T3*T3)
            RRJK=1.0/R(JK)
            DUM1=RNA(NL)*RRJK**NTEXP
            DUM1=DUM1+RMB(NL)*RRJK**MTEXP
            DUM1=DUM1+RLC(NL)*RRJK**LTEXP
            TDUM1=DUM1*T1
            TDUM2=DUM1*T2
            TDUM3=DUM1*T3
            PDOT(K1)=PDOT(K1)+TDUM1
            PDOT(K2)=PDOT(K2)+TDUM2
            PDOT(K3)=PDOT(K3)+TDUM3
            PDOT(J1)=PDOT(J1)-TDUM1
            PDOT(J2)=PDOT(J2)-TDUM2
            PDOT(J3)=PDOT(J3)-TDUM3
 9570    CONTINUE
      ENDIF
      RETURN
      END
C
C         CALCULATE N-FOLD TORSION POTENTIAL ENERGY DERIVATIVES
C         (N=2 OR 3)
C
      SUBROUTINE HTAU(NL)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/COORS/R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      COMMON/TAUB/VZTAU(20),N6I(20),N6J(20),N6K(20),N6L(20),N6M(20),N6N(
     *20)
C
C         CALCULATE INDICES FOR COORDINATES
C
      I3=3*N6I(NL)
      I2=I3-1
      I1=I2-1
      J3=3*N6J(NL)
      J2=J3-1
      J1=J2-1
      K3=3*N6K(NL)
      K2=K3-1
      K1=K2-1
      L3=3*N6L(NL)
      L2=L3-1
      L1=L2-1
      M3=3*N6M(NL)
      M2=M3-1
      M1=M2-1
      N3=3*N6N(NL)
      N2=N3-1
      N1=N2-1
C
C         CALCULATE RELATIVE COORDINATES
C
      XIL=Q(I1)-Q(L1)
      YIL=Q(I2)-Q(L2)
      ZIL=Q(I3)-Q(L3)
      XJK=Q(J1)-Q(K1)
      YJK=Q(J2)-Q(K2)
      ZJK=Q(J3)-Q(K3)
      XMN=Q(M1)-Q(N1)
      YMN=Q(M2)-Q(N2)
      ZMN=Q(M3)-Q(N3)
C
C         CALCULATE COSINE OF TAU ANGLE
C
      AX=YMN*ZIL-ZMN*YIL
      AY=ZMN*XIL-XMN*ZIL
      AZ=XMN*YIL-YMN*XIL
      BX=YJK*ZIL-ZJK*YIL
      BY=ZJK*XIL-XJK*ZIL
      BZ=XJK*YIL-YJK*XIL
      RA=DSQRT(AX*AX+AY*AY+AZ*AZ)
      RB=DSQRT(BX*BX+BY*BY+BZ*BZ)
      COSTAU=(AX*BX+AY*BY+AZ*BZ)/RA/RB
      IF (COSTAU.LT.-1.00D0) COSTAU=-1.00D0
      IF (COSTAU.GT. 1.00D0) COSTAU= 1.00D0
      CTAU(NL)=COSTAU
C
C         CALCULATE TORSION POTENTIALS
C         VZTAU .LT. ZERO INDICATES 3-FOLD TORSION
C
      DUM4=2.0D0*COSTAU
      IF (VZTAU(NL).LT.0.0D0) DUM4=6.0D0*COSTAU**2-1.5D0
      DUM4=-VZTAU(NL)*DUM4
C
C         CALCULATE(DV/DQ)'S
C
      DUM1=RA*RB
      DUM2=COSTAU/RA/RA
      DCTDAX=BX/DUM1-DUM2*AX
      DCTDAY=BY/DUM1-DUM2*AY
      DCTDAZ=BZ/DUM1-DUM2*AZ
      DUM2=COSTAU/RB/RB
      DCTDBX=AX/DUM1-DUM2*BX
      DCTDBY=AY/DUM1-DUM2*BY
      DCTDBZ=AZ/DUM1-DUM2*BZ
      DUM1=DUM4*(DCTDAY*ZMN-DCTDAZ*YMN+DCTDBY*ZJK-DCTDBZ*YJK)
      DUM2=DUM4*(DCTDAZ*XMN-DCTDAX*ZMN+DCTDBZ*XJK-DCTDBX*ZJK)
      DUM3=DUM4*(DCTDAX*YMN-DCTDAY*XMN+DCTDBX*YJK-DCTDBY*XJK)
      PDOT(I1)=PDOT(I1)+DUM1
      PDOT(I2)=PDOT(I2)+DUM2
      PDOT(I3)=PDOT(I3)+DUM3
      PDOT(L1)=PDOT(L1)-DUM1
      PDOT(L2)=PDOT(L2)-DUM2
      PDOT(L3)=PDOT(L3)-DUM3
      DUM1=DUM4*(DCTDBZ*YIL-DCTDBY*ZIL)
      DUM2=DUM4*(DCTDBX*ZIL-DCTDBZ*XIL)
      DUM3=DUM4*(DCTDBY*XIL-DCTDBX*YIL)
      PDOT(J1)=PDOT(J1)+DUM1
      PDOT(J2)=PDOT(J2)+DUM2
      PDOT(J3)=PDOT(J3)+DUM3
      PDOT(K1)=PDOT(K1)-DUM1
      PDOT(K2)=PDOT(K2)-DUM2
      PDOT(K3)=PDOT(K3)-DUM3
      DUM1=DUM4*(DCTDAZ*YIL-DCTDAY*ZIL)
      DUM2=DUM4*(DCTDAX*ZIL-DCTDAZ*XIL)
      DUM3=DUM4*(DCTDAY*XIL-DCTDAX*YIL)
      PDOT(M1)=PDOT(M1)+DUM1
      PDOT(M2)=PDOT(M2)+DUM2
      PDOT(M3)=PDOT(M3)+DUM3
      PDOT(N1)=PDOT(N1)-DUM1
      PDOT(N2)=PDOT(N2)-DUM2
      PDOT(N3)=PDOT(N3)-DUM3
      RETURN
      END
C
C         CALCULATE GENERAL EXPONENTIAL REPULSION OR ATTRACTION
C         POTENTIAL ENERGY DERIVATIVES
C
      SUBROUTINE HEXP(NL)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/COORS/R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      COMMON/EXPB/AEX(100),BEX(100),CEX(100),N7J(100),N7K(100),NPOW(100)
      COMMON/FORCES/N,I3N,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
C
C         CALCULATE INDICES FOR COORDINATES
C
      J3=3*N7J(NL)
      J2=J3-1
      J1=J2-1
      K3=3*N7K(NL)
      K2=K3-1
      K1=K2-1
C
C         CALCULATE INDEX FOR R
C
      JK=(N7J(NL)-1)*(2*N-N7J(NL))/2+N7K(NL)-N7J(NL)
C
C         CALCULATE RELATIVE COORDINATES AND R
C
      T1=Q(K1)-Q(J1)
      T2=Q(K2)-Q(J2)
      T3=Q(K3)-Q(J3)
      R(JK)=DSQRT(T1*T1+T2*T2+T3*T3)
C
C         CALCULATE (DV/DQ)'S.  IF NPOW(NL)=0 PROGRAM BYPASSES
C         ELECTROSTATIC POTENTIAL.  IF AEX(NL).LT.0 PROGRAM
C         BYPASSES REPLUSION
C
      DUM1=0.D0
      IF (AEX(NL).LT.0) GOTO 1
      DUM1=-AEX(NL)*BEX(NL)*DEXP(-BEX(NL)*R(JK))/R(JK)
      IF (NPOW(NL).EQ.0) GOTO 2
    1 DUM1=DUM1-CEX(NL)*NPOW(NL)/R(JK)**(NPOW(NL)+2)
    2 DUM2=T1*DUM1
      PDOT(K1)=PDOT(K1)+DUM2
      PDOT(J1)=PDOT(J1)-DUM2
      DUM2=T2*DUM1
      PDOT(K2)=PDOT(K2)+DUM2
      PDOT(J2)=PDOT(J2)-DUM2
      DUM2=T3*DUM1
      PDOT(K3)=PDOT(K3)+DUM2
      PDOT(J3)=PDOT(J3)-DUM2
      RETURN
      END
C
C         CALCULATE GHOST PAIR INTERACTION POTENTIAL ENERGY DERIVATIVES
C
      SUBROUTINE GHOST(NG)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/COORS/R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      COMMON/GHOSTB/GC1(20),GEX1(20),GEX2(20),N8I(20),N8J(20),N8K(20),
     *N8L(20),N8M(20),N8N(20)
      COMMON/FORCES/N,I3N,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
C
C         IJK ARE THE ATOMS OF THE FIRST WATER MOLECULE
C         I AND J REPRESENT HYDROGENS AND K IS OXYGEN
C         LMN REPRESENTS ATOMS FOR THE SECOND WATER MOLECULE
C         M IS OXYGEN AND L AND N ARE HYDROGENS
C
      I3=3*N8I(NG)
      I2=I3-1
      I1=I2-1
      J3=3*N8J(NG)
      J2=J3-1
      J1=J2-1
      K3=3*N8K(NG)
      K2=K3-1
      K1=K2-1
      L3=3*N8L(NG)
      L2=L3-1
      L1=L2-1
      M3=3*N8M(NG)
      M2=M3-1
      M1=M2-1
      N3=3*N8N(NG)
      N2=N3-1
      N1=N2-1
C
C         CALCULATE INDICES FOR COORDINATES FOR NORMAL ATOMS
C
      IF (N8K(NG).LE.N8J(NG)) THEN
         JK=(N8K(NG)-1)*(2*N-N8K(NG))/2+N8J(NG)-N8K(NG)
      ELSE
         JK=(N8J(NG)-1)*(2*N-N8J(NG))/2+N8K(NG)-N8J(NG)
      ENDIF
      IF (N8K(NG).LE.N8I(NG)) THEN
         IK=(N8K(NG)-1)*(2*N-N8K(NG))/2+N8I(NG)-N8K(NG)
      ELSE
         IK=(N8I(NG)-1)*(2*N-N8I(NG))/2+N8K(NG)-N8I(NG)
      ENDIF
C
C         CALCULATE RELATIVE COORDINATES
C
      T1=Q(I1)-Q(K1)
      T2=Q(I2)-Q(K2)
      T3=Q(I3)-Q(K3)
      T4=Q(J1)-Q(K1)
      T5=Q(J2)-Q(K2)
      T6=Q(J3)-Q(K3)
      TR1=T1/R(IK)+T4/R(JK)
      TR2=T2/R(IK)+T5/R(JK)
      TR3=T3/R(IK)+T6/R(JK)
C
C         CALCULATE VECTOR ALONG BISECTOR OF IJK
C
      R1=DSQRT(TR1*TR1+TR2*TR2+TR3*TR3)
C
C         CONSIDER WATER WITH ATOMS LMN
C         CALCULATE INDICES FOR COORDINATES FOR NORMAL ATOMS
C
      IF (N8M(NG).LE.N8L(NG)) THEN
         LM=(N8M(NG)-1)*(2*N-N8M(NG))/2+N8L(NG)-N8M(NG)
      ELSE
         LM=(N8L(NG)-1)*(2*N-N8L(NG))/2+N8M(NG)-N8L(NG)
      ENDIF
      IF (N8M(NG).LE.N8N(NG)) THEN
         NM=(N8M(NG)-1)*(2*N-N8M(NG))/2+N8N(NG)-N8M(NG)
      ELSE
         NM=(N8N(NG)-1)*(2*N-N8N(NG))/2+N8M(NG)-N8N(NG)
      ENDIF
C
C         CALCULATE RELATIVE COORDINATES BETWEEN LMN
C
      T7=Q(L1)-Q(M1)
      T8=Q(L2)-Q(M2)
      T9=Q(L3)-Q(M3)
      T10=Q(N1)-Q(M1)
      T11=Q(N2)-Q(M2)
      T12=Q(N3)-Q(M3)
      TR4=T7/R(LM)+T10/R(NM)
      TR5=T8/R(LM)+T11/R(NM)
      TR6=T9/R(LM)+T12/R(NM)
C
C         CALCULATE VECTOR BISECTING LMN ATOMS
C
      R2=DSQRT(TR4*TR4+TR5*TR5+TR6*TR6)
C
C         CALCULATE THE COORDINATES OF THE GHOST ATOM FOR IJK ATOMS
C
      X1=Q(K1)+GC1(NG)*TR1/R1
      Y1=Q(K2)+GC1(NG)*TR2/R1
      Z1=Q(K3)+GC1(NG)*TR3/R1
C
C         CALCULATE THE COORDINATES OF THE GHOST ATOM FOR LMN ATOMS
C
      X2=Q(M1)+GC1(NG)*TR4/R2
      Y2=Q(M2)+GC1(NG)*TR5/R2
      Z2=Q(M3)+GC1(NG)*TR6/R2
C
C         X1,Y1,Z1 ARE THE COORDINATES OF THE GHOST ATOM
C         LABELLED IG AND X2,Y2,Z2 ARE THE COORDINATES
C         OF THE GHOST ATOM LABELLED JG
C         GR(1): IS THE DISTANCE BETWEEN IG AND JG
C         GR(2): IS THE DISTANCE BETWEEN ATOM I AND JG
C         GR(3): IS THE DISTANCE BETWEEN ATOM J AND JG
C         GR(4): IS THE DISTANCE BETWEEN ATOM L AND IG
C         GR(5): ISS THE DISTANCE BETWEEN ATOM N AND IG
C         IG: LABEL OF THE GHOST ATOM CONNECTED WITH IJK MOLECULE
C         JG: LABEL OF THE GHOST ATOM CONNECTED WITH LMN MOLECULE
C
C         CALCULATE THE DISTANCES REQUIRED BETWEEN THE GHOST ATOMS
C         AND THE NORMAL ATOMS AND BETWEEN GHOST ATOMS
C
      GR1X=X1-X2
      GR1Y=Y1-Y2
      GR1Z=Z1-Z2
      GR(NG,1)=DSQRT(GR1X*GR1X+GR1Y*GR1Y+GR1Z*GR1Z)
      GR2X=Q(I1)-X2
      GR2Y=Q(I2)-Y2
      GR2Z=Q(I3)-Z2
      GR(NG,2)=DSQRT(GR2X*GR2X+GR2Y*GR2Y+GR2Z*GR2Z)
      GR3X=Q(J1)-X2
      GR3Y=Q(J2)-Y2
      GR3Z=Q(J3)-Z2
      GR(NG,3)=DSQRT(GR3X*GR3X+GR3Y*GR3Y+GR3Z*GR3Z)
      GR4X=Q(L1)-X1
      GR4Y=Q(L2)-Y1
      GR4Z=Q(L3)-Z1
      GR(NG,4)=DSQRT(GR4X*GR4X+GR4Y*GR4Y+GR4Z*GR4Z)
      GR5X=Q(N1)-X1
      GR5Y=Q(N2)-Y1
      GR5Z=Q(N3)-Z1
      GR(NG,5)=DSQRT(GR5X*GR5X+GR5Y*GR5Y+GR5Z*GR5Z)
      CON1=GC1(NG)/R1
      CON2=CON1/R1
      CON3=GC1(NG)/R2
      CON4=CON3/R2
      SR1Q1=-T1/R(IK)
      SR1Q2=-T2/R(IK)
      SR1Q3=-T3/R(IK)
      SR1Q4=-SR1Q1
      SR1Q5=-SR1Q2
      SR1Q6=-SR1Q3
      SR2Q1=-T4/R(JK)
      SR2Q2=-T5/R(JK)
      SR2Q3=-T6/R(JK)
      SR2Q7=-SR2Q1
      SR2Q8=-SR2Q2
      SR2Q9=-SR2Q3
      SR3Q13=-T7/R(LM)
      SR3Q14=-T8/R(LM)
      SR3Q15=-T9/R(LM)
      SR3Q16=-SR3Q13
      SR3Q17=-SR3Q14
      SR3Q18=-SR3Q15
      SR4Q13=-T10/R(NM)
      SR4Q14=-T11/R(NM)
      SR4Q15=-T12/R(NM)
      SR4Q19=-SR4Q13
      SR4Q20=-SR4Q14
      SR4Q21=-SR4Q15
      CON5=-1.D0/R(IK)-1.D0/R(JK)
      CON6=-1.D0/R(LM)-1.D0/R(NM)
      R1Q011=CON5-SR1Q4*SR1Q1/R(IK)-SR2Q7*SR2Q1/R(JK)
      R1Q012=-SR1Q5*SR1Q1/R(IK)-SR2Q8*SR2Q1/R(JK)
      R1Q013=-SR1Q6*SR1Q1/R(IK)-SR2Q9*SR2Q1/R(JK)
      R1Q01=(R1Q011*TR1+R1Q012*TR2+R1Q013*TR3)/R1
      R1Q021=-SR1Q4*SR1Q2/R(IK)-SR2Q7*SR2Q2/R(JK)
      R1Q022=CON5-SR1Q5*SR1Q2/R(IK)-SR2Q8*SR2Q2/R(JK)
      R1Q023=-SR1Q6*SR1Q2/R(IK)-SR2Q9*SR2Q2/R(JK)
      R1Q02=(R1Q021*TR1+R1Q022*TR2+R1Q023*TR3)/R1
      R1Q031=-SR1Q4*SR1Q3/R(IK)-SR2Q7*SR2Q3/R(JK)
      R1Q032=-SR1Q5*SR1Q3/R(IK)-SR2Q8*SR2Q3/R(JK)
      R1Q033=CON5-SR1Q6*SR1Q3/R(IK)-SR2Q9*SR2Q3/R(JK)
      R1Q03=(R1Q031*TR1+R1Q032*TR2+R1Q033*TR3)/R1
      R1Q041=1.D0/R(IK)-SR1Q4*SR1Q4/R(IK)
      R1Q042=-SR1Q5*SR1Q4/R(IK)
      R1Q043=-SR1Q6*SR1Q4/R(IK)
      R1Q04=(R1Q041*TR1+R1Q042*TR2+R1Q043*TR3)/R1
      R1Q051=-SR1Q4*SR1Q5/R(IK)
      R1Q052=1.D0/R(IK)-SR1Q5*SR1Q5/R(IK)
      R1Q053=-SR1Q6*SR1Q5/R(IK)
      R1Q05=(R1Q051*TR1+R1Q052*TR2+R1Q053*TR3)/R1
      R1Q061=-SR1Q4*SR1Q6/R(IK)
      R1Q062=-SR1Q5*SR1Q6/R(IK)
      R1Q063=1.D0/R(IK)-SR1Q6*SR1Q6/R(IK)
      R1Q06=(R1Q061*TR1+R1Q062*TR2+R1Q063*TR3)/R1
      R1Q071=1.D0/R(JK)-SR2Q7*SR2Q7/R(JK)
      R1Q072=-SR2Q8*SR2Q7/R(JK)
      R1Q073=-SR2Q9*SR2Q7/R(JK)
      R1Q07=(R1Q071*TR1+R1Q072*TR2+R1Q073*TR3)/R1
      R1Q081=-SR2Q7*SR2Q8/R(JK)
      R1Q082=1.D0/R(JK)-SR2Q8*SR2Q8/R(JK)
      R1Q083=-SR2Q9*SR2Q8/R(JK)
      R1Q08=(R1Q081*TR1+R1Q082*TR2+R1Q083*TR3)/R1
      R1Q091=-SR2Q7*SR2Q9/R(JK)
      R1Q092=-SR2Q8*SR2Q9/R(JK)
      R1Q093=1.D0/R(JK)-SR2Q9*SR2Q9/R(JK)
      R1Q09=(R1Q091*TR1+R1Q092*TR2+R1Q093*TR3)/R1
      R2Q131=CON6-SR3Q16*SR3Q13/R(LM)-SR4Q19*SR4Q13/R(NM)
      R2Q132=-SR3Q17*SR3Q13/R(LM)-SR4Q20*SR4Q13/R(NM)
      R2Q133=-SR3Q18*SR3Q13/R(LM)-SR4Q21*SR4Q13/R(NM)
      R2Q13=(R2Q131*TR4+R2Q132*TR5+R2Q133*TR6)/R2
      R2Q141=-SR3Q16*SR3Q14/R(LM)-SR4Q19*SR4Q14/R(NM)
      R2Q142=CON6-SR3Q17*SR3Q14/R(LM)-SR4Q20*SR4Q14/R(NM)
      R2Q143=-SR3Q18*SR3Q14/R(LM)-SR4Q21*SR4Q14/R(NM)
      R2Q14=(R2Q141*TR4+R2Q142*TR5+R2Q143*TR6)/R2
      R2Q151=-SR3Q16*SR3Q15/R(LM)-SR4Q19*SR4Q15/R(NM)
      R2Q152=-SR3Q17*SR3Q15/R(LM)-SR4Q20*SR4Q15/R(NM)
      R2Q153=CON6-SR3Q18*SR3Q15/R(LM)-SR4Q21*SR4Q15/R(NM)
      R2Q15=(R2Q151*TR4+R2Q152*TR5+R2Q153*TR6)/R2
      R2Q161=1.D0/R(LM)-SR3Q16*SR3Q16/R(LM)
      R2Q162=-SR3Q17*SR3Q16/R(LM)
      R2Q163=-SR3Q18*SR3Q16/R(LM)
      R2Q16=(R2Q161*TR4+R2Q162*TR5+R2Q163*TR6)/R2
      R2Q171=-SR3Q16*SR3Q17/R(LM)
      R2Q172=1.D0/R(LM)-SR3Q17*SR3Q17/R(LM)
      R2Q173=-SR3Q18*SR3Q17/R(LM)
      R2Q17=(R2Q171*TR4+R2Q172*TR5+R2Q173*TR6)/R2
      R2Q181=-SR3Q16*SR3Q18/R(LM)
      R2Q182=-SR3Q17*SR3Q18/R(LM)
      R2Q183=1.D0/R(LM)-SR3Q18*SR3Q18/R(LM)
      R2Q18=(R2Q181*TR4+R2Q182*TR5+R2Q183*TR6)/R2
      R2Q191=1.D0/R(NM)-SR4Q19*SR4Q19/R(NM)
      R2Q192=-SR4Q20*SR4Q19/R(NM)
      R2Q193=-SR4Q21*SR4Q19/R(NM)
      R2Q19=(R2Q191*TR4+R2Q192*TR5+R2Q193*TR6)/R2
      R2Q201=-SR4Q19*SR4Q20/R(NM)
      R2Q202=1.D0/R(NM)-SR4Q20*SR4Q20/R(NM)
      R2Q203=-SR4Q21*SR4Q20/R(NM)
      R2Q20=(R2Q201*TR4+R2Q202*TR5+R2Q203*TR6)/R2
      R2Q211=-SR4Q19*SR4Q21/R(NM)
      R2Q212=-SR4Q20*SR4Q21/R(NM)
      R2Q213=-SR4Q21*SR4Q21/R(NM)+1.D0/R(NM)
      R2Q21=(R2Q211*TR4+R2Q212*TR5+R2Q213*TR6)/R2
      X8Q01=1.D0-CON2*R1Q01*TR1+R1Q011*CON1
      X8Q02=-CON2*R1Q02*TR1+CON1*R1Q021
      X8Q03=-CON2*R1Q03*TR1+CON1*R1Q031
      X8Q04=-CON2*R1Q04*TR1+CON1*R1Q041
      X8Q05=-CON2*R1Q05*TR1+CON1*R1Q051
      X8Q06=-CON2*R1Q06*TR1+CON1*R1Q061
      X8Q07=-CON2*R1Q07*TR1+CON1*R1Q071
      X8Q08=-CON2*R1Q08*TR1+CON1*R1Q081
      X8Q09=-CON2*R1Q09*TR1+CON1*R1Q091
      Y8Q01=-CON2*R1Q01*TR2+CON1*R1Q012
      Y8Q02=-CON2*R1Q02*TR2+CON1*R1Q022+1.D0
      Y8Q03=-CON2*R1Q03*TR2+CON1*R1Q032
      Y8Q04=-CON2*R1Q04*TR2+CON1*R1Q042
      Y8Q05=-CON2*R1Q05*TR2+CON1*R1Q052
      Y8Q06=-CON2*R1Q06*TR2+CON1*R1Q062
      Y8Q07=-CON2*R1Q07*TR2+CON1*R1Q072
      Y8Q08=-CON2*R1Q08*TR2+CON1*R1Q082
      Y8Q09=-CON2*R1Q09*TR2+CON1*R1Q092
      Z8Q01=-CON2*R1Q01*TR3+CON1*R1Q013
      Z8Q02=-CON2*R1Q02*TR3+CON1*R1Q023
      Z8Q03=-CON2*R1Q03*TR3+CON1*R1Q033+1.D0
      Z8Q04=-CON2*R1Q04*TR3+CON1*R1Q043
      Z8Q05=-CON2*R1Q05*TR3+CON1*R1Q053
      Z8Q06=-CON2*R1Q06*TR3+CON1*R1Q063
      Z8Q07=-CON2*R1Q07*TR3+CON1*R1Q073
      Z8Q08=-CON2*R1Q08*TR3+CON1*R1Q083
      Z8Q09=-CON2*R1Q09*TR3+CON1*R1Q093
      X9Q13=1.D0-CON4*R2Q13*TR4+CON3*R2Q131
      X9Q14=-CON4*R2Q14*TR4+CON3*R2Q141
      X9Q15=-CON4*R2Q15*TR4+CON3*R2Q151
      X9Q16=-CON4*R2Q16*TR4+CON3*R2Q161
      X9Q17=-CON4*R2Q17*TR4+CON3*R2Q171
      X9Q18=-CON4*R2Q18*TR4+CON3*R2Q181
      X9Q19=-CON4*R2Q19*TR4+CON3*R2Q191
      X9Q20=-CON4*R2Q20*TR4+CON3*R2Q201
      X9Q21=-CON4*R2Q21*TR4+CON3*R2Q211
      Y9Q13=-CON4*R2Q13*TR5+CON3*R2Q132
      Y9Q14=-CON4*R2Q14*TR5+CON3*R2Q142+1.D0
      Y9Q15=-CON4*R2Q15*TR5+CON3*R2Q152
      Y9Q16=-CON4*R2Q16*TR5+CON3*R2Q162
      Y9Q17=-CON4*R2Q17*TR5+CON3*R2Q172
      Y9Q18=-CON4*R2Q18*TR5+CON3*R2Q182
      Y9Q19=-CON4*R2Q19*TR5+CON3*R2Q192
      Y9Q20=-CON4*R2Q20*TR5+CON3*R2Q202
      Y9Q21=-CON4*R2Q21*TR5+CON3*R2Q212
      Z9Q13=-CON4*R2Q13*TR6+CON3*R2Q133
      Z9Q14=-CON4*R2Q14*TR6+CON3*R2Q143
      Z9Q15=-CON4*R2Q15*TR6+CON3*R2Q153+1.D0
      Z9Q16=-CON4*R2Q16*TR6+CON3*R2Q163
      Z9Q17=-CON4*R2Q17*TR6+CON3*R2Q173
      Z9Q18=-CON4*R2Q18*TR6+CON3*R2Q183
      Z9Q19=-CON4*R2Q19*TR6+CON3*R2Q193
      Z9Q20=-CON4*R2Q20*TR6+CON3*R2Q203
      Z9Q21=-CON4*R2Q21*TR6+CON3*R2Q213
      R89Q01=(GR1X*X8Q01+GR1Y*Y8Q01+GR1Z*Z8Q01)/GR(NG,1)
      R89Q02=(GR1X*X8Q02+GR1Y*Y8Q02+GR1Z*Z8Q02)/GR(NG,1)
      R89Q03=(GR1X*X8Q03+GR1Y*Y8Q03+GR1Z*Z8Q03)/GR(NG,1)
      R89Q04=(GR1X*X8Q04+GR1Y*Y8Q04+GR1Z*Z8Q04)/GR(NG,1)
      R89Q05=(GR1X*X8Q05+GR1Y*Y8Q05+GR1Z*Z8Q05)/GR(NG,1)
      R89Q06=(GR1X*X8Q06+GR1Y*Y8Q06+GR1Z*Z8Q06)/GR(NG,1)
      R89Q07=(GR1X*X8Q07+GR1Y*Y8Q07+GR1Z*Z8Q07)/GR(NG,1)
      R89Q08=(GR1X*X8Q08+GR1Y*Y8Q08+GR1Z*Z8Q08)/GR(NG,1)
      R89Q09=(GR1X*X8Q09+GR1Y*Y8Q09+GR1Z*Z8Q09)/GR(NG,1)
      R89Q13=(-GR1X*X9Q13-GR1Y*Y9Q13-GR1Z*Z9Q13)/GR(NG,1)
      R89Q14=(-GR1X*X9Q14-GR1Y*Y9Q14-GR1Z*Z9Q14)/GR(NG,1)
      R89Q15=(-GR1X*X9Q15-GR1Y*Y9Q15-GR1Z*Z9Q15)/GR(NG,1)
      R89Q16=(-GR1X*X9Q16-GR1Y*Y9Q16-GR1Z*Z9Q16)/GR(NG,1)
      R89Q17=(-GR1X*X9Q17-GR1Y*Y9Q17-GR1Z*Z9Q17)/GR(NG,1)
      R89Q18=(-GR1X*X9Q18-GR1Y*Y9Q18-GR1Z*Z9Q18)/GR(NG,1)
      R89Q19=(-GR1X*X9Q19-GR1Y*Y9Q19-GR1Z*Z9Q19)/GR(NG,1)
      R89Q20=(-GR1X*X9Q20-GR1Y*Y9Q20-GR1Z*Z9Q20)/GR(NG,1)
      R89Q21=(-GR1X*X9Q21-GR1Y*Y9Q21-GR1Z*Z9Q21)/GR(NG,1)
      R29Q04=GR2X/GR(NG,2)
      R29Q05=GR2Y/GR(NG,2)
      R29Q06=GR2Z/GR(NG,2)
      R29Q13=(-GR2X*X9Q13-GR2Y*Y9Q13-GR2Z*Z9Q13)/GR(NG,2)
      R29Q14=(-GR2X*X9Q14-GR2Y*Y9Q14-GR2Z*Z9Q14)/GR(NG,2)
      R29Q15=(-GR2X*X9Q15-GR2Y*Y9Q15-GR2Z*Z9Q15)/GR(NG,2)
      R29Q16=(-GR2X*X9Q16-GR2Y*Y9Q16-GR2Z*Z9Q16)/GR(NG,2)
      R29Q17=(-GR2X*X9Q17-GR2Y*Y9Q17-GR2Z*Z9Q17)/GR(NG,2)
      R29Q18=(-GR2X*X9Q18-GR2Y*Y9Q18-GR2Z*Z9Q18)/GR(NG,2)
      R29Q19=(-GR2X*X9Q19-GR2Y*Y9Q19-GR2Z*Z9Q19)/GR(NG,2)
      R29Q20=(-GR2X*X9Q20-GR2Y*Y9Q20-GR2Z*Z9Q20)/GR(NG,2)
      R29Q21=(-GR2X*X9Q21-GR2Y*Y9Q21-GR2Z*Z9Q21)/GR(NG,2)
      R39Q07=GR3X/GR(NG,3)
      R39Q08=GR3Y/GR(NG,3)
      R39Q09=GR3Z/GR(NG,3)
      R39Q13=(-GR3X*X9Q13-GR3Y*Y9Q13-GR3Z*Z9Q13)/GR(NG,3)
      R39Q14=(-GR3X*X9Q14-GR3Y*Y9Q14-GR3Z*Z9Q14)/GR(NG,3)
      R39Q15=(-GR3X*X9Q15-GR3Y*Y9Q15-GR3Z*Z9Q15)/GR(NG,3)
      R39Q16=(-GR3X*X9Q16-GR3Y*Y9Q16-GR3Z*Z9Q16)/GR(NG,3)
      R39Q17=(-GR3X*X9Q17-GR3Y*Y9Q17-GR3Z*Z9Q17)/GR(NG,3)
      R39Q18=(-GR3X*X9Q18-GR3Y*Y9Q18-GR3Z*Z9Q18)/GR(NG,3)
      R39Q19=(-GR3X*X9Q19-GR3Y*Y9Q19-GR3Z*Z9Q19)/GR(NG,3)
      R39Q20=(-GR3X*X9Q20-GR3Y*Y9Q20-GR3Z*Z9Q20)/GR(NG,3)
      R39Q21=(-GR3X*X9Q21-GR3Y*Y9Q21-GR3Z*Z9Q21)/GR(NG,3)
      R68Q01=(-GR4X*X8Q01-GR4Y*Y8Q01-GR4Z*Z8Q01)/GR(NG,4)
      R68Q02=(-GR4X*X8Q02-GR4Y*Y8Q02-GR4Z*Z8Q02)/GR(NG,4)
      R68Q03=(-GR4X*X8Q03-GR4Y*Y8Q03-GR4Z*Z8Q03)/GR(NG,4)
      R68Q04=(-GR4X*X8Q04-GR4Y*Y8Q04-GR4Z*Z8Q04)/GR(NG,4)
      R68Q05=(-GR4X*X8Q05-GR4Y*Y8Q05-GR4Z*Z8Q05)/GR(NG,4)
      R68Q06=(-GR4X*X8Q06-GR4Y*Y8Q06-GR4Z*Z8Q06)/GR(NG,4)
      R68Q07=(-GR4X*X8Q07-GR4Y*Y8Q07-GR4Z*Z8Q07)/GR(NG,4)
      R68Q08=(-GR4X*X8Q08-GR4Y*Y8Q08-GR4Z*Z8Q08)/GR(NG,4)
      R68Q09=(-GR4X*X8Q09-GR4Y*Y8Q09-GR4Z*Z8Q09)/GR(NG,4)
      R68Q16=GR4X/GR(NG,4)
      R68Q17=GR4Y/GR(NG,4)
      R68Q18=GR4Z/GR(NG,4)
      R78Q01=(-GR5X*X8Q01-GR5Y*Y8Q01-GR5Z*Z8Q01)/GR(NG,5)
      R78Q02=(-GR5X*X8Q02-GR5Y*Y8Q02-GR5Z*Z8Q02)/GR(NG,5)
      R78Q03=(-GR5X*X8Q03-GR5Y*Y8Q03-GR5Z*Z8Q03)/GR(NG,5)
      R78Q04=(-GR5X*X8Q04-GR5Y*Y8Q04-GR5Z*Z8Q04)/GR(NG,5)
      R78Q05=(-GR5X*X8Q05-GR5Y*Y8Q05-GR5Z*Z8Q05)/GR(NG,5)
      R78Q06=(-GR5X*X8Q06-GR5Y*Y8Q06-GR5Z*Z8Q06)/GR(NG,5)
      R78Q07=(-GR5X*X8Q07-GR5Y*Y8Q07-GR5Z*Z8Q07)/GR(NG,5)
      R78Q08=(-GR5X*X8Q08-GR5Y*Y8Q08-GR5Z*Z8Q08)/GR(NG,5)
      R78Q09=(-GR5X*X8Q09-GR5Y*Y8Q09-GR5Z*Z8Q09)/GR(NG,5)
      R78Q19=GR5X/GR(NG,5)
      R78Q20=GR5Y/GR(NG,5)
      R78Q21=GR5Z/GR(NG,5)
      DUM1=-GEX1(NG)/GR(NG,1)/GR(NG,1)
      DUM2=-GEX2(NG)/GR(NG,2)/GR(NG,2)
      DUM3=-GEX2(NG)/GR(NG,3)/GR(NG,3)
      DUM4=-GEX2(NG)/GR(NG,4)/GR(NG,4)
      DUM5=-GEX2(NG)/GR(NG,5)/GR(NG,5)
      PDOT(K1)=PDOT(K1)+DUM1*R89Q01+DUM4*R68Q01+DUM5*R78Q01
      PDOT(K2)=PDOT(K2)+DUM1*R89Q02+DUM4*R68Q02+DUM5*R78Q02
      PDOT(K3)=PDOT(K3)+DUM1*R89Q03+DUM4*R68Q03+DUM5*R78Q03
      PDOT(I1)=PDOT(I1)+DUM1*R89Q04+DUM4*R68Q04+DUM5*R78Q04
     *+DUM2*R29Q04
      PDOT(I2)=PDOT(I2)+DUM1*R89Q05+DUM4*R68Q05+DUM5*R78Q05
     *+DUM2*R29Q05
      PDOT(I3)=PDOT(I3)+DUM1*R89Q06+DUM4*R68Q06+DUM5*R78Q06
     *+DUM2*R29Q06
      PDOT(J1)=PDOT(J1)+DUM1*R89Q07+DUM4*R68Q07+DUM5*R78Q07
     *+DUM3*R39Q07
      PDOT(J2)=PDOT(J2)+DUM1*R89Q08+DUM4*R68Q08+DUM5*R78Q08
     *+DUM3*R39Q08
      PDOT(J3)=PDOT(J3)+DUM1*R89Q09+DUM4*R68Q09+DUM5*R78Q09
     *+DUM3*R39Q09
      PDOT(M1)=PDOT(M1)+DUM1*R89Q13+DUM2*R29Q13+DUM3*R39Q13
      PDOT(M2)=PDOT(M2)+DUM1*R89Q14+DUM2*R29Q14+DUM3*R39Q14
      PDOT(M3)=PDOT(M3)+DUM1*R89Q15+DUM2*R29Q15+DUM3*R39Q15
      PDOT(L1)=PDOT(L1)+DUM1*R89Q16+DUM2*R29Q16+DUM3*R39Q16
     *+DUM4*R68Q16
      PDOT(L2)=PDOT(L2)+DUM1*R89Q17+DUM2*R29Q17+DUM3*R39Q17
     *+DUM4*R68Q17
      PDOT(L3)=PDOT(L3)+DUM1*R89Q18+DUM2*R29Q18+DUM3*R39Q18
     *+DUM4*R68Q18
      PDOT(N1)=PDOT(N1)+DUM1*R89Q19+DUM2*R29Q19+DUM3*R39Q19
     *+DUM5*R78Q19
      PDOT(N2)=PDOT(N2)+DUM1*R89Q20+DUM2*R29Q20+DUM3*R39Q20
     *+DUM5*R78Q20
      PDOT(N3)=PDOT(N3)+DUM1*R89Q21+DUM2*R29Q21+DUM3*R39Q21
     *+DUM5*R78Q21
      RETURN
      END
C
C         CALCULATE TETRAHEDRAL CENTER POTENTIAL ENERGY DERIVATIVES
C
      SUBROUTINE TETRA(NL)
      PARAMETER(ND1=100,NDP=10)
C
C************************************************************
C                                                           *
C      WRITTEN BY:  R. J. DUCHOVIC                          *
C      DATE:  JULY, 1983                                    *
C      MODIFIED:  MARCH,1986                                *
C                                                           *
C         MODIFICATIONS:  NEW AB INITIO DATA FROM DAVID     *
C                         HIRST (UNIVERSITY OF WARWICK,     *
C                         ENGLAND) HAVE RESULTED IN A NEW   *
C                         FIT FOR THE POTENTIAL PARAMETERS  *
C                         WHICH REQUIRES A CHANGE IN THE    *
C                         ANGULAR SWITCHING FUNCTIONS.  IN  *
C                         ADDITION TO NEW VALUES FOR THE    *
C                         SWITCHING FUNCTION PARAMETERS,    *
C                         A NEW SWITCHING FUNCTION, S4,     *
C                         HAS BEEN ADDED FOR THE CUBIC AND  *
C                         QUARTIC PORTIONS OF THE PHI-TYPE  *
C                         ANGULAR POTENTIAL.  FURTHER, THE  *
C                         EXPONENT IN S1 HAS BEEN MADE A    *
C                         VARIABLE PARAMETER AS IS THE      *
C                         EXPONENT IN THE FUNCTION S4.      *
C                                                           *
C      MODIFIED BY:  XICHE HU                               *
C      DATE:  MARCH 12, 1990                                *
C                                                           *
C         MODIFICATIONS:  THE SWITCHING FUNCTIONS ST AND    *
C                         SP FOR THE THETA AND PHI EQ.      *
C                         ANGLES HAVE BEEN CHANGED.  THE    *
C                         FUNCTIONAL FORMS FOR THE THETA(   *
C                         IJ) QUADRATIC, CUBIC, & QUARTIC   *
C                         FORCE CONSTANTS, AND THE NON-     *
C                         DIAGONAL CUBIC GN4 FORCE CONST.   *
C                         ARE CHANGED.  THESE CHANGES WILL  *
C                         BE PUBLISHED.                     *
C                                                           *
C   THIS SUBROUTINE IS DESIGNED TO COMPUTE DV/DQ FOR THE    *
C   ANGULAR MOTIONS OF A TETRAHEDRAL CENTER.  THE BENDS     *
C   ARE EXPANDED THROUGH QUARTIC TERMS FOR THE DIAGONAL     *
C   FORCES.  THE SUBROUTINE INCLUDES CODE FOR THE OUT-OF-   *
C   PLANE MOTION RESULTING FROM THE RUPTURE OF A SINGLE     *
C   BOND AT THE TETRAHEDRAL CENTER.                         *
C                                                           *
C   DEFINITIONS OF IMPORTANT VARIABLES                      *
C                                                           *
C   ARRAY IQ(15)                                            *
C    -- ARRAY OF INDICES FOR THE COORDINATES OF EACH ATOM   *
C                                                           *
C      IQ(1) => X COORDINATE ATOM I                         *
C      IQ(2) => Y COORDINATE ATOM I                         *
C      IQ(3) => Z COORDINATE ATOM I                         *
C      IQ(4) => X COORDINATE ATOM J                         *
C      IQ(5) => Y COORDINATE ATOM J                         *
C      IQ(6) => Z COORDINATE ATOM J                         *
C      IQ(7) => X COORDINATE ATOM K                         *
C      IQ(8) => Y COORDINATE ATOM K                         *
C      IQ(9) => Z COORDINATE ATOM K                         *
C      IQ(10) => X COORDINATE ATOM L                        *
C      IQ(11) => Y COORDINATE ATOM L                        *
C      IQ(12) => Z COORDINATE ATOM L                        *
C      IQ(13) => X COORDINATE ATOM M                        *
C      IQ(14) => Y COORDINATE ATOM M                        *
C      IQ(15) => Z COORDINATE ATOM M                        *
C      NOTE: ATOM M IS THE TETRAHEDRAL CENTER               *
C                                                           *
C   ARRAY RC(12)                                            *
C    -- ARRAY OF RELATIVE COORDINATES                       *
C      RC(1) => RELATIVE X COORDINATE  XI-XM                *
C      RC(2) => RELATIVE Y COORDINATE  YI-YM                *
C      RC(3) => RELATIVE Z COORDINATE  ZI-ZM                *
C      RC(4) => RELATIVE X COORDINATE  XJ-XM                *
C      RC(5) => RELATIVE Y COORDINATE  YJ-YM                *
C      RC(6) => RELATIVE Z COORDINATE  ZJ-ZM                *
C      RC(7) => RELATIVE X COORDINATE  XK-XM                *
C      RC(8) => RELATIVE Y COORDINATE  YK-YM                *
C      RC(9) => RELATIVE Z COORDINATE  ZK-ZM                *
C      RC(10) => RELATIVE X COORDINATE  XL-XM               *
C      RC(11) => RELATIVE Y COORDINATE  YL-YM               *
C      RC(12) => RELATIVE Z COORDINATE  ZL-ZM               *
C                                                           *
C   ARRAYS XDF(10), YDF(10), ZDF(10)                        *
C    -- ARRAYS OF COORDINATE DIFFERENCES                    *
C                                                           *
C   XDF(1) => XI-XM  YDF(1) => YI-YM  ZDF(1) => ZI-ZM       *
C   XDF(2) => XJ-XM  YDF(2) => YJ-YM  ZDF(2) => ZJ-ZM       *
C   XDF(3) => XJ-XI  YDF(3) => YJ-YI  ZDF(3) => ZJ-ZI       *
C   XDF(4) => XK-XM  YDF(4) => YK-YM  ZDF(4) => ZK-ZM       *
C   XDF(5) => XK-XI  YDF(5) => YK-YI  ZDF(5) => ZK-ZI       *
C   XDF(6) => XK-XJ  YDF(6) => YK-YJ  ZDF(6) => ZK-ZJ       *
C   XDF(7) => XL-XM  YDF(7) => YL-YM  ZDF(7) => ZL-ZM       *
C   XDF(8) => XL-XI  YDF(8) => YL-YI  ZDF(8) => ZL-ZI       *
C   XDF(9) => XL-XJ  YDF(9) => YL-YJ  ZDF(9) => ZL-ZI       *
C   XDF(10) => XL-XK  YDF(10) => YL-YK  ZDF(10) => ZL-ZK    *
C                                                           *
C   ARRAYS TT(NL,6) AND CTT(6)                              *
C   -- T ARRAY HOLDS THETA ANGLES                           *
C   -- CCT ARRAY HOLDS COSINES OF THETA ANGLES              *
C                                                           *
C    TT(NL,1) => THETA(I,J)  CTT(1) => COS(THETA(I,J))      *
C    TT(NL,2) => THETA(I,K)  CTT(2) => COS(THETA(I,K))      *
C    TT(NL,3) => THETA(I,L)  CTT(3) => COS(THETA(I,L))      *
C    TT(NL,4) => THETA(J,K)  CTT(4) => COS(THETA(J,K))      *
C    TT(NL,5) => THETA(J,L)  CTT(5) => COS(THETA(J,L))      *
C    TT(NL,6) => THETA(K,L)  CTT(6) => COS(THEAT(K,L))      *
C                                                           *
C   ARRAY IB(4)                                             *
C   -- ARRAY OF BOND INDICES                                *
C                                                           *
C      IB(1) => INDEX FOR I-M BOND                          *
C      IB(2) => INDEX FOR J-M BOND                          *
C      IB(3) => INDEX FOR K-M BOND                          *
C      IB(4) => INDEX FOR L-M BOND                          *
C                                                           *
C   ARRAY R0(NL,4)                                          *
C   -- ARRAY OF EQUILIBRIUM BOND LENGTHS                    *
C                                                           *
C      R0(NL,1) => BOND I                                   *
C      R0(NL,2) => BOND J                                   *
C      R0(NL,3) => BOND K                                   *
C      R0(NL,4) => BOND L                                   *
C                                                           *
C   ARRAY DLTA(NL,48)                                       *
C   -- ARRAY OF DELTA ANGLES AND HIGHER POWERS OF THESE     *
C      ANGLES                                               *
C                                                           *
C DLTA(NL,1) => DELTA(I,J)    DLTA(NL,25) => DELTA(K,I)     *
C DLTA(NL,2) => DELTA(I,J)**2 DLTA(NL,26) => DELTA(K,I)**2  *
C DLTA(NL,3) => DELTA(I,J)**3 DLTA(NL,27) => DELTA(K,I)**3  *
C DLTA(NL,4) => DELTA(I,J)**4 DLTA(NL,28) => DELTA(K,I)**4  *
C DLTA(NL,5) => DELTA(I,K)    DLTA(NL,29) => DELTA(K,J)     *
C DLTA(NL,6) => DELTA(I,K)**2 DLTA(NL,30) => DELTA(K,J)**2  *
C DLTA(NL,7) => DELTA(I,K)**3 DLTA(NL,31) => DELTA(K,J)**3  *
C DLTA(NL,8) => DELTA(I,K)**4 DLTA(NL,32) => DELTA(K,J)**4  *
C DLTA(NL,9) => DELTA(I,L)    DLTA(NL,33) => DELTA(K,L)     *
C DLTA(NL,10) => DELTA(I,L)**2 DLTA(NL,34) => DELTA(K,L)**2 *
C DLTA(NL,11) => DELTA(I,L)**3 DLTA(NL,35) => DELTA(K,L)**3 *
C DLTA(NL,12) => DELTA(I,L)**4 DLTA(NL,36) => DELTA(K,L)**4 *
C DLTA(NL,13) => DELTA(J,I)    DLTA(NL,37) => DELTA(L,I)    *
C DLTA(NL,14) => DELTA(J,I)**2 DLTA(NL,38) => DELTA(L,I)**2 *
C DLTA(NL,15) => DELTA(J,I)**3 DLTA(NL,39) => DELTA(L,I)**3 *
C DLTA(NL,16) => DELTA(J,I)**4 DLTA(NL,40) => DELTA(L,I)**4 *
C DLTA(NL,17) => DELTA(J,K)    DLTA(NL,41) => DELTA(L,J)    *
C DLTA(NL,18) => DELTA(J,K)**2 DLTA(NL,42) => DELTA(L,J)**2 *
C DLTA(NL,19) => DELTA(J,K)**3 DLTA(NL,43) => DELTA(L,J)**3 *
C DLTA(NL,20) => DELTA(J,K)**4 DLTA(NL,44) => DELTA(L,J)**4 *
C DLTA(NL,21) => DELTA(J,L)    DLTA(NL,45) => DELTA(L,K)    *
C DLTA(NL,22) => DELTA(J,L)**2 DLTA(NL,46) => DELTA(L,K)**2 *
C DLTA(NL,23) => DELTA(J,L)**3 DLTA(NL,47) => DELTA(L,K)**3 *
C DLTA(NL,24) => DELTA(J,L)**4 DLTA(NL,48) => DELTA(L,K)**4 *
C                                                           *
C   ARRAY CDLTA(12)                                         *
C   -- ARRAY OF COSINES FOR OUT-OF-PLANE ANGLES             *
C                                                           *
C   CDLTA(1) => COS(DELTA(I,J)+THETAZERO(I,J))              *
C   CDLTA(2) => COS(DELTA(I,K)+THETAZERO(I,K))              *
C   CDLTA(3) => COS(DELTA(I,L)+THETAZERO(I,L))              *
C   CDLTA(4) => COS(DELTA(J,I)+THETAZERO(I,J))              *
C   CDLTA(5) => COS(DELTA(J,K)+THETAZERO(J,K))              *
C   CDLTA(6) => COS(DELTA(J,L)+THETAZERO(J,L))              *
C   CDLTA(7) => COS(DELTA(K,I)+THETAZERO(I,K))              *
C   CDLTA(8) => COS(DELTA(K,J)+THETAZERO(J,K))              *
C   CDLTA(9) => COS(DELTA(K,L)+THETAZERO(K,L))              *
C   CDLTA(10) => COS(DELTA(L,I)+THETAZERO(I,L))             *
C   CDLTA(11) => COS(DELTA(L,J)+THETAZERO(J,L))             *
C   CDLTA(12) => COS(DELTA(L,K)+THETAZERO(K,L))             *
C                                                           *
C   SPECIAL INDEXING ARRAYS J1(6),J2(6),J3(6),J4(6)         *
C                                                           *
C   J1(1)=1   J2(1)=2   J3(1)=3   J4(1)=4                   *
C   J1(2)=1   J2(2)=3   J3(2)=2   J4(2)=4                   *
C   J1(3)=1   J2(3)=4   J3(3)=2   J4(3)=3                   *
C   J1(4)=2   J2(4)=3   J3(4)=1   J4(4)=4                   *
C   J1(5)=2   J2(5)=4   J3(5)=1   J4(5)=3                   *
C   J1(6)=3   J2(6)=4   J3(6)=1   J4(6)=2                   *
C                                                           *
C   ADDITIONAL SPECIAL INDEXING ARRAYS:  K1(4),K2(4),K3(4)  *
C      K4(4),K5(4),K6(4),K7(4),K8(4),K9(4)                  *
C                                                           *
C   K1(1)=2  K2(1)=3  K3(1)=4  K4(1)=1  K5(1)=2             *
C   K1(2)=1  K2(2)=3  K3(2)=4  K4(2)=1  K5(2)=4             *
C   K1(3)=1  K2(3)=2  K3(3)=4  K4(3)=2  K5(3)=4             *
C   K1(4)=1  K2(4)=2  K3(4)=3  K4(4)=3  K5(4)=5             *
C                                                           *
C   K6(1)=3  K7(1)=4  K8(1)=5  K9(1)=6                      *
C   K6(2)=5  K7(2)=2  K8(2)=3  K9(2)=6                      *
C   K6(3)=6  K7(3)=1  K8(3)=3  K9(3)=5                      *
C   K6(4)=6  K7(4)=1  K8(4)=2  K9(4)=4                      *
C                                                           *
C   ARRAY CBIC(15,6)                                        *
C   -- ARRAY USED TO SAVE THE DERIVATIVES OF THE THETA      *
C      ANGLES FOR USE IN THE NON-DIAGONAL CUBIC             *
C      SUBROUTINE CUBEND(NL,N1,N2,D).  EACH ROW OF THE      *
C      ARRAY STORES DATA FOR A CARTESIAN COORDINATE         *
C      (A TOTAL OF 15) WHILE THE COLUMNS ARE THE            *
C      DIFFERENCES (DTHETA/DXI - DTHETAZERO/DXI) FOR THE    *
C      SIX THETA ANGLES IN METHANE.                         *
C                                                           *
C   ARRAY OUTPL(15,6)                                       *
C   -- ARRAY USED TO SAVE THE DERIVATIVES OF THE            *
C      THETAZERO ANGLES FOR USE IN THE OUT-OF-PLANE BEND    *
C      CALCULATION.  EACH ROW OF THE ARRAY STORES DATA      *
C      FOR A CARTESIAN COORDINATE (A TOTAL OF 15) AND       *
C      THE QUANTITIES STORED ARE: DTHETAZERO/DXI            *
C                                                           *
C   ARRAY DERV(5,4)                                         *
C   -- ARRAY USED TO HOLD THE DERIVATITVES WITH RESEPECT    *
C      TO THE CARTESIAN COORDINATES OF THE OUT-OF-PLANE     *
C      SWITCHING FUNCTION                                   *
C                                                           *
C************************************************************
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/ Q(3*ND1),PDOT(3*ND1)
      COMMON/COORS/ R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     +GR(20,5),TT(20,6),DANG(300)
      COMMON/FORCES/ N,I3N,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     +NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      COMMON/TETRAB/ N9I(20),N9J(20),N9K(20),N9L(20),N9M(20),
     +               FT0(20,6),FT2(20,6),GT0(20,6),GT2(20,6),
     +               HT0(20,6),HT2(20,6),THT(20,6),R0(20,4),
     +               THT1(20,6),THT2(20,6),FD1(20,4),
     +               HD1(20,4),GN0(20,5),FT(20,6),GT(20,6),
     +               HT(20,6),FD(20,4),HD(20,4),DLTA(20,48),
     +               TETTST,SGN1,SGN2,SGN3,SGN4
      COMMON/CUBEB/ S3(4),DS3(4),CBIC(15,6),ANG1(20,6,4),GN4(20)
      DIMENSION IB(4),IQ(15),J1(6),J2(6),J3(6),J4(6),K1(4),
     +          K2(4),K3(4),K4(4),K5(4),K6(4),K7(4),K8(4),
     +          K9(4),RC(12),CDLTA(12),CTT(6),DERV(5,4),
     +          TN(6),S1(4),S2(4),SP(4),ST(4),SWF(6,2),
     +          SWG(6,2),SWH(6,2),EP(4),ET(4),DS1(4),DS2(4),
     +          DSP(4),DST(4),DF1(4),DF2(4),DF3(4),DF4(6),
     +          DFN1(15),DFN2(15),DFN3(15),DFN4(15),
     +          TRMA(2),TRMB(2),TRMC(2),TRMD(2),
     +          DA1(15),DA2(15),DB1(15),DB2(15),
     +          DC1(15),DC2(15),DD1(15),DD2(15),OUTPL(15,6),
     +          DANG1(12),XDF(10),YDF(10),ZDF(10),BNG(6),
     +          CNG(6),FTD(6),GTD(6),HTD(6),DUMA(6),DUMT(6)
     +          ,S4(4),DS4(4)
      DATA J1/1,1,1,2,2,3/,J2/2,3,4,3,4,4/
      DATA J3/3,2,2,1,1,1/,J4/4,4,3,4,3,2/
      DATA K1/2,1,1,1/,K2/3,3,2,2/,K3/4,4,4,3/
      DATA K4/1,1,2,3/,K5/2,4,4,5/,K6/3,5,6,6/
      DATA K7/4,2,1,1/,K8/5,3,3,2/,K9/6,6,5,4/
C***********************************************************
C                                                          *
C   DEFINE CONSTANTS FOR SWITCHING FUNCTIONS               *
C                                                          *
C***********************************************************
      A1=0.5045375D0
      B1=0.4191092D0
      C1=0.6989260D0
      A2=1.0147402D-07
      B2=-1.2362798D01
      C2=6.0D0
      A3=1.4191474D-01
      B3=-3.0684503D-01
      C3=2.0D0
      A4=0.38387689D0
      B4=-0.169915274D0
      C4=0.971186697D0
      AP=0.224147141D0
      BP=-0.990736407D-05
      CP=0.238179398D+02
      AT=0.330879271D0
      BT=-0.12408758D-02
      CT=0.880601978D+01
C***********************************************************
C                                                          *
C   ZERO OUT CUBIC ARRAY FOR LATER USE                     *
C                                                          *
C***********************************************************
      DO 10 I=1,15
      DO 10 J=1,6
         CBIC(I,J)=0.0D0
         OUTPL(I,J)=0.0D0
   10 CONTINUE
C***********************************************************
C                                                          *
C   CALCULATE INDICES FOR COORDINATES                      *
C                                                          *
C***********************************************************
      IQ(3)=3*N9I(NL)
      IQ(2)=IQ(3)-1
      IQ(1)=IQ(2)-1
      IQ(6)=3*N9J(NL)
      IQ(5)=IQ(6)-1
      IQ(4)=IQ(5)-1
      IQ(9)=3*N9K(NL)
      IQ(8)=IQ(9)-1
      IQ(7)=IQ(8)-1
      IQ(12)=3*N9L(NL)
      IQ(11)=IQ(12)-1
      IQ(10)=IQ(11)-1
      IQ(15)=3*N9M(NL)
      IQ(14)=IQ(15)-1
      IQ(13)=IQ(14)-1
C***********************************************************
C                                                          *
C   CALCULATE INDICES FOR R'S                              *
C                                                          *
C***********************************************************
      NUM1=(N9M(NL)-1)*(2*N-N9M(NL))/2
      IB(1)=NUM1+N9I(NL)-N9M(NL)
      IF(N9M(NL).GT.N9I(NL))
     +IB(1)=(N9I(NL)-1)*(2*N-N9I(NL))/2+N9M(NL)-N9I(NL)
      IB(2)=NUM1+N9J(NL)-N9M(NL)
      IF(N9M(NL).GT.N9J(NL))
     +IB(2)=(N9J(NL)-1)*(2*N-N9J(NL))/2+N9M(NL)-N9J(NL)
      IB(3)=NUM1+N9K(NL)-N9M(NL)
      IF(N9M(NL).GT.N9K(NL))
     +IB(3)=(N9K(NL)-1)*(2*N-N9K(NL))/2+N9M(NL)-N9K(NL)
      IB(4)=NUM1+N9L(NL)-N9M(NL)
      IF(N9M(NL).GT.N9L(NL))
     +IB(4)=(N9L(NL)-1)*(2*N-N9L(NL))/2+N9M(NL)-N9L(NL)
C***********************************************************
C                                                          *
C   CALCULATE RELATIVE COORDINATES                         *
C                                                          *
C***********************************************************
      DO 25 I=1,4
         J=3*I-2
         RC(J)=Q(IQ(J))-Q(IQ(13))
         RC(J+1)=Q(IQ(J+1))-Q(IQ(14))
         RC(J+2)=Q(IQ(J+2))-Q(IQ(15))
  25  CONTINUE
C***********************************************************
C                                                          *
C   CALCULATE VALUES OF THE SWITCHING FUNCTIONS            *
C      CALCULATION OF SP AND ST MODIFIED                   *
C      DECEMBER 1985                                       *
C                                                          *
C***********************************************************
      DO 50 I=1,4
         S1(I)=1.0D0-DTANH(A1*(R(IB(I))-R0(NL,I))*(R(IB(I))-B1)**C1)
         S2(I)=1.0D0-DTANH(A2*(R(IB(I))-R0(NL,I))*(R(IB(I))-B2)**C2)
         S3(I)=1.0D0-DTANH(A3*(R(IB(I))-R0(NL,I))*(R(IB(I))-B3)**C3)
         S4(I)=1.0D0-DTANH(A4*(R(IB(I))-R0(NL,I))*(R(IB(I))-B4)**C4)
         EP(I)=5.54D+34
         SP(I)=0.0D0
         DUM1=BP*(R(IB(I))-CP)**3
         IF (DUM1.LE.80.0D0) THEN
            EP(I)=DEXP(DUM1)
            SP(I)=1.0D0-DTANH(AP*(R(IB(I))-R0(NL,I))*(1+EP(I)))
         ENDIF
         ET(I)=5.54D+34
         ST(I)=0.0D0
         DUM1=BT*(R(IB(I))-CT)**3
         IF (DUM1.LE.80.0D0) THEN
            ET(I)=DEXP(DUM1)
            ST(I)=1.0D0-DTANH(AT*(R(IB(I))-R0(NL,I))*(1+ET(I)))
         ENDIF
  50  CONTINUE
C***********************************************************
C                                                          *
C   CALCULATE THETA(I,J) AND COS(THETA(I,J)) FOR ALL I,J   *
C                                                          *
C***********************************************************
      DUM1=1.0D0/R(IB(1))
      DUM2=1.0D0/R(IB(2))
      DUM3=1.0D0/R(IB(3))
      DUM4=1.0D0/R(IB(4))
      CTT(1)=(RC(1)*RC(4)+RC(2)*RC(5)+RC(3)*RC(6))*DUM1*DUM2
      CTT(2)=(RC(1)*RC(7)+RC(2)*RC(8)+RC(3)*RC(9))*DUM1*DUM3
      CTT(3)=(RC(1)*RC(10)+RC(2)*RC(11)+RC(3)*RC(12))*DUM1*DUM4
      CTT(4)=(RC(4)*RC(7)+RC(5)*RC(8)+RC(6)*RC(9))*DUM2*DUM3
      CTT(5)=(RC(4)*RC(10)+RC(5)*RC(11)+RC(6)*RC(12))*DUM2*DUM4
      CTT(6)=(RC(7)*RC(10)+RC(8)*RC(11)+RC(9)*RC(12))*DUM3*DUM4
      DO 75 I=1,6
         TT(NL,I)=DACOS(CTT(I))
  75  CONTINUE
C***********************************************************
C                                                          *
C   CALCULATE THETAZERO(I,J) FOR ALL I,J                   *
C                                                          *
C***********************************************************
      DO 90 I=1,6
         TN(I)=THT(NL,I)+(THT(NL,I)-THT1(NL,I))
     *         *(SP(J1(I))*SP(J2(I))-1.0D0)+(THT(NL,I)-THT2(NL,I))
     *         *(ST(J3(I))*ST(J4(I))-1.0D0)
  90  CONTINUE
C***********************************************************
C                                                          *
C   NOW DEFINE SWITCHING FUNCTION ARRAYS NEEDED FOR THE    *
C   CALCULATION OF THE FORCE CONSTANTS                     *
C                                                          *
C***********************************************************
      DO 95 I=1,6
         SWF(I,1)=S1(J1(I))*S1(J2(I))-1.0D0
         SWF(I,2)=S2(J3(I))*S2(J4(I))-1.0D0
         SWG(I,1)=S4(J1(I))*S4(J2(I))-1.0D0
         SWG(I,2)=S2(J3(I))*S2(J4(I))-1.0D0
         SWH(I,1)=SWG(I,1)
         SWH(I,2)=SWG(I,2)
  95  CONTINUE
C***********************************************************
C                                                          *
C   CALCULATE THE DIAGONAL QUADRATIC, CUBIC, AND QUARTIC   *
C   FORCE CONSTANTS                                        *
C                                                          *
C***********************************************************
      DO 125 I=1,6
         FT(NL,I)=FT0(NL,I)+FT0(NL,I)*SWF(I,1)
     *           +(FT0(NL,I)-FT2(NL,I))*SWF(I,2)*(SWF(I,1)+1.0D0)
         GT(NL,I)=GT0(NL,I)+GT0(NL,I)*SWG(I,1)
     *           +(GT0(NL,I)-GT2(NL,I))*SWG(I,2)*(SWG(I,1)+1.0D0)
         HT(NL,I)=HT0(NL,I)+HT0(NL,I)*SWH(I,1)
     *           +(HT0(NL,I)-HT2(NL,I))*SWH(I,2)*(SWH(I,1)+1.0D0)
 125  CONTINUE
C***********************************************************
C                                                          *
C   WE ARE NOW READY TO CALCULATE DV/DQ FOR THE DIAGONAL   *
C   QUADRATIC, CUBIC, AND QUARTIC ANGULAR TERMS OF THE     *
C   POTENTIAL.                                             *
C                                                          *
C***********************************************************
      DO 140 I=1,6
         ANG1(NL,I,1)=TT(NL,I)-TN(I)
         ANG1(NL,I,2)=ANG1(NL,I,1)*ANG1(NL,I,1)
         ANG1(NL,I,3)=ANG1(NL,I,2)*ANG1(NL,I,1)
         ANG1(NL,I,4)=ANG1(NL,I,3)*ANG1(NL,I,1)
         BNG(I)=THT(NL,I)-THT1(NL,I)
         CNG(I)=THT(NL,I)-THT2(NL,I)
         FTD(I)=FT0(NL,I)-FT2(NL,I)
         GTD(I)=GT0(NL,I)-GT2(NL,I)
         HTD(I)=HT0(NL,I)-HT2(NL,I)
  140 CONTINUE
C***********************************************************
C                                                          *
C   BEGIN MAIN LOOP FOR DV/DQ CALCULATION FOR QUADRATIC,   *
C   CUBIC, AND QUARTIC ANGULAR TERMS                       *
C                                                          *
C***********************************************************
      DO 500 I=1,3
         DO 200 K=1,4
            J=I+3*(K-1)
            D1=1.0D0/R(IB(K))
            D2=R0(NL,K)*D1
            TERM1=(1.0D0-S1(K))**2-1.0D0
            TERM2=A1*RC(J)*D1*(R(IB(K))-B1)**C1
            TERM3=C1*A1*RC(J)*(R(IB(K))-B1)**(C1-1.0D0)*(1.0D0-D2)
            DS1(K)=TERM1*(TERM2+TERM3)
            TERM1=(1.0D0-S2(K))**2-1.0D0
            TERM2=A2*RC(J)*D1*(R(IB(K))-B2)**C2
            TERM3=C2*A2*RC(J)*(R(IB(K))-B2)**(C2-1.0D0)*(1.0D0-D2)
            DS2(K)=TERM1*(TERM2+TERM3)
            TERM1=(1.0D0-S4(K))**2-1.0D0
            TERM2=A4*RC(J)*D1*(R(IB(K))-B4)**C4
            TERM3=C4*A4*RC(J)*(R(IB(K))-B4)**(C4-1.0D0)*(1.0D0-D2)
            DS4(K)=TERM1*(TERM2+TERM3)
            TERM1=(1.0D0-SP(K))**2-1.0D0
            TERM2=AP*RC(J)*EP(K)
            TERM3=D1+3.0D0*BP*(R(IB(K))-CP)**2*(1.0D0-D2)
            DSP(K)=TERM1*(TERM2*TERM3+AP*RC(J)/R(IB(K)))
            TERM1=(1.0D0-ST(K))**2-1.0D0
            TERM2=AT*RC(J)*ET(K)
            TERM3=D1+3.0D0*BT*(R(IB(K))-CT)**2*(1.0D0-D2)
            DST(K)=TERM1*(TERM2*TERM3+AT*RC(J)/R(IB(K)))
  200    CONTINUE
C***********************************************************
C                                                          *
C   WE HAVE CALCULATED THE DERIVATIVES OF THE SWITCHING    *
C   FUNCTIONS S1, S2, SP, ST.  WE NOW CALCULATE THE        *
C   FRACTIONAL TERMS IN EACH DERIVATIVE WITH RESPECT TO    *
C   ATOMS I, J, K, L.                                      *
C                                                          *
C***********************************************************
         R11=1.0D0/R(IB(1))
         R12=1.0D0/R(IB(2))
         R13=1.0D0/R(IB(3))
         R14=1.0D0/R(IB(4))
         S11=-1.0D0/DSQRT(1.0D0-CTT(1)**2)
         S12=-1.0D0/DSQRT(1.0D0-CTT(2)**2)
         S13=-1.0D0/DSQRT(1.0D0-CTT(3)**2)
         S14=-1.0D0/DSQRT(1.0D0-CTT(4)**2)
         S15=-1.0D0/DSQRT(1.0D0-CTT(5)**2)
         S16=-1.0D0/DSQRT(1.0D0-CTT(6)**2)
         R21=R11**2
         FRC1=RC(I+3)*R11*R12
         FRC2=RC(I)*CTT(1)*R21
         DF1(1)=S11*(FRC1-FRC2)
         FRC1=RC(I+6)*R11*R13
         FRC2=RC(I)*CTT(2)*R21
         DF2(1)=S12*(FRC1-FRC2)
         FRC1=RC(I+9)*R11*R14
         FRC2=RC(I)*CTT(3)*R21
         DF3(1)=S13*(FRC1-FRC2)
         R22=R12**2
         FRC1=RC(I)*R11*R12
         FRC2=RC(I+3)*CTT(1)*R22
         DF1(2)=S11*(FRC1-FRC2)
         FRC1=RC(I+6)*R12*R13
         FRC2=RC(I+3)*CTT(4)*R22
         DF2(2)=S14*(FRC1-FRC2)
         FRC1=RC(I+9)*R12*R14
         FRC2=RC(I+3)*CTT(5)*R22
         DF3(2)=S15*(FRC1-FRC2)
         R23=R13**2
         FRC1=RC(I)*R11*R13
         FRC2=RC(I+6)*CTT(2)*R23
         DF1(3)=S12*(FRC1-FRC2)
         FRC1=RC(I+3)*R12*R13
         FRC2=RC(I+6)*CTT(4)*R23
         DF2(3)=S14*(FRC1-FRC2)
         FRC1=RC(I+9)*R13*R14
         FRC2=RC(I+6)*CTT(6)*R23
         DF3(3)=S16*(FRC1-FRC2)
         R24=R14**2
         FRC1=RC(I)*R11*R14
         FRC2=RC(I+9)*CTT(3)*R24
         DF1(4)=S13*(FRC1-FRC2)
         FRC1=RC(I+3)*R12*R14
         FRC2=RC(I+9)*CTT(5)*R24
         DF2(4)=S15*(FRC1-FRC2)
         FRC1=RC(I+6)*R13*R14
         FRC2=RC(I+9)*CTT(6)*R24
         DF3(4)=S16*(FRC1-FRC2)
C***********************************************************
C                                                          *
C   AT THIS POINT WE ONLY NEED TO CALCULATE THE FRACTIONAL *
C   TERMS IN THE DERIVATIVE WITH RESPECT TO ATOM M         *
C   (THE TETRAHEDRAL CENTER)                               *
C                                                          *
C***********************************************************
         Q1=2.0D0*Q(IQ(I+12))
         FRC1=(Q1-Q(IQ(I))-Q(IQ(I+3)))*R11*R12
         FRC2=RC(I)*CTT(1)*R21
         FRC3=RC(I+3)*CTT(1)*R22
         DF4(1)=S11*(FRC1+FRC2+FRC3)
         FRC1=(Q1-Q(IQ(I))-Q(IQ(I+6)))*R11*R13
         FRC2=RC(I)*CTT(2)*R21
         FRC3=RC(I+6)*CTT(2)*R23
         DF4(2)=S12*(FRC1+FRC2+FRC3)
         FRC1=(Q1-Q(IQ(I))-Q(IQ(I+9)))*R11*R14
         FRC2=RC(I)*CTT(3)*R21
         FRC3=RC(I+9)*CTT(3)*R24
         DF4(3)=S13*(FRC1+FRC2+FRC3)
         FRC1=(Q1-Q(IQ(I+3))-Q(IQ(I+6)))*R12*R13
         FRC2=RC(I+3)*CTT(4)*R22
         FRC3=RC(I+6)*CTT(4)*R23
         DF4(4)=S14*(FRC1+FRC2+FRC3)
         FRC1=(Q1-Q(IQ(I+3))-Q(IQ(I+9)))*R12*R14
         FRC2=RC(I+3)*CTT(5)*R22
         FRC3=RC(I+9)*CTT(5)*R24
         DF4(5)=S15*(FRC1+FRC2+FRC3)
         FRC1=(Q1-Q(IQ(I+6))-Q(IQ(I+9)))*R13*R14
         FRC2=RC(I+6)*CTT(6)*R23
         FRC3=RC(I+9)*CTT(6)*R24
         DF4(6)=S16*(FRC1+FRC2+FRC3)
C***********************************************************
C                                                          *
C   WE ARE NOW READY TO EVALUATE DV/DQ FOR THE QUADRATIC,  *
C   CUBIC, AND QUARTIC TERMS OF THE POTENTIAL.             *
C                                                          *
C***********************************************************
         DO 300 J=1,4
            L=I+3*(J-1)
C***********************************************************
C                                                          *
C   QUADRATIC TERMS  ATOMS I,J,K,L                         *
C   INDEX J REFERS TO THE CARTESIAN COORDINATES OF ATOMS   *
C   I,J,K,L (XI,XJ,XK,XL, ETC)                             *
C   INDEX L ADDRESSES THE APPROPRIATE LOCATION IN          *
C   THE STORAGE ARRAYS                                     *
C                                                          *
C***********************************************************
            TEMP1=FT0(NL,K4(J))+FTD(K4(J))*(S2(K3(J))*S2(K2(J))-1.0D0)
            TEMP2=FT0(NL,K5(J))+FTD(K5(J))*(S2(K3(J))*S2(K1(J))-1.0D0)
            TEMP3=FT0(NL,K6(J))+FTD(K6(J))*(S2(K1(J))*S2(K2(J))-1.0D0)
            DUM1=TEMP1*S1(K1(J))*ANG1(NL,K4(J),2)
     *           +TEMP2*S1(K2(J))*ANG1(NL,K5(J),2)
     *           +TEMP3*S1(K3(J))*ANG1(NL,K6(J),2)
            DUM2=FTD(K7(J))*S2(K3(J))*ANG1(NL,K7(J),2)
     *                     *S1(K1(J))*S1(K2(J))
     *          +FTD(K8(J))*S2(K2(J))*ANG1(NL,K8(J),2)
     *                     *S1(K1(J))*S1(K3(J))
     *          +FTD(K9(J))*S2(K1(J))*ANG1(NL,K9(J),2)
     *                     *S1(K2(J))*S1(K3(J))
            TEMP1=BNG(K4(J))
            TEMP2=BNG(K5(J))
            TEMP3=BNG(K6(J))
            DUM3=FT(NL,K4(J))*ANG1(NL,K4(J),1)*TEMP1*SP(K1(J))
     *           +FT(NL,K5(J))*ANG1(NL,K5(J),1)*TEMP2*SP(K2(J))
     *           +FT(NL,K6(J))*ANG1(NL,K6(J),1)*TEMP3*SP(K3(J))
            DUM4=FT(NL,K7(J))*ANG1(NL,K7(J),1)*CNG(K7(J))*ST(K3(J))
     *           +FT(NL,K8(J))*ANG1(NL,K8(J),1)
     *                        *CNG(K8(J))*ST(K2(J))
     *           +FT(NL,K9(J))*ANG1(NL,K9(J),1)
     *                        *CNG(K9(J))*ST(K1(J))
            PDOT(IQ(L))=PDOT(IQ(L))+0.5D0*DUM1*DS1(J)
     *                  +0.5D0*DUM2*DS2(J)
     *                  +FT(NL,K4(J))*ANG1(NL,K4(J),1)*DF1(J)
     *                  +FT(NL,K5(J))*ANG1(NL,K5(J),1)*DF2(J)
     *                  +FT(NL,K6(J))*ANG1(NL,K6(J),1)*DF3(J)
     *                  -DUM3*DSP(J)-DUM4*DST(J)
C***********************************************************
C                                                          *
C   CODE NEEDED TO SAVE DATA FOR OUT-OF-PLANE BEND         *
C   CALCULATION                                            *
C                                                          *
C***********************************************************
            OUTPL(L,K4(J))=TEMP1*SP(K1(J))*DSP(J)
            OUTPL(L,K5(J))=TEMP2*SP(K2(J))*DSP(J)
            OUTPL(L,K6(J))=TEMP3*SP(K3(J))*DSP(J)
            OUTPL(L,K7(J))=CNG(K7(J))*ST(K3(J))*DST(J)
            OUTPL(L,K8(J))=CNG(K8(J))*ST(K2(J))*DST(J)
            OUTPL(L,K9(J))=CNG(K9(J))*ST(K1(J))*DST(J)
C***********************************************************
C                                                          *
C   ADDITIONAL CODE REQUIRED TO SAVE ANGULAR DERIVATIVES   *
C   FOR THE NON-DIAGONAL CUBIC CALCULATION                 *
C   SAVE THESE QUANTITIES IN THE ARRAY CBIC                *
C                                                          *
C***********************************************************
C
            CBIC(L,K4(J))=DF1(J)-OUTPL(L,K4(J))
            CBIC(L,K5(J))=DF2(J)-OUTPL(L,K5(J))
            CBIC(L,K6(J))=DF3(J)-OUTPL(L,K6(J))
            CBIC(L,K7(J))=-OUTPL(L,K7(J))
            CBIC(L,K8(J))=-OUTPL(L,K8(J))
            CBIC(L,K9(J))=-OUTPL(L,K9(J))
C***********************************************************
C                                                          *
C   CUBIC TERMS  ATOMS I, J, K, L                          *
C                                                          *
C***********************************************************
            TEMP31=GT0(NL,K4(J))+GTD(K4(J))*(S2(K3(J))*S2(K2(J))-1.0D0)
            TEMP32=GT0(NL,K5(J))+GTD(K5(J))*(S2(K3(J))*S2(K1(J))-1.0D0)
            TEMP33=GT0(NL,K6(J))+GTD(K6(J))*(S2(K1(J))*S2(K2(J))-1.0D0)
            DUM1=TEMP31*S4(K1(J))*ANG1(NL,K4(J),3)
     *           +TEMP32*S4(K2(J))*ANG1(NL,K5(J),3)
     *           +TEMP33*S4(K3(J))*ANG1(NL,K6(J),3)
            DUM2=GTD(K7(J))*S2(K3(J))*ANG1(NL,K7(J),3)
     *                     *S4(K1(J))*S4(K2(J))
     *           +GTD(K8(J))*S2(K2(J))*ANG1(NL,K8(J),3)
     *                     *S4(K1(J))*S4(K3(J))
     *           +GTD(K9(J))*S2(K1(J))*ANG1(NL,K9(J),3)
     *                     *S4(K2(J))*S4(K3(J))
            DUM3=GT(NL,K4(J))*ANG1(NL,K4(J),2)*TEMP1*SP(K1(J))
     *           +GT(NL,K5(J))*ANG1(NL,K5(J),2)*TEMP2*SP(K2(J))
     *           +GT(NL,K6(J))*ANG1(NL,K6(J),2)*TEMP3*SP(K3(J))
            DUM4=GT(NL,K7(J))*ANG1(NL,K7(J),2)*CNG(K7(J))*ST(K3(J))
     *           +GT(NL,K8(J))*ANG1(NL,K8(J),2)*CNG(K8(J))*ST(K2(J))
     *           +GT(NL,K9(J))*ANG1(NL,K9(J),2)*CNG(K9(J))*ST(K1(J))
            PDOT(IQ(L))=PDOT(IQ(L))+DUM1*DS4(J)+DUM2*DS2(J)
     *                  +3.0D0*(GT(NL,K4(J))*ANG1(NL,K4(J),2)*DF1(J)
     *                  +GT(NL,K5(J))*ANG1(NL,K5(J),2)*DF2(J)
     *                  +GT(NL,K6(J))*ANG1(NL,K6(J),2)*DF3(J)
     *                  -DUM3*DSP(J)-DUM4*DST(J))
C***********************************************************
C                                                          *
C   QUARTIC TERMS  ATOMS I, J, K, L                        *
C                                                          *
C***********************************************************
            TEMP41=HT0(NL,K4(J))+HTD(K4(J))*(S2(K3(J))*S2(K2(J))-1.0D0)
            TEMP42=HT0(NL,K5(J))+HTD(K5(J))*(S2(K3(J))*S2(K1(J))-1.0D0)
            TEMP43=HT0(NL,K6(J))+HTD(K6(J))*(S2(K1(J))*S2(K2(J))-1.0D0)
            DUM1=TEMP41*S4(K1(J))*ANG1(NL,K4(J),4)
     *           +TEMP42*S4(K2(J))*ANG1(NL,K5(J),4)
     *           +TEMP43*S4(K3(J))*ANG1(NL,K6(J),4)
            DUM2=HTD(K7(J))*S2(K3(J))*ANG1(NL,K7(J),4)
     *                     *S4(K1(J))*S4(K2(J))
     *           +HTD(K8(J))*S2(K2(J))*ANG1(NL,K8(J),4)
     *                     *S4(K1(J))*S4(K3(J))
     *           +HTD(K9(J))*S2(K1(J))*ANG1(NL,K9(J),4)
     *                     *S4(K2(J))*S4(K3(J))
            DUM3=HT(NL,K4(J))*ANG1(NL,K4(J),3)*TEMP1*SP(K1(J))
     *           +HT(NL,K5(J))*ANG1(NL,K5(J),3)*TEMP2*SP(K2(J))
     *           +HT(NL,K6(J))*ANG1(NL,K6(J),3)*TEMP3*SP(K3(J))
            DUM4=HT(NL,K7(J))*ANG1(NL,K7(J),3)*CNG(K7(J))*ST(K3(J))
     *           +HT(NL,K8(J))*ANG1(NL,K8(J),3)*CNG(K8(J))*ST(K2(J))
     *           +HT(NL,K9(J))*ANG1(NL,K9(J),3)*CNG(K9(J))*ST(K1(J))
            PDOT(IQ(L))=PDOT(IQ(L))+DUM1*DS4(J)+DUM2*DS2(J)
     *                  +4.0D0*(HT(NL,K4(J))*ANG1(NL,K4(J),3)*DF1(J)
     *                  +HT(NL,K5(J))*ANG1(NL,K5(J),3)*DF2(J)
     *                  +HT(NL,K6(J))*ANG1(NL,K6(J),3)*DF3(J)
     *                  -DUM3*DSP(J)-DUM4*DST(J))
  300    CONTINUE
C***********************************************************
C                                                          *
C   NOW COMPUTE THE DERIVATIVE OF THE QUADRATIC TERM       *
C   WITH RESPECT TO ATOM M (THE TETRAHEDRAL CENTER)        *
C                                                          *
C***********************************************************
         DO 350 K=1,6
            DUMA(K)=-((DS1(J1(K))*S1(J2(K))+S1(J1(K))*DS1(J2(K)))
     *              *(FT0(NL,K)+FTD(K)*(S2(J3(K))*S2(J4(K))-1.0D0))
     *              +(DS2(J3(K))*S2(J4(K))+S2(J3(K))*DS2(J4(K)))
     *              *FTD(K)*S1(J1(K))*S1(J2(K)))
            DUMT(K)=-((DSP(J1(K))*SP(J2(K))+SP(J1(K))*DSP(J2(K)))
     *              *BNG(K)
     *              +(DST(J3(K))*ST(J4(K))+ST(J3(K))*DST(J4(K)))
     *              *CNG(K))
  350    CONTINUE
         DO 355 K=1,6
            CBIC(I+12,K)=DF4(K)-DUMT(K)
            OUTPL(I+12,K)=DUMT(K)
            PDOT(IQ(I+12))=PDOT(IQ(I+12))+0.5D0*DUMA(K)*ANG1(NL,K,2)
     *                    +FT(NL,K)*ANG1(NL,K,1)*CBIC(I+12,K)
  355    CONTINUE
C***********************************************************
C                                                          *
C   COMPUTE THE DERIVATIVE OF THE CUBIC TERM WITH          *
C   RESPECT TO ATOM M                                      *
C                                                          *
C***********************************************************
         DO 360 K=1,6
            DUMA(K)=-((DS4(J1(K))*S4(J2(K))+S4(J1(K))*DS4(J2(K)))
     *              *(GT0(NL,K)+GTD(K)*(S2(J3(K))*S2(J4(K))-1.0D0))
     *              +(DS2(J3(K))*S2(J4(K))+S2(J3(K))*DS2(J4(K)))
     *              *GTD(K)*S4(J1(K))*S4(J2(K)))
  360    CONTINUE
         DO 365 K=1,6
            PDOT(IQ(I+12))=PDOT(IQ(I+12))+DUMA(K)*ANG1(NL,K,3)
     *               +3.0D0*GT(NL,K)*ANG1(NL,K,2)*(DF4(K)-DUMT(K))
  365    CONTINUE
C***********************************************************
C                                                          *
C   COMPUTE THE DERIVATIVE OF THE QUARTIC TERM WITH        *
C   RESPECT TO ATOM M                                      *
C                                                          *
C***********************************************************
         DO 370 K=1,6
            DUMA(K)=-((DS4(J1(K))*S4(J2(K))+S4(J1(K))*DS4(J2(K)))
     *              *(HT0(NL,K)+HTD(K)*(S2(J3(K))*S2(J4(K))-1.0D0))
     *              +(DS2(J3(K))*S2(J4(K))+S2(J3(K))*DS2(J4(K)))
     *              *HTD(K)*S4(J1(K))*S4(J2(K)))
  370    CONTINUE
         DO 375 K=1,6
            PDOT(IQ(I+12))=PDOT(IQ(I+12))+DUMA(K)*ANG1(NL,K,4)
     *            +4.0D0*HT(NL,K)*ANG1(NL,K,3)*(DF4(K)-DUMT(K))
  375    CONTINUE
  500 CONTINUE
C***********************************************************
C                                                          *
C   WE HAVE NOW COMPLETED THE CALCULATION OF THE           *
C   DERIVATIVES FOR THE DIAGONAL QUADRATIC, CUBIC, AND     *
C   QUARTIC ANGULAR TERMS OF THE POTENTIAL                 *
C      I=1 => X COORDINATE                                 *
C      I=2 => Y COORDINATE                                 *
C      I=3 => Z COORDINATE                                 *
C                                                          *
C   NOW BEGIN THE OUT-OF-PLANE CALCULATION                 *
C   THE FIRST TASK IS TO COMPUTE DELTA(I,J) (A TOTAL OF    *
C   12 TERMS) AND COS(DELTA(I,J)) ALONG WITH THE HIGHER    *
C   ORDER POWERS OF DELTA(I,J)                             *
C   WE BEGIN BY CALCULATING COORDINATE DIFFERENCES AND     *
C   STORING THEM IN THE ARRAYS XDF, YDF, ZDF               *
C                                                          *
C***********************************************************
      XDF(1)=RC(1)
      XDF(2)=RC(4)
      XDF(3)=Q(IQ(4))-Q(IQ(1))
      XDF(4)=RC(7)
      XDF(5)=Q(IQ(7))-Q(IQ(1))
      XDF(6)=Q(IQ(7))-Q(IQ(4))
      XDF(7)=RC(10)
      XDF(8)=Q(IQ(10))-Q(IQ(1))
      XDF(9)=Q(IQ(10))-Q(IQ(4))
      XDF(10)=Q(IQ(10))-Q(IQ(7))
      YDF(1)=RC(2)
      YDF(2)=RC(5)
      YDF(3)=Q(IQ(5))-Q(IQ(2))
      YDF(4)=RC(8)
      YDF(5)=Q(IQ(8))-Q(IQ(2))
      YDF(6)=Q(IQ(8))-Q(IQ(5))
      YDF(7)=RC(11)
      YDF(8)=Q(IQ(11))-Q(IQ(2))
      YDF(9)=Q(IQ(11))-Q(IQ(5))
      YDF(10)=Q(IQ(11))-Q(IQ(8))
      ZDF(1)=RC(3)
      ZDF(2)=RC(6)
      ZDF(3)=Q(IQ(6))-Q(IQ(3))
      ZDF(4)=RC(9)
      ZDF(5)=Q(IQ(9))-Q(IQ(3))
      ZDF(6)=Q(IQ(9))-Q(IQ(6))
      ZDF(7)=RC(12)
      ZDF(8)=Q(IQ(12))-Q(IQ(3))
      ZDF(9)=Q(IQ(12))-Q(IQ(6))
      ZDF(10)=Q(IQ(12))-Q(IQ(9))
      DUM1=YDF(4)*Q(IQ(12))-YDF(7)*Q(IQ(9))+YDF(10)*Q(IQ(15))
      DUM2=-XDF(4)*Q(IQ(12))+XDF(7)*Q(IQ(9))-XDF(10)*Q(IQ(15))
      DUM3=XDF(4)*Q(IQ(11))-XDF(7)*Q(IQ(8))+XDF(10)*Q(IQ(14))
C*************************************************************
C                                                            *
C   NEW CODE INSERTED TO DETERMINE THE CORRECT NORMAL VECTOR *
C                                                            *
C*************************************************************
      IF (TETTST.NE.1) THEN
         TSTN1=-(DUM1*XDF(2)+DUM2*YDF(2)+DUM3*ZDF(2))
         DST1=DSQRT(DUM1**2+DUM2**2+DUM3**2)
         COSN1=TSTN1/(DST1*R(IB(2)))
         TSTN2=-(DUM1*XDF(1)+DUM2*YDF(1)+DUM3*ZDF(1))
         COSN2=TSTN2/(DST1*R(IB(1)))
         SGN1=1.0D0
         IF ((COSN1.GE.0.0D0).AND.(COSN2.LE.0.0D0)) SGN1=-1.0D0
         IF ((COSN1.GE.0.0D0).AND.(COSN1.GE.COSN2)) SGN1=-1.0D0
         SGN2=SGN1
      ENDIF
      TRMA(1)=-(DUM1*XDF(2)+DUM2*YDF(2)+DUM3*ZDF(2))
      TRMB(1)=DUM1*XDF(1)+DUM2*YDF(1)+DUM3*ZDF(1)
      SQ1=XDF(9)**2
      SQ2=YDF(9)**2
      SQ3=ZDF(9)**2
      DUM1=XDF(6)**2*(SQ2+SQ3)
      DUM2=YDF(6)**2*(SQ1+SQ3)
      DUM3=ZDF(6)**2*(SQ1+SQ2)
      DUM4=XDF(6)*XDF(9)
      DUM5=YDF(6)*YDF(9)
      DUM6=ZDF(6)*ZDF(9)
      TRMA(2)=DSQRT(DUM1+DUM2+DUM3
     +       -2.0D0*(DUM5*DUM6+DUM4*DUM6+DUM4*DUM5))
      SQ1=XDF(8)**2
      SQ2=YDF(8)**2
      SQ3=ZDF(8)**2
      DUM1=XDF(5)**2*(SQ2+SQ3)
      DUM2=YDF(5)**2*(SQ1+SQ3)
      DUM3=ZDF(5)**2*(SQ1+SQ2)
      DUM4=XDF(5)*XDF(8)
      DUM5=YDF(5)*YDF(8)
      DUM6=ZDF(5)*ZDF(8)
      TRMB(2)=DSQRT(DUM1+DUM2+DUM3
     +       -2.0D0*(DUM5*DUM6+DUM4*DUM6+DUM4*DUM5))
      DUM1=YDF(1)*Q(IQ(6))-YDF(2)*Q(IQ(3))+YDF(3)*Q(IQ(15))
      DUM2=-XDF(1)*Q(IQ(6))+XDF(2)*Q(IQ(3))-XDF(3)*Q(IQ(15))
      DUM3=XDF(1)*Q(IQ(5))-XDF(2)*Q(IQ(2))+XDF(3)*Q(IQ(14))
C**********************************************************
C                                                         *
C   NEW CODE ADDED TO DETERMINE THE CORRECT NORMAL VECTOR *
C                                                         *
C**********************************************************
      IF (TETTST.NE.1) THEN
         TETTST=1
         TSTN3=-(DUM1*XDF(7)+DUM2*YDF(7)+DUM3*ZDF(7))
         DST2=DSQRT(DUM1**2+DUM2**2+DUM3**2)
         COSN3=TSTN3/(DST2*R(IB(4)))
         TSTN4=-(DUM1*XDF(4)+DUM2*YDF(4)+DUM3*ZDF(4))
         COSN4=TSTN4/(DST2*R(IB(3)))
         SGN3=1.0D0
         IF ((COSN3.GE.0.0D0).AND.(COSN4.LE.0.0D0)) SGN3=-1.0D0
         IF ((COSN3.GE.0.0D0).AND.(COSN3.GE.COSN4)) SGN3=-1.0D0
         SGN4=SGN3
      ENDIF
      TRMC(1)=-(DUM1*XDF(7)+DUM2*YDF(7)+DUM3*ZDF(7))
      TRMD(1)=DUM1*XDF(4)+DUM2*YDF(4)+DUM3*ZDF(4)
      TRMA(1)=TRMA(1)*SGN1
      TRMB(1)=TRMB(1)*SGN2
      TRMC(1)=TRMC(1)*SGN3
      TRMD(1)=TRMD(1)*SGN4
C***********************************************************
C                                                          *
C   NOTE:  WE DO NOT NEED TO RECOMPUTE SQ1, SQ2, SQ3       *
C                                                          *
C***********************************************************
      DUM1=XDF(3)**2*(SQ2+SQ3)
      DUM2=YDF(3)**2*(SQ1+SQ3)
      DUM3=ZDF(3)**2*(SQ1+SQ2)
      DUM4=XDF(3)*XDF(8)
      DUM5=YDF(3)*YDF(8)
      DUM6=ZDF(3)*ZDF(8)
      TRMC(2)=DSQRT(DUM1+DUM2+DUM3
     *       -2.0D0*(DUM5*DUM6+DUM4*DUM6+DUM4*DUM5))
      SQ1=XDF(5)**2
      SQ2=YDF(5)**2
      SQ3=ZDF(5)**2
      DUM1=XDF(3)**2*(SQ2+SQ3)
      DUM2=YDF(3)**2*(SQ1+SQ3)
      DUM3=ZDF(3)**2*(SQ1+SQ2)
      DUM4=XDF(3)*XDF(5)
      DUM5=YDF(3)*YDF(5)
      DUM6=ZDF(3)*ZDF(5)
      TRMD(2)=DSQRT(DUM1+DUM2+DUM3
     *       -2.0D0*(DUM5*DUM6+DUM4*DUM6+DUM4*DUM5))
C***********************************************************
C                                                          *
C   CALCULATION OF DELTA(I,J) AND COS(DELTA(I,J))          *
C                                                          *
C***********************************************************
      DUMA(1)=1.0D0/R(IB(1))
      DUMA(2)=1.0D0/R(IB(2))
      DUMA(3)=1.0D0/R(IB(3))
      DUMA(4)=1.0D0/R(IB(4))
      DUMT(1)=TRMA(1)/TRMA(2)
      DUMT(2)=TRMB(1)/TRMB(2)
      DUMT(3)=TRMC(1)/TRMC(2)
      DUMT(4)=TRMD(1)/TRMD(2)
      DO 525 I=1,4
         J=1+3*(I-1)
         CDLTA(J)=DUMT(I)*DUMA(K1(I))
         CDLTA(J+1)=DUMT(I)*DUMA(K2(I))
         CDLTA(J+2)=DUMT(I)*DUMA(K3(I))
  525 CONTINUE
      DO 550 I=1,4
         J=1+12*(I-1)
         K=1+3*(I-1)
         DLTA(NL,J)=DACOS(CDLTA(K))-TN(K4(I))
         DLTA(NL,J+4)=DACOS(CDLTA(K+1))-TN(K5(I))
         DLTA(NL,J+8)=DACOS(CDLTA(K+2))-TN(K6(I))
  550 CONTINUE
      DO 575 I=1,12
         J=4*I-3
         DLTA(NL,J+1)=DLTA(NL,J)*DLTA(NL,J)
         DLTA(NL,J+2)=DLTA(NL,J+1)*DLTA(NL,J)
         DLTA(NL,J+3)=DLTA(NL,J+2)*DLTA(NL,J)
  575 CONTINUE
C***********************************************************
C                                                          *
C   CALCULATE THE QUADRATIC AND QUARTIC FORCE CONSTANTS    *
C   FOR THE OUT-OF-PLANE BEND                              *
C                                                          *
C***********************************************************
      FD(NL,1)=(1.0D0-S3(1))*S3(2)*S3(3)*S3(4)*FD1(NL,1)
      FD(NL,2)=(1.0D0-S3(2))*S3(1)*S3(3)*S3(4)*FD1(NL,2)
      FD(NL,3)=(1.0D0-S3(3))*S3(1)*S3(2)*S3(4)*FD1(NL,3)
      FD(NL,4)=(1.0D0-S3(4))*S3(1)*S3(2)*S3(3)*FD1(NL,4)
      HD(NL,1)=(1.0D0-S3(1))*S3(2)*S3(3)*S3(4)*HD1(NL,1)
      HD(NL,2)=(1.0D0-S3(2))*S3(1)*S3(3)*S3(4)*HD1(NL,2)
      HD(NL,3)=(1.0D0-S3(3))*S3(1)*S3(2)*S3(4)*HD1(NL,3)
      HD(NL,4)=(1.0D0-S3(4))*S3(1)*S3(2)*S3(3)*HD1(NL,4)
C***********************************************************
C                                                          *
C   WE CAN NOW BEGIN CALCULATING THE NECESSARY DERIVATIVES *
C   OF THE DELTA(I,J).  THESE ARE COMPUTED USING THE       *
C   QUANTITIES TRMA, TRMB, TRMC, TRMD, AND THE EXPRESSIONS *
C   FOR THE LENGTHS OF THE FOUR BONDS.  WE ALSO NEED THE   *
C   DERIVATIVES OF THE S3 SWITCHING FUNCTION.  BEGIN BY    *
C   CALCULATING THE DERIVATIVES OF F1, F2, F3, F4 (THE     *
C   EXPRESSIONS FOR THE BOND LENGTHS).                     *
C                                                          *
C***********************************************************
      DO 600 I=1,15
         DFN1(I)=0.0D0
         DFN2(I)=0.0D0
         DFN3(I)=0.0D0
         DFN4(I)=0.0D0
  600 CONTINUE
      D1=1.0D0/R(IB(1))
      DFN1(1)=XDF(1)*D1
      DFN1(2)=YDF(1)*D1
      DFN1(3)=ZDF(1)*D1
      DFN1(13)=-DFN1(1)
      DFN1(14)=-DFN1(2)
      DFN1(15)=-DFN1(3)
      D1=1.0D0/R(IB(2))
      DFN2(4)=XDF(2)*D1
      DFN2(5)=YDF(2)*D1
      DFN2(6)=ZDF(2)*D1
      DFN2(13)=-DFN2(4)
      DFN2(14)=-DFN2(5)
      DFN2(15)=-DFN2(6)
      D1=1.0D0/R(IB(3))
      DFN3(7)=XDF(4)*D1
      DFN3(8)=YDF(4)*D1
      DFN3(9)=ZDF(4)*D1
      DFN3(13)=-DFN3(7)
      DFN3(14)=-DFN3(8)
      DFN3(15)=-DFN3(9)
      D1=1.0D0/R(IB(4))
      DFN4(10)=XDF(7)*D1
      DFN4(11)=YDF(7)*D1
      DFN4(12)=ZDF(7)*D1
      DFN4(13)=-DFN4(10)
      DFN4(14)=-DFN4(11)
      DFN4(15)=-DFN4(12)
C***********************************************************
C                                                          *
C   CALCULATION OF DERIVATIVES OF TRMA(1)                  *
C   BEGIN BY FILLING THE DERIVATIVE STORAGE ARRAYS WITH    *
C   ZEROS.                                                 *
C                                                          *
C***********************************************************
      DO 605 I=1,15
         DA1(I)=0.0D0
         DA2(I)=0.0D0
         DB1(I)=0.0D0
         DB2(I)=0.0D0
         DC1(I)=0.0D0
         DC2(I)=0.0D0
         DD1(I)=0.0D0
         DD2(I)=0.0D0
  605 CONTINUE
      DA1(4)=-YDF(4)*Q(IQ(12))+YDF(7)*Q(IQ(9))-YDF(10)*Q(IQ(15))
      DA1(5)=XDF(4)*Q(IQ(12))-XDF(7)*Q(IQ(9))+XDF(10)*Q(IQ(15))
      DA1(6)=-XDF(4)*Q(IQ(11))+XDF(7)*Q(IQ(8))-XDF(10)*Q(IQ(14))
      DA1(7)=ZDF(7)*YDF(2)-YDF(7)*ZDF(2)
      DA1(8)=XDF(7)*ZDF(2)-ZDF(7)*XDF(2)
      DA1(9)=YDF(7)*XDF(2)-XDF(7)*YDF(2)
      DA1(10)=YDF(4)*ZDF(2)-ZDF(4)*YDF(2)
      DA1(11)=ZDF(4)*XDF(2)-XDF(4)*ZDF(2)
      DA1(12)=XDF(4)*YDF(2)-YDF(4)*XDF(2)
      DA1(13)=YDF(10)*ZDF(2)-ZDF(10)*YDF(2)-DA1(4)
      DA1(14)=ZDF(10)*XDF(2)-XDF(10)*ZDF(2)-DA1(5)
      DA1(15)=XDF(10)*YDF(2)-YDF(10)*XDF(2)-DA1(6)
      DO 610 I=1,15
         DA1(I)=DA1(I)*SGN1
  610 CONTINUE
C***********************************************************
C                                                          *
C   CALCULATE DERIVATIVES FOR TRMA(2)                      *
C                                                          *
C***********************************************************
      Q1=1.0D0/TRMA(2)
      DUM1=XDF(6)**2
      DUM2=YDF(6)**2
      DUM3=ZDF(6)**2
      DUM4=XDF(9)**2
      DUM5=YDF(9)**2
      DUM6=ZDF(9)**2
      TERM1=XDF(6)*XDF(9)
      TERM2=YDF(6)*YDF(9)
      TERM3=ZDF(6)*ZDF(9)
      DUM45=DUM4+DUM5
      DUM46=DUM4+DUM6
      DUM56=DUM5+DUM6
      DUM12=DUM1+DUM2
      DUM13=DUM1+DUM3
      DUM23=DUM2+DUM3
      TERM12=TERM1+TERM2
      TERM13=TERM1+TERM3
      TERM23=TERM2+TERM3
      DA2(4)=-Q1*(XDF(6)*DUM56+XDF(9)*DUM23
     +      +(2.0D0*Q(IQ(4))-Q(IQ(7))-Q(IQ(10)))*TERM23)
      DA2(5)=-Q1*(YDF(6)*DUM46+YDF(9)*DUM13
     +      +(2.0D0*Q(IQ(5))-Q(IQ(8))-Q(IQ(11)))*TERM13)
      DA2(6)=-Q1*(ZDF(6)*DUM45+ZDF(9)*DUM12
     +      +(2.0D0*Q(IQ(6))-Q(IQ(9))-Q(IQ(12)))*TERM12)
      DA2(7)=Q1*(XDF(6)*DUM56-XDF(9)*TERM23)
      DA2(8)=Q1*(YDF(6)*DUM46-YDF(9)*TERM13)
      DA2(9)=Q1*(ZDF(6)*DUM45-ZDF(9)*TERM12)
      DA2(10)=Q1*(XDF(9)*DUM23-XDF(6)*TERM23)
      DA2(11)=Q1*(YDF(9)*DUM13-YDF(6)*TERM13)
      DA2(12)=Q1*(ZDF(9)*DUM12-ZDF(6)*TERM12)
C***********************************************************
C                                                          *
C   CALCULATION OF DERIVATIVES OF TRMB(1)                  *
C                                                          *
C***********************************************************
      FACT=1.0D0/SGN1
      DB1(1)=-DA1(4)*FACT
      DB1(2)=-DA1(5)*FACT
      DB1(3)=-DA1(6)*FACT
      DB1(7)=YDF(7)*ZDF(1)-ZDF(7)*YDF(1)
      DB1(8)=ZDF(7)*XDF(1)-XDF(7)*ZDF(1)
      DB1(9)=XDF(7)*YDF(1)-YDF(7)*XDF(1)
      DB1(10)=ZDF(4)*YDF(1)-YDF(4)*ZDF(1)
      DB1(11)=XDF(4)*ZDF(1)-ZDF(4)*XDF(1)
      DB1(12)=YDF(4)*XDF(1)-XDF(4)*YDF(1)
      DB1(13)=ZDF(10)*YDF(1)-YDF(10)*ZDF(1)+DA1(4)*FACT
      DB1(14)=XDF(10)*ZDF(1)-ZDF(10)*XDF(1)+DA1(5)*FACT
      DB1(15)=YDF(10)*XDF(1)-XDF(10)*YDF(1)+DA1(6)*FACT
      DO 612 I=1,15
         DB1(I)=DB1(I)*SGN2
  612 CONTINUE
C***********************************************************
C                                                          *
C   CALCULATION OF DERIVATIVES FOR TRMB(2)                 *
C                                                          *
C***********************************************************
      Q1=1.0D0/TRMB(2)
      DUM1=XDF(5)**2
      DUM2=YDF(5)**2
      DUM3=ZDF(5)**2
      DUM4=XDF(8)**2
      DUM5=YDF(8)**2
      DUM6=ZDF(8)**2
      TERM1=XDF(5)*XDF(8)
      TERM2=YDF(5)*YDF(8)
      TERM3=ZDF(5)*ZDF(8)
      DUM45=DUM4+DUM5
      DUM46=DUM4+DUM6
      DUM56=DUM5+DUM6
      DUM12=DUM1+DUM2
      DUM13=DUM1+DUM3
      DUM23=DUM2+DUM3
      TERM12=TERM1+TERM2
      TERM13=TERM1+TERM3
      TERM23=TERM2+TERM3
      DB2(1)=-Q1*(XDF(5)*DUM56+XDF(8)*DUM23
     +      +(2.0D0*Q(IQ(1))-Q(IQ(7))-Q(IQ(10)))*TERM23)
      DB2(2)=-Q1*(YDF(5)*DUM46+YDF(8)*DUM13
     +      +(2.0D0*Q(IQ(2))-Q(IQ(8))-Q(IQ(11)))*TERM13)
      DB2(3)=-Q1*(ZDF(5)*DUM45+ZDF(8)*DUM12
     +      +(2.0D0*Q(IQ(3))-Q(IQ(9))-Q(IQ(12)))*TERM12)
      DB2(7)=Q1*(XDF(5)*DUM56-XDF(8)*TERM23)
      DB2(8)=Q1*(YDF(5)*DUM46-YDF(8)*TERM13)
      DB2(9)=Q1*(ZDF(5)*DUM45-ZDF(8)*TERM12)
      DB2(10)=Q1*(XDF(8)*DUM23-XDF(5)*TERM23)
      DB2(11)=Q1*(YDF(8)*DUM13-YDF(5)*TERM13)
      DB2(12)=Q1*(ZDF(8)*DUM12-ZDF(5)*TERM12)
C***********************************************************
C                                                          *
C   CALCULATION OF DERIVATIVES FOR TRMC(1)                 *
C                                                          *
C***********************************************************
      DC1(1)=ZDF(2)*YDF(7)-YDF(2)*ZDF(7)
      DC1(2)=XDF(2)*ZDF(7)-ZDF(2)*XDF(7)
      DC1(3)=YDF(2)*XDF(7)-XDF(2)*YDF(7)
      DC1(4)=YDF(1)*ZDF(7)-ZDF(1)*YDF(7)
      DC1(5)=ZDF(1)*XDF(7)-XDF(1)*ZDF(7)
      DC1(6)=XDF(1)*YDF(7)-YDF(1)*XDF(7)
      DC1(10)=-YDF(1)*Q(IQ(6))+YDF(2)*Q(IQ(3))-YDF(3)*Q(IQ(15))
      DC1(11)=XDF(1)*Q(IQ(6))-XDF(2)*Q(IQ(3))+XDF(3)*Q(IQ(15))
      DC1(12)=-XDF(1)*Q(IQ(5))+XDF(2)*Q(IQ(2))-XDF(3)*Q(IQ(14))
      DC1(13)=YDF(3)*ZDF(7)-ZDF(3)*YDF(7)-DC1(10)
      DC1(14)=ZDF(3)*XDF(7)-XDF(3)*ZDF(7)-DC1(11)
      DC1(15)=XDF(3)*YDF(7)-YDF(3)*XDF(7)-DC1(12)
      DO 614 I=1,15
         DC1(I)=DC1(I)*SGN3
  614 CONTINUE
C***********************************************************
C                                                          *
C   CALCULATION OF DERIVATIVES FOR TRMC(2)                 *
C   NOTE: WE DO NOT NEED TO RECOMPUTE DUM4, DUM5, DUM6,    *
C         DUM45, DUM46, DUM56                              *
C                                                          *
C***********************************************************
      Q1=1.0D0/TRMC(2)
      DUM1=XDF(3)**2
      DUM2=YDF(3)**2
      DUM3=ZDF(3)**2
      TERM1=XDF(3)*XDF(8)
      TERM2=YDF(3)*YDF(8)
      TERM3=ZDF(3)*ZDF(8)
      DUM12=DUM1+DUM2
      DUM13=DUM1+DUM3
      DUM23=DUM2+DUM3
      TERM12=TERM1+TERM2
      TERM13=TERM1+TERM3
      TERM23=TERM2+TERM3
      DC2(1)=-Q1*(XDF(3)*DUM56+XDF(8)*DUM23
     +      +(2.0D0*Q(IQ(1))-Q(IQ(4))-Q(IQ(10)))*TERM23)
      DC2(2)=-Q1*(YDF(3)*DUM46+YDF(8)*DUM13
     +      +(2.0D0*Q(IQ(2))-Q(IQ(5))-Q(IQ(11)))*TERM13)
      DC2(3)=-Q1*(ZDF(3)*DUM45+ZDF(8)*DUM12
     +      +(2.0D0*Q(IQ(3))-Q(IQ(6))-Q(IQ(12)))*TERM12)
      DC2(4)=Q1*(XDF(3)*DUM56-XDF(8)*TERM23)
      DC2(5)=Q1*(YDF(3)*DUM46-YDF(8)*TERM13)
      DC2(6)=Q1*(ZDF(3)*DUM45-ZDF(8)*TERM12)
      DC2(10)=Q1*(XDF(8)*DUM23-XDF(3)*TERM23)
      DC2(11)=Q1*(YDF(8)*DUM13-YDF(3)*TERM13)
      DC2(12)=Q1*(ZDF(8)*DUM12-ZDF(3)*TERM12)
C***********************************************************
C                                                          *
C   CALCULATION OF DERIVATIVES FOR TRMD(1)                 *
C                                                          *
C***********************************************************
      FACT=1.0D0/SGN3
      DD1(1)=YDF(2)*ZDF(4)-ZDF(2)*YDF(4)
      DD1(2)=ZDF(2)*XDF(4)-XDF(2)*ZDF(4)
      DD1(3)=XDF(2)*YDF(4)-YDF(2)*XDF(4)
      DD1(4)=ZDF(1)*YDF(4)-YDF(1)*ZDF(4)
      DD1(5)=XDF(1)*ZDF(4)-ZDF(1)*XDF(4)
      DD1(6)=YDF(1)*XDF(4)-XDF(1)*YDF(4)
      DD1(7)=-DC1(10)*FACT
      DD1(8)=-DC1(11)*FACT
      DD1(9)=-DC1(12)*FACT
      DD1(13)=ZDF(3)*YDF(4)-YDF(3)*ZDF(4)+DC1(10)*FACT
      DD1(14)=XDF(3)*ZDF(4)-ZDF(3)*XDF(4)+DC1(11)*FACT
      DD1(15)=YDF(3)*XDF(4)-XDF(3)*YDF(4)+DC1(12)*FACT
      DO 616 I=1,15
         DD1(I)=DD1(I)*SGN4
  616 CONTINUE
C***********************************************************
C                                                          *
C   CALCULATION OF DERIVATIVES FOR TRMD(2)                 *
C   NOTE:  WE NEED NOT RECOMPUTE DUM1, DUM2, DUM3,         *
C          DUM12, DUM13, DUM23                             *
C                                                          *
C***********************************************************
      Q1=1.0D0/TRMD(2)
      DUM4=XDF(5)**2
      DUM5=YDF(5)**2
      DUM6=ZDF(5)**2
      TERM1=XDF(3)*XDF(5)
      TERM2=YDF(3)*YDF(5)
      TERM3=ZDF(3)*ZDF(5)
      DUM45=DUM4+DUM5
      DUM46=DUM4+DUM6
      DUM56=DUM5+DUM6
      TERM12=TERM1+TERM2
      TERM13=TERM1+TERM3
      TERM23=TERM2+TERM3
      DD2(1)=-Q1*(XDF(3)*DUM56+XDF(5)*DUM23
     +      +(2.0D0*Q(IQ(1))-Q(IQ(4))-Q(IQ(7)))*TERM23)
      DD2(2)=-Q1*(YDF(3)*DUM46+YDF(5)*DUM13
     +      +(2.0D0*Q(IQ(2))-Q(IQ(5))-Q(IQ(8)))*TERM13)
      DD2(3)=-Q1*(ZDF(3)*DUM45+ZDF(5)*DUM12
     +      +(2.0D0*Q(IQ(3))-Q(IQ(6))-Q(IQ(9)))*TERM12)
      DD2(4)=Q1*(XDF(3)*DUM56-XDF(5)*TERM23)
      DD2(5)=Q1*(YDF(3)*DUM46-YDF(5)*TERM13)
      DD2(6)=Q1*(ZDF(3)*DUM45-ZDF(5)*TERM12)
      DD2(7)=Q1*(XDF(5)*DUM23-XDF(3)*TERM23)
      DD2(8)=Q1*(YDF(5)*DUM13-YDF(3)*TERM13)
      DD2(9)=Q1*(ZDF(5)*DUM12-ZDF(3)*TERM12)
C***********************************************************
C                                                          *
C   WE ARE NOW READY TO COMPUTE DV/DQ FOR THE OUT-OF-PLANE *
C   BEND.  TO DO THIS WE NEED D(DELTA(I,J))/DXI AND        *
C   DS3/SXI.                                               *
C                                                          *
C   BEGIN MAIN LOOP FOR OUT-OF-PLANE BEND CALCULATION      *
C                                                          *
C***********************************************************
      DO 700 I=1,3
C***********************************************************
C                                                          *
C   FIRST COMPUTE THE DERIVATIVE OF THE S3 SWITCHING       *
C   FUNCTION FOR BONDS 1, 2, 3, 4                          *
C                                                          *
C***********************************************************
         DO 620 K=1,4
            L=I+3*(K-1)
            D1=1.0D0/R(IB(K))
            D2=R0(NL,K)*D1
            TERM1=(1.0D0-S3(K))**2-1.0D0
            TERM2=A3*RC(L)*D1*(R(IB(K))-B3)**C3
            TERM3=C3*A3*RC(L)*(R(IB(K))-B3)**(C3-1.0D0)*(1.0D0-D2)
            DS3(K)=TERM1*(TERM2+TERM3)
  620    CONTINUE
C************************************************************
C                                                           *
C   NOW CALCULATE THE DERIVATIVES USING THE QUANTITIES      *
C   TRMA, TRMB, TRMC, TRMD, F1, F2, F3, F4 AND THEIR        *
C   DERIVATIVES.  WE USE THE ARRAYS DUMA AND DUMT TO        *
C   HOLD CALCULATED QUANTITIES WHICH WILL BE USED           *
C   REPETITIVELY.                                           *
C                                                           *
C************************************************************
         DO 625 K=1,6
            DUMA(K)=-1.0D0/DSQRT(1.0D0-CDLTA(K)**2)
            DUMT(K)=-1.0D0/DSQRT(1.0D0-CDLTA(K+6)**2)
  625    CONTINUE
         DERV(1,1)=-DS3(1)*S3(2)*S3(3)*S3(4)
         DERV(1,2)=(1.0D0-S3(2))*DS3(1)*S3(3)*S3(4)
         DERV(1,3)=(1.0D0-S3(3))*DS3(1)*S3(2)*S3(4)
         DERV(1,4)=(1.0D0-S3(4))*DS3(1)*S3(2)*S3(3)
         DERV(2,1)=(1.0D0-S3(1))*DS3(2)*S3(3)*S3(4)
         DERV(2,2)=-DS3(2)*S3(1)*S3(3)*S3(4)
         DERV(2,3)=(1.0D0-S3(3))*DS3(2)*S3(1)*S3(4)
         DERV(2,4)=(1.0D0-S3(4))*DS3(2)*S3(1)*S3(3)
         DERV(3,1)=(1.0D0-S3(1))*DS3(3)*S3(2)*S3(4)
         DERV(3,2)=(1.0D0-S3(2))*DS3(3)*S3(1)*S3(4)
         DERV(3,3)=-DS3(3)*S3(1)*S3(2)*S3(4)
         DERV(3,4)=(1.0D0-S3(4))*DS3(3)*S3(1)*S3(2)
         DERV(4,1)=(1.0D0-S3(1))*DS3(4)*S3(2)*S3(3)
         DERV(4,2)=(1.0D0-S3(2))*DS3(4)*S3(1)*S3(3)
         DERV(4,3)=(1.0D0-S3(3))*DS3(4)*S3(1)*S3(2)
         DERV(4,4)=-DS3(4)*S3(1)*S3(2)*S3(3)
         DERV(5,1)=DS3(1)*S3(2)*S3(3)*S3(4)
     *             -(1.0D0-S3(1))*DS3(2)*S3(3)*S3(4)
     *             -(1.0D0-S3(1))*S3(2)*DS3(3)*S3(4)
     *             -(1.0D0-S3(1))*S3(2)*S3(3)*DS3(4)
         DERV(5,2)=DS3(2)*S3(1)*S3(3)*S3(4)
     *             -(1.0D0-S3(2))*DS3(1)*S3(3)*S3(4)
     *             -(1.0D0-S3(2))*S3(1)*DS3(3)*S3(4)
     *             -(1.0D0-S3(2))*S3(1)*S3(3)*DS3(4)
         DERV(5,3)=DS3(3)*S3(1)*S3(2)*S3(4)
     *             -(1.0D0-S3(3))*DS3(1)*S3(2)*S3(4)
     *             -(1.0D0-S3(3))*S3(1)*DS3(2)*S3(4)
     *             -(1.0D0-S3(3))*S3(1)*S3(2)*DS3(4)
         DERV(5,4)=DS3(4)*S3(1)*S3(2)*S3(3)
     *             -(1.0D0-S3(4))*DS3(1)*S3(2)*S3(3)
     *             -(1.0D0-S3(4))*S3(1)*DS3(2)*S3(3)
     *             -(1.0D0-S3(4))*S3(1)*S3(2)*DS3(3)
         DO 650 J=1,5
            L=I+3*(J-1)
            DUM1=TRMA(2)*R(IB(2))
            DUM2=TRMA(2)*R(IB(3))
            DUM3=TRMA(2)*R(IB(4))
            SQ1=1.0D0/DUM1**2
            SQ2=1.0D0/DUM2**2
            SQ3=1.0D0/DUM3**2
            TERM1=DA1(L)*DUM1
            TERM2=TRMA(1)*(DA2(L)*R(IB(2))+TRMA(2)*DFN2(L))
            DANG1(1)=DUMA(1)*SQ1*(TERM1-TERM2)-OUTPL(L,1)
            TERM1=DA1(L)*DUM2
            TERM2=TRMA(1)*(DA2(L)*R(IB(3))+TRMA(2)*DFN3(L))
            DANG1(2)=DUMA(2)*SQ2*(TERM1-TERM2)-OUTPL(L,2)
            TERM1=DA1(L)*DUM3
            TERM2=TRMA(1)*(DA2(L)*R(IB(4))+TRMA(2)*DFN4(L))
            DANG1(3)=DUMA(3)*SQ3*(TERM1-TERM2)-OUTPL(L,3)
            DUM1=TRMB(2)*R(IB(1))
            DUM2=TRMB(2)*R(IB(3))
            DUM3=TRMB(2)*R(IB(4))
            SQ1=1.0D0/DUM1**2
            SQ2=1.0D0/DUM2**2
            SQ3=1.0D0/DUM3**2
            TERM1=DB1(L)*DUM1
            TERM2=TRMB(1)*(DB2(L)*R(IB(1))+TRMB(2)*DFN1(L))
            DANG1(4)=DUMA(4)*SQ1*(TERM1-TERM2)-OUTPL(L,1)
            TERM1=DB1(L)*DUM2
            TERM2=TRMB(1)*(DB2(L)*R(IB(3))+TRMB(2)*DFN3(L))
            DANG1(5)=DUMA(5)*SQ2*(TERM1-TERM2)-OUTPL(L,4)
            TERM1=DB1(L)*DUM3
            TERM2=TRMB(1)*(DB2(L)*R(IB(4))+TRMB(2)*DFN4(L))
            DANG1(6)=DUMA(6)*SQ3*(TERM1-TERM2)-OUTPL(L,5)
            DUM1=TRMC(2)*R(IB(1))
            DUM2=TRMC(2)*R(IB(2))
            DUM3=TRMC(2)*R(IB(4))
            SQ1=1.0D0/DUM1**2
            SQ2=1.0D0/DUM2**2
            SQ3=1.0D0/DUM3**2
            TERM1=DC1(L)*DUM1
            TERM2=TRMC(1)*(DC2(L)*R(IB(1))+TRMC(2)*DFN1(L))
            DANG1(7)=DUMT(1)*SQ1*(TERM1-TERM2)-OUTPL(L,2)
            TERM1=DC1(L)*DUM2
            TERM2=TRMC(1)*(DC2(L)*R(IB(2))+TRMC(2)*DFN2(L))
            DANG1(8)=DUMT(2)*SQ2*(TERM1-TERM2)-OUTPL(L,4)
            TERM1=DC1(L)*DUM3
            TERM2=TRMC(1)*(DC2(L)*R(IB(4))+TRMC(2)*DFN4(L))
            DANG1(9)=DUMT(3)*SQ3*(TERM1-TERM2)-OUTPL(L,6)
            DUM1=TRMD(2)*R(IB(1))
            DUM2=TRMD(2)*R(IB(2))
            DUM3=TRMD(2)*R(IB(3))
            SQ1=1.0D0/DUM1**2
            SQ2=1.0D0/DUM2**2
            SQ3=1.0D0/DUM3**2
            TERM1=DD1(L)*DUM1
            TERM2=TRMD(1)*(DD2(L)*R(IB(1))+TRMD(2)*DFN1(L))
            DANG1(10)=DUMT(4)*SQ1*(TERM1-TERM2)-OUTPL(L,3)
            TERM1=DD1(L)*DUM2
            TERM2=TRMD(1)*(DD2(L)*R(IB(2))+TRMD(2)*DFN2(L))
            DANG1(11)=DUMT(5)*SQ2*(TERM1-TERM2)-OUTPL(L,5)
            TERM1=DD1(L)*DUM3
            TERM2=TRMD(1)*(DD2(L)*R(IB(3))+TRMD(2)*DFN3(L))
            DANG1(12)=DUMT(6)*SQ3*(TERM1-TERM2)-OUTPL(L,6)
C***********************************************************
C                                                          *
C   COMPUTE QUADRATIC TERM DERIVATIVES                     *
C                                                          *
C***********************************************************
            DUM1=FD1(NL,1)*DERV(J,1)*(DLTA(NL,2)+DLTA(NL,6)+DLTA(NL,10))
            DUM2=FD1(NL,2)*DERV(J,2)*(DLTA(NL,14)
     *           +DLTA(NL,18)+DLTA(NL,22))
            DUM3=FD1(NL,3)*DERV(J,3)*(DLTA(NL,26)
     *           +DLTA(NL,30)+DLTA(NL,34))
            DUM4=FD1(NL,4)*DERV(J,4)*(DLTA(NL,38)
     *           +DLTA(NL,42)+DLTA(NL,46))
            TERM1=DUM1+DUM2+DUM3+DUM4
            DUM1=FD(NL,1)*(DLTA(NL,1)*DANG1(1)+DLTA(NL,5)*DANG1(2)
     *           +DLTA(NL,9)*DANG1(3))
            DUM2=FD(NL,2)*(DLTA(NL,13)*DANG1(4)+DLTA(NL,17)*DANG1(5)
     *           +DLTA(NL,21)*DANG1(6))
            DUM3=FD(NL,3)*(DLTA(NL,25)*DANG1(7)+DLTA(NL,29)*DANG1(8)
     *           +DLTA(NL,33)*DANG1(9))
            DUM4=FD(NL,4)*(DLTA(NL,37)*DANG1(10)+DLTA(NL,41)*DANG1(11)
     *           +DLTA(NL,45)*DANG1(12))
            PDOT(IQ(L))=PDOT(IQ(L))+TERM1
     *                  +2.0D0*(DUM1+DUM2+DUM3+DUM4)
C***********************************************************
C                                                          *
C   COMPUTE QUARTIC TERM DERIVATIVES                       *
C                                                          *
C***********************************************************
            DUM1=HD1(NL,1)*DERV(J,1)*(DLTA(NL,4)+DLTA(NL,8)+DLTA(NL,12))
            DUM2=HD1(NL,2)*DERV(J,2)*(DLTA(NL,16)
     *           +DLTA(NL,20)+DLTA(NL,24))
            DUM3=HD1(NL,3)*DERV(J,3)*(DLTA(NL,28)
     *           +DLTA(NL,32)+DLTA(NL,36))
            DUM4=HD1(NL,4)*DERV(J,4)*(DLTA(NL,40)
     *           +DLTA(NL,44)+DLTA(NL,48))
            TERM1=DUM1+DUM2+DUM3+DUM4
            DUM1=HD(NL,1)*(DLTA(NL,3)*DANG1(1)+DLTA(NL,7)*DANG1(2)
     *           +DLTA(NL,11)*DANG1(3))
            DUM2=HD(NL,2)*(DLTA(NL,15)*DANG1(4)+DLTA(NL,19)*DANG1(5)
     *           +DLTA(NL,23)*DANG1(6))
            DUM3=HD(NL,3)*(DLTA(NL,27)*DANG1(7)+DLTA(NL,31)*DANG1(8)
     *           +DLTA(NL,35)*DANG1(9))
            DUM4=HD(NL,4)*(DLTA(NL,39)*DANG1(10)+DLTA(NL,43)*DANG1(11)
     *           +DLTA(NL,47)*DANG1(12))
            PDOT(IQ(L))=PDOT(IQ(L))+TERM1
     *                  +4.0D0*(DUM1+DUM2+DUM3+DUM4)
C***********************************************************
C                                                          *
C   CALL THE NON-DIAGONAL CUBIC SUBROUTINE TO COMPUTE      *
C   THE NON-DIAGONAL CUBIC DERIVATIVES                     *
C                                                          *
C***********************************************************
            CALL CUBEND(NL,I,J,DERV2)
            PDOT(IQ(L))=PDOT(IQ(L))+DERV2
  650    CONTINUE
  700 CONTINUE
      RETURN
      END
C
      SUBROUTINE CUBEND(NL,N1,N2,D)
      PARAMETER(ND1=100,NDP=10)
C***********************************************************
C                                                          *
C   THIS SUBROUTINE COMPUTES THE DERIVATIVES OF THE        *
C   NON-DIAGONAL CUBIC TERMS OF THE CH4 POTENTIAL          *
C                                                          *
C***********************************************************
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/ Q(3*ND1),PDOT(3*ND1)
      COMMON/COORS/ R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      COMMON/FORCES/ N,I3N,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      COMMON/TETRAB/ N9I(20),N9J(20),N9K(20),N9L(20),N9M(20),
     *               FT0(20,6),FT2(20,6),GT0(20,6),GT2(20,6),
     *               HT0(20,6),HT2(20,6),THT(20,6),R0(20,4),
     *               THT1(20,6),THT2(20,6),FD1(20,4),
     *               HD1(20,4),GN0(20,5),FT(20,6),GT(20,6),
     *               HT(20,6),FD(20,4),HD(20,4),DLTA(20,48),
     *               TETTST,SGN1,SGN2,SGN3,SGN4
      COMMON/CUBEB/ S3(4),DS3(4),CBIC(15,6),ANG1(20,6,4),GN4(20)
      DIMENSION DGNDX(10)
C***********************************************************
C                                                          *
C   CALCULATE THE NON-DAIGONAL CUBIC FORCE CONSTANT        *
C                                                          *
C***********************************************************
      GN4(NL)=S3(1)*S3(2)*S3(3)*S3(4)*GN0(NL,4)
C***********************************************************
C                                                          *
C   CALCULATE DGN4/DXI                                     *
C                                                          *
C***********************************************************
      DGNDX(1)=DS3(1)*S3(2)*S3(3)*S3(4)*GN0(NL,4)
      DGNDX(2)=S3(1)*DS3(2)*S3(3)*S3(4)*GN0(NL,4)
      DGNDX(3)=S3(1)*S3(2)*DS3(3)*S3(4)*GN0(NL,4)
      DGNDX(4)=S3(1)*S3(2)*S3(3)*DS3(4)*GN0(NL,4)
      DGN4=0
      IF (N2.GT.4) THEN
         DO 100 I=1,4
            DGN4=DGN4-DGNDX(I)
  100    CONTINUE
      ELSE
         DGN4=DGNDX(N2)
      ENDIF
      DUM1=ANG1(NL,2,1)*ANG1(NL,4,1)+ANG1(NL,3,1)*ANG1(NL,5,1)
      DUM2=ANG1(NL,1,1)*ANG1(NL,4,1)+ANG1(NL,3,1)*ANG1(NL,6,1)
      DUM3=ANG1(NL,1,1)*ANG1(NL,5,1)+ANG1(NL,2,1)*ANG1(NL,6,1)
      DUM4=ANG1(NL,1,1)*ANG1(NL,2,1)+ANG1(NL,5,1)*ANG1(NL,6,1)
      DUM5=ANG1(NL,3,1)*ANG1(NL,1,1)+ANG1(NL,4,1)*ANG1(NL,6,1)
      DUM6=ANG1(NL,3,1)*ANG1(NL,2,1)+ANG1(NL,5,1)*ANG1(NL,4,1)
      DUM7=ANG1(NL,1,1)*ANG1(NL,2,1)*ANG1(NL,4,1)
      DUM8=ANG1(NL,3,1)*ANG1(NL,1,1)*ANG1(NL,5,1)
      DUM9=ANG1(NL,3,1)*ANG1(NL,2,1)*ANG1(NL,6,1)
      DUM10=ANG1(NL,5,1)*ANG1(NL,4,1)*ANG1(NL,6,1)
      L=N1+3*(N2-1)
      D=DGN4*(DUM7+DUM8+DUM9+DUM10)
     +    +GN4(NL)*(CBIC(L,1)*DUM1+CBIC(L,2)*DUM2
     +         +CBIC(L,3)*DUM3+CBIC(L,4)*DUM4
     +         +CBIC(L,5)*DUM5+CBIC(L,6)*DUM6)
      RETURN
      END
C
C         CALCULATE NON DIAGONAL STRETCH-STRETCH POTENTIAL
C         ENERGY DERIVATIVES
C
      SUBROUTINE VRR(NL)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/COORS/R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      COMMON/FORCES/N,I3N,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      COMMON/VRRB/FKRRZ(100),FKRR(100),CIJ(100),CKL(100),RIJ0(100),
     *            RKL0(100),N10I(100),N10J(100),N10K(100),N10L(100)
C
C         R-R COUPLING  BOND RIJ TO RKL
C         INDEX REQUIRMENTS   I < J   AND   K < L
C         EACH DISTANCE MUST ALREADY BE COMPUTED
C
C         COMPUTE X, Y, Z INDECIES
C
      MI=N10I(NL)
      MJ=N10J(NL)
      MK=N10K(NL)
      ML=N10L(NL)
      IZ=MI*3
      JZ=MJ*3
      KZ=MK*3
      LZ=ML*3
      IY=IZ-1
      JY=JZ-1
      KY=KZ-1
      LY=LZ-1
      IX=IY-1
      JX=JY-1
      KX=KY-1
      LX=LY-1
C
C         INDEX FOR RELATIVE R'S
C
      IJ=(MI-1)*(2*N-MI)/2+MJ-MI
      KL=(MK-1)*(2*N-MK)/2+ML-MK
C
C         RECOMPUTE THE RELATIVE VECTOR (WASN'T SAVED)
C         AND COMPUTE SOME QUANTITIES
C
      X1=Q(IX)-Q(JX)
      Y1=Q(IY)-Q(JY)
      Z1=Q(IZ)-Q(JZ)
      X2=Q(KX)-Q(LX)
      Y2=Q(KY)-Q(LY)
      Z2=Q(KZ)-Q(LZ)
      R1=R(IJ)-RIJ0(NL)
      R2=R(KL)-RKL0(NL)
C
C         CALCULATE THE SWITCHING FUNCTIONS
C         AND THE FORCE CONSTANT
C
      SR1=0.0D0
      DUM1=CIJ(NL)*R1**2
      IF (DUM1.LE.85.0D0) THEN 
         SR1=1.0D0
         IF (CIJ(NL).GT.0.0D0.AND.R1.GT.0.0D0) SR1=DEXP(-DUM1)
      ENDIF
      SR2=0.0D0
      DUM2=CKL(NL)*R2**2
C
      IF (DUM2.LE.85.0D0) THEN
         SR2=1.0D0
         IF (CKL(NL).GT.0.0D0.AND.R2.GT.0.0D0) SR2=DEXP(-DUM2)
      ENDIF
      FKRR(NL)=SR1*SR2*FKRRZ(NL)
C
C         CALCULATE   DV/DQ
C
      DUM=FKRR(NL)*R2/R(IJ)
      DUMX=DUM*X1
      DUMY=DUM*Y1
      DUMZ=DUM*Z1
      PDOT(IX) = PDOT(IX) + DUMX
      PDOT(IY) = PDOT(IY) + DUMY
      PDOT(IZ) = PDOT(IZ) + DUMZ
      PDOT(JX) = PDOT(JX) - DUMX
      PDOT(JY) = PDOT(JY) - DUMY
      PDOT(JZ) = PDOT(JZ) - DUMZ
      IF (CIJ(NL).GE.0.0D0.AND.R1.GE.0.0D0) THEN
         DUM11=FKRR(NL)*R1*R2/R(IJ)
         DUMXX=-2.0D0*CIJ(NL)*R1*X1
         DUMYY=-2.0D0*CIJ(NL)*R1*Y1
         DUMZZ=-2.0D0*CIJ(NL)*R1*Z1
         PDOT(IX) = PDOT(IX) + DUM11*DUMXX
         PDOT(IY) = PDOT(IY) + DUM11*DUMYY
         PDOT(IZ) = PDOT(IZ) + DUM11*DUMZZ
         PDOT(JX) = PDOT(JX) - DUM11*DUMXX
         PDOT(JY) = PDOT(JY) - DUM11*DUMYY
         PDOT(JZ) = PDOT(JZ) - DUM11*DUMZZ
      ENDIF
      DUM=FKRR(NL)*R1/R(KL)
      DUMX=DUM*X2
      DUMY=DUM*Y2
      DUMZ=DUM*Z2
      PDOT(KX) = PDOT(KX) + DUMX
      PDOT(KY) = PDOT(KY) + DUMY
      PDOT(KZ) = PDOT(KZ) + DUMZ
      PDOT(LX) = PDOT(LX) - DUMX
      PDOT(LY) = PDOT(LY) - DUMY
      PDOT(LZ) = PDOT(LZ) - DUMZ
      IF (CKL(NL).GE.0.0D0.AND.R2.GE.0.0D0) THEN
         DUM22=FKRR(NL)*R1*R2/R(KL)
         DUMXX=-2.0D0*CKL(NL)*R2*X2
         DUMYY=-2.0D0*CKL(NL)*R2*Y2
         DUMZZ=-2.0D0*CKL(NL)*R2*Z2
         PDOT(KX) = PDOT(KX) + DUM22*DUMXX
         PDOT(KY) = PDOT(KY) + DUM22*DUMYY
         PDOT(KZ) = PDOT(KZ) + DUM22*DUMZZ
         PDOT(LX) = PDOT(LX) - DUM22*DUMXX
         PDOT(LY) = PDOT(LY) - DUM22*DUMYY
         PDOT(LZ) = PDOT(LZ) - DUM22*DUMZZ
      ENDIF
      RETURN
      END
C
C         CALCULATE NON DIAGONAL STRETCH-BEND POTENTIAL
C         ENERGY DERIVATIVES
C
      SUBROUTINE VRT(NL)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/COORS/R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      COMMON/FORCES/N,I3N,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      COMMON/VRTB/FKRTZ(100),FKRT(100),CRT(100),R110(100),
     *            N11I(100),N11J(100),N11B(100),NRT(100)
      COMMON/BENDB/THETAZ(200),FBZ(200),CJ(200),CK(200),RJZ(200),
     *RKZ(200),FB(200),N3J(200),N3K(200),N3M(200)
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
C
C         ATOM INDECIES
C
      MI=N11I(NL)
      MJ=N11J(NL)
      MK=N3J(N11B(NL))
      ML=N3K(N11B(NL))
      MM=N3M(N11B(NL))
C
C         DISTANCE INDEX
C
      IJ=(MI-1)*(2*N-MI)/2+MJ-MI
      MKX=MK
      MMX=MM
      IF (MK.LT.MM) GOTO 1
      MKX=MM
      MMX=MK
    1 KM=(MKX-1)*(2*N-MKX)/2+MMX-MKX
      MMX=MM
      MLX=ML
      IF (ML.LT.MM) GOTO 2
      MLX=MM
      MMX=ML
    2 LM=(MLX-1)*(2*N-MLX)/2+MMX-MLX
C
C         X,Y,Z INDECIES
C
      IZ=3*MI
      JZ=3*MJ
      KZ=3*MK
      LZ=3*ML
      MZ=3*MM
      IY=IZ-1
      JY=JZ-1
      KY=KZ-1
      LY=LZ-1
      MY=MZ-1
      IX=IY-1
      JX=JY-1
      KX=KY-1
      LX=LY-1
      MX=MY-1
C
C         RE-COMPUTE RELATIVE VECTORS
C
      XIJ=Q(IX)-Q(JX)
      YIJ=Q(IY)-Q(JY)
      ZIJ=Q(IZ)-Q(JZ)
      XKM=Q(KX)-Q(MX)
      YKM=Q(KY)-Q(MY)
      ZKM=Q(KZ)-Q(MZ)
      XLM=Q(LX)-Q(MX)
      YLM=Q(LY)-Q(MY)
      ZLM=Q(LZ)-Q(MZ)
C
C         REDEFINE SWITCHING PARAMETER AND
C         COMPUTE SOME QUANTITIES
C
      CKM=CJ(N11B(NL))
      CLM=CK(N11B(NL))
      CIJ=CRT(NL)
      IF(NRT(NL).EQ.-1) THEN
      CIJ=-DABS(CIJ)
      CKM=-DABS(CKM)
      CLM=-DABS(CLM)
      ELSE
      IF(IJ.EQ.KM) CKM=-DABS(CKM)
      IF(IJ.EQ.LM) CLM=-DABS(CLM)
      ENDIF
      R1=R(IJ)-R110(NL)
      R2=R(KM)-RJZ(N11B(NL))
      R3=R(LM)-RKZ(N11B(NL))
C
C         CALCULATE SWITCHING FUNCTION AND FORCE CONSTANTS
C
      SRIJ=0.0D0
      DUM1=CIJ*R1**2
      IF(DUM1.GT.85.0D0)GOTO 10
      SRIJ=1.0D0
      IF(CIJ.GT.0.0D0.AND.R1.GT.0.0D0) SRIJ=DEXP(-DUM1)
   10 CONTINUE
      SRKM=0.0D0
      DUM2=CKM*R2**2
      IF(DUM2.GT.85.0D0)GOTO 20
      SRKM=1.0D0
      IF(CKM.GT.0.0D0.AND.R2.GT.0.0D0) SRKM=DEXP(-DUM2)
   20 CONTINUE
      SRLM=0.0D0
      DUM3=CLM*R3**2
      IF(DUM3.GT.85.0D0)GOTO 30
      SRLM=1.0D0
      IF(CLM.GT.0.0D0.AND.R3.GT.0.0D0) SRLM=DEXP(-DUM3)
   30 CONTINUE
      FKRT(NL)=FKRTZ(NL)*SRIJ*SRKM*SRLM
C
C         DEFINE CONSTANTS
C
      COST=DCOS(THETA(N11B(NL)))
      RS=R(KM)*R(LM)
      RSKM=R(KM)*R(KM)
      RSLM=R(LM)*R(LM)
      RTKM=-COST/RSKM
      RTLM=-COST/RSLM
      TEM0=FKRT(NL)*(THETA(N11B(NL))-THETAZ(N11B(NL)))
      TEM1=TEM0/R(IJ)
      TEM11=-2.0D0*TEM1*R1*R1*CIJ
      TEM21=-2.0D0*CKM*TEM0*R1*R2/R(KM)
      TEM22=-2.0D0*CLM*TEM0*R1*R3/R(LM)
C
C         CALCULATE DV/DQ
C
      DUMX1=TEM1*XIJ
      DUMY1=TEM1*YIJ
      DUMZ1=TEM1*ZIJ
      PDOT(IX)=PDOT(IX)+DUMX1
      PDOT(IY)=PDOT(IY)+DUMY1
      PDOT(IZ)=PDOT(IZ)+DUMZ1
      PDOT(JX)=PDOT(JX)-DUMX1
      PDOT(JY)=PDOT(JY)-DUMY1
      PDOT(JZ)=PDOT(JZ)-DUMZ1
      IF(CIJ.LT.0.0D0.OR.R1.LT.0.0D0)GOTO 40
      DUMX11=TEM11*XIJ
      DUMY11=TEM11*YIJ
      DUMZ11=TEM11*ZIJ
      PDOT(IX)=PDOT(IX)+DUMX11
      PDOT(IY)=PDOT(IY)+DUMY11
      PDOT(IZ)=PDOT(IZ)+DUMZ11
      PDOT(JX)=PDOT(JX)-DUMX11
      PDOT(JY)=PDOT(JY)-DUMY11
      PDOT(JZ)=PDOT(JZ)-DUMZ11
   40 CONTINUE
      IF(CKM.LT.0.0D0.OR.R2.LT.0.0D0) GOTO 50
      DUMX21=TEM21*XKM
      DUMY21=TEM21*YKM
      DUMZ21=TEM21*ZKM
      PDOT(KX)=PDOT(KX)+DUMX21
      PDOT(KY)=PDOT(KY)+DUMY21
      PDOT(KZ)=PDOT(KZ)+DUMZ21
      PDOT(MX)=PDOT(MX)-DUMX21
      PDOT(MY)=PDOT(MY)-DUMY21
      PDOT(MZ)=PDOT(MZ)-DUMZ21
   50 CONTINUE
      IF(CLM.LT.0.0D0.OR.R3.LT.0.0D0) GOTO 60
      DUMX22=TEM22*XLM
      DUMY22=TEM22*YLM
      DUMZ22=TEM22*ZLM
      PDOT(LX)=PDOT(LX)+DUMX22
      PDOT(LY)=PDOT(LY)+DUMY22
      PDOT(LZ)=PDOT(LZ)+DUMZ22
      PDOT(MX)=PDOT(MX)-DUMX22
      PDOT(MY)=PDOT(MY)-DUMY22
      PDOT(MZ)=PDOT(MZ)-DUMZ22
   60 CONTINUE
C
      IF (DABS(THETA(N11B(NL))-PI).GT.0.1D0) THEN
      TEM2=-FKRT(NL)*R1/DSQRT(1.0D0-COST*COST)
      DUMX2=TEM2*(XLM/RS+RTKM*XKM)
      DUMY2=TEM2*(YLM/RS+RTKM*YKM)
      DUMZ2=TEM2*(ZLM/RS+RTKM*ZKM)
      PDOT(KX)=PDOT(KX)+DUMX2
      PDOT(KY)=PDOT(KY)+DUMY2
      PDOT(KZ)=PDOT(KZ)+DUMZ2
      PDOT(MX)=PDOT(MX)-DUMX2
      PDOT(MY)=PDOT(MY)-DUMY2
      PDOT(MZ)=PDOT(MZ)-DUMZ2
      DUMX3=TEM2*(XKM/RS+RTLM*XLM)
      DUMY3=TEM2*(YKM/RS+RTLM*YLM)
      DUMZ3=TEM2*(ZKM/RS+RTLM*ZLM)
      PDOT(LX)=PDOT(LX)+DUMX3
      PDOT(LY)=PDOT(LY)+DUMY3
      PDOT(LZ)=PDOT(LZ)+DUMZ3
      PDOT(MX)=PDOT(MX)-DUMX3
      PDOT(MY)=PDOT(MY)-DUMY3
      PDOT(MZ)=PDOT(MZ)-DUMZ3
      ELSE
      DNRMW=DSQRT(XKM*XKM+YKM*YKM+ZKM*ZKM)
      DWX=-XKM/DNRMW
      DWY=-YKM/DNRMW
      DWZ=-ZKM/DNRMW
      DVX0=(ZKM*YLM-YKM*ZLM)/R(KM)
      DVY0=(XKM*ZLM-ZKM*XLM)/R(KM)
      DVZ0=(YKM*XLM-XKM*YLM)/R(KM)
      DNRMV=DSQRT(DVX0*DVX0+DVY0*DVY0+DVZ0*DVZ0)
      DVX=DVX0/DNRMV
      DVY=DVY0/DNRMV
      DVZ=DVZ0/DNRMV
      DUX0=DVY*DWZ-DVZ*DWY
      DUY0=DVZ*DWX-DVX*DWZ
      DUZ0=DVX*DWY-DVY*DWX
      DNRMU=DSQRT(DUX0*DUX0+DUY0*DUY0+DUZ0*DUZ0)
      DUX=DUX0/DNRMU
      DUY=DUY0/DNRMU
      DUZ=DUZ0/DNRMU
C
C         CALCULATE NON-ZERO DV/DQ IN
C         LOCAL COORDINATE SYSTEM (U,V,W)
C
      DUM4=THETA(N11B(NL))-PI
      DUMUK=-1.0D0/R(KM)
      DUMUL=-(1.0D0-0.5D0*DUM4*DUM4+DUM4**4/2.4D1-DUM4**6/7.2D2)
      DUMUL=DUMUL/R(LM)
      DUMUM=-(DUMUK+DUMUL)
      DUMWK=0.0D0
      DUMWL=-(1.0D0-DUM4*DUM4/6.0D0+DUM4**4/1.2D2)*DUM4/R(LM)
      DUMWM=-(DUMWK+DUMWL)
C
      TEM3=FKRT(NL)*R1
      PDOT(KX)=PDOT(KX)+(DUX*DUMUK+DWX*DUMWK)*TEM3
      PDOT(KY)=PDOT(KY)+(DUY*DUMUK+DWY*DUMWK)*TEM3
      PDOT(KZ)=PDOT(KZ)+(DUZ*DUMUK+DWZ*DUMWK)*TEM3
      PDOT(LX)=PDOT(LX)+(DUX*DUMUL+DWX*DUMWL)*TEM3
      PDOT(LY)=PDOT(LY)+(DUY*DUMUL+DWY*DUMWL)*TEM3
      PDOT(LZ)=PDOT(LZ)+(DUZ*DUMUL+DWZ*DUMWL)*TEM3
      PDOT(MX)=PDOT(MX)+(DUX*DUMUM+DWX*DUMWM)*TEM3
      PDOT(MY)=PDOT(MY)+(DUY*DUMUM+DWY*DUMWM)*TEM3
      PDOT(MZ)=PDOT(MZ)+(DUZ*DUMUM+DWZ*DUMWM)*TEM3
      ENDIF
C
      RETURN
      END
C
C         CALCULATE NON DIAGONAL BEND-BEND POTENTIAL
C         ENERGY DERIVATIVES
C
      SUBROUTINE VTT(NL)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER(ND1=100,NDP=10)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/COORS/R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      COMMON/BENDB/THETAZ(200),FBZ(200),CJ(200),CK(200),RJZ(200),
     *RKZ(200),FB(200),N3J(200),N3K(200),N3M(200)
      COMMON/VTTB/FKTTZ(100),FKTT(100),N12B(100),N12BB(100),NTT(100)
      COMMON/FORCES/N,I3N,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
C
C       ATOM AND COORDINATE INDICES
C
      IJ=N3J(N12B(NL))
      IK=N3K(N12B(NL))
      IM=N3M(N12B(NL))
      IJJ=N3J(N12BB(NL))
      IKK=N3K(N12BB(NL))
      IMM=N3M(N12BB(NL))
      J3=3*IJ
      J2=J3-1
      J1=J3-2
      K3=3*IK
      K2=K3-1
      K1=K3-2
      M3=3*IM
      M2=M3-1
      M1=M3-2
      JJ3=3*IJJ
      JJ2=JJ3-1
      JJ1=JJ3-2
      KK3=3*IKK
      KK2=KK3-1
      KK1=KK3-2
      MM3=3*IMM
      MM2=MM3-1
      MM1=MM3-2
C
C       CALCULATE RELATIVE INDICES FOR R'S.
C
      IF (IM.GT.IK) THEN
         KM=(IK-1)*(2*N-IK)/2+IM-IK
      ELSE
         KM=(IM-1)*(2*N-IM)/2+IK-IM
      ENDIF
      IF (IM.GT.IJ) THEN
         JM=(IJ-1)*(2*N-IJ)/2+IM-IJ
      ELSE
         JM=(IM-1)*(2*N-IM)/2+IJ-IM
      ENDIF
      IF (IMM.GT.IKK) THEN
         KKMM=(IKK-1)*(2*N-IKK)/2+IMM-IKK
      ELSE
         KKMM=(IMM-1)*(2*N-IMM)/2+IKK-IMM
      ENDIF
      IF (IMM.GT.IJJ) THEN
         JJMM=(IJJ-1)*(2*N-IJJ)/2+IMM-IJJ
      ELSE
         JJMM=(IMM-1)*(2*N-IMM)/2+IJJ-IMM
      ENDIF
C
C      CALCULATE RELATIVE COORDINATES
C
      T1=Q(J1)-Q(M1)
      T2=Q(J2)-Q(M2)
      T3=Q(J3)-Q(M3)
      T4=Q(K1)-Q(M1)
      T5=Q(K2)-Q(M2)
      T6=Q(K3)-Q(M3)
      TT1=Q(JJ1)-Q(MM1)
      TT2=Q(JJ2)-Q(MM2)
      TT3=Q(JJ3)-Q(MM3)
      TT4=Q(KK1)-Q(MM1)
      TT5=Q(KK2)-Q(MM2)
      TT6=Q(KK3)-Q(MM3)
C
C       CALCULATE ANGLES
C
      CTHETA=(T1*T4+T2*T5+T3*T6)/(R(KM)*R(JM))
      IF (CTHETA.GE.1.00D0) THEN
         CTHETA=1.D0
         THETA(N12B(NL))=0.D0
      ELSEIF (CTHETA.LE.-1.00D0) THEN
         CTHETA=-1.D0
         THETA(N12B(NL))=PI
      ELSE
         THETA(N12B(NL))=DACOS(CTHETA)
      ENDIF
      CTTHTA=(TT1*TT4+TT2*TT5+TT3*TT6)/(R(KKMM)*R(JJMM))
      IF (CTTHTA.GE.1.00D0) THEN
         CTTHTA=1.00D0
         THETA(N12BB(NL))=0.D0
      ELSEIF (CTTHTA.LE.-1.00D0) THEN
         CTTHTA=-1.00D0
         THETA(N12BB(NL))=PI
      ELSE
         THETA(N12BB(NL))=DACOS(CTTHTA)
      ENDIF
C
C     REDEFINE SWITCHING PARAMETERS
C
      CJJM=CJ(N12B(NL))
      CKKM=CK(N12B(NL))
      CJJJMM=CJ(N12BB(NL))
      CKKKMM=CK(N12BB(NL))
C
      IF (NTT(NL).EQ.-1) THEN
         CJJM=-DABS(CJJM)
         CKKM=-DABS(CKKM)
         CJJJMM=-DABS(CJJJMM)
         CKKKMM=-DABS(CKKKMM)
      ELSE
         IF (JM.EQ.JJMM.OR.JM.EQ.KKMM) CJJM = -DABS(CJJM)
         IF (KM.EQ.JJMM.OR.KM.EQ.KKMM) CKKM = -DABS(CKKM)
      ENDIF
C
C       CALCULATE SWITCHING FUNCTIONS AND FORCE CONTANTS
C
      SRJ=1.0D0
      IF (CJJM.GT.0.0D0) THEN
         DUM1=R(JM)-RJZ(N12B(NL))
         IF (DUM1.GT.0.0D0) SRJ=DEXP(-CJJM*DUM1**2)
      ENDIF
      SRK=1.0D0
      IF (CKKM.GT.0.0D0) THEN
         DUM1=R(KM)-RKZ(N12B(NL))
         IF (DUM1.GT.0.0D0) SRK=DEXP(-CKKM*DUM1**2)
      ENDIF
      SRJJ=1.0D0
      IF (CJJJMM.GT.0.0D0) THEN
         DUM1=R(JJMM)-RJZ(N12BB(NL))
         IF (DUM1.GT.0.0D0) SRJJ=DEXP(-CJJJMM*DUM1**2)
      ENDIF
      SRKK=1.0D0
      IF (CKKKMM.GT.0.0D0) THEN
         DUM1=R(KKMM)-RKZ(N12BB(NL))
         IF (DUM1.GT.0.0D0) SRKK=DEXP(-CKKKMM*DUM1**2)
      ENDIF
      FKTT(NL)=SRJ*SRK*SRJJ*SRKK*FKTTZ(NL)
C
C       DEFINE CONSTANTS
C
      DUM3=THETA(N12B(NL))-THETAZ(N12B(NL))
      DUM33=THETA(N12BB(NL))-THETAZ(N12BB(NL))
      TEM0=2.0D0*FKTT(NL)*DUM3*DUM33
      TEM1=FKTT(NL)*DUM3/DSQRT(1-CTTHTA*CTTHTA)
      TEM2=FKTT(NL)*DUM33/DSQRT(1-CTHETA*CTHETA)
C
C       CALCULATE (DV/DQ)
C
      TRKJ=1.D0/(R(KM)*R(JM))
      TRKK=1.D0/(R(KM)*R(KM))
      TRJJ=1.D0/(R(JM)*R(JM))
      PDOT(J1)=PDOT(J1)-TEM2*(T4*TRKJ-CTHETA*T1*TRJJ)
      PDOT(J2)=PDOT(J2)-TEM2*(T5*TRKJ-CTHETA*T2*TRJJ)
      PDOT(J3)=PDOT(J3)-TEM2*(T6*TRKJ-CTHETA*T3*TRJJ)
      PDOT(K1)=PDOT(K1)-TEM2*(T1*TRKJ-CTHETA*T4*TRKK)
      PDOT(K2)=PDOT(K2)-TEM2*(T2*TRKJ-CTHETA*T5*TRKK)
      PDOT(K3)=PDOT(K3)-TEM2*(T3*TRKJ-CTHETA*T6*TRKK)
      PDOT(M1)=PDOT(M1)+TEM2*((T1+T4)*TRKJ-CTHETA*(T1*TRJJ+T4*TRKK))
      PDOT(M2)=PDOT(M2)+TEM2*((T2+T5)*TRKJ-CTHETA*(T2*TRJJ+T5*TRKK))
      PDOT(M3)=PDOT(M3)+TEM2*((T3+T6)*TRKJ-CTHETA*(T3*TRJJ+T6*TRKK))
      TRKJ=1.D0/(R(KKMM)*R(JJMM))
      TRKK=1.D0/(R(KKMM)*R(KKMM))
      TRJJ=1.D0/(R(JJMM)*R(JJMM))
      PDOT(JJ1)=PDOT(JJ1)-TEM1*(TT4*TRKJ-CTTHTA*TT1*TRJJ)
      PDOT(JJ2)=PDOT(JJ2)-TEM1*(TT5*TRKJ-CTTHTA*TT2*TRJJ)
      PDOT(JJ3)=PDOT(JJ3)-TEM1*(TT6*TRKJ-CTTHTA*TT3*TRJJ)
      PDOT(KK1)=PDOT(KK1)-TEM1*(TT1*TRKJ-CTTHTA*TT4*TRKK)
      PDOT(KK2)=PDOT(KK2)-TEM1*(TT2*TRKJ-CTTHTA*TT5*TRKK)
      PDOT(KK3)=PDOT(KK3)-TEM1*(TT3*TRKJ-CTTHTA*TT6*TRKK)
      PDOT(MM1)=PDOT(MM1)+TEM1*((TT1+TT4)*TRKJ
     *          -CTTHTA*(TT1*TRJJ+TT4*TRKK))
      PDOT(MM2)=PDOT(MM2)+TEM1*((TT2+TT5)*TRKJ
     *          -CTTHTA*(TT2*TRJJ+TT5*TRKK))
      PDOT(MM3)=PDOT(MM3)+TEM1*((TT3+TT6)*TRKJ
     *          -CTTHTA*(TT3*TRJJ+TT6*TRKK))
C
C        CALCULATE FOR THE CONTRIBUTION OF SWITCHING FUNCTION
C
      DUM1=R(JM)-RJZ(N12B(NL))
      IF (CJJM.GE.0.0D0.AND.DUM1.GE.0.0D0) THEN
         DUM4=TEM0*CJJM*(1.0D0-RJZ(N12B(NL))/R(JM))
         PDOT(J1)=PDOT(J1)-DUM4*T1
         PDOT(J2)=PDOT(J2)-DUM4*T2
         PDOT(J3)=PDOT(J3)-DUM4*T3
         PDOT(M1)=PDOT(M1)+DUM4*T1
         PDOT(M2)=PDOT(M2)+DUM4*T2
         PDOT(M3)=PDOT(M3)+DUM4*T3
      ENDIF
C
      DUM1=R(KM)-RKZ(N12B(NL))
      IF (CKKM.GE.0.0D0.AND.DUM1.GE.0.0D0) THEN
         DUM4=TEM0*CKKM*(1.0D0-RKZ(N12B(NL))/R(KM))
         PDOT(K1)=PDOT(K1)-DUM4*T4
         PDOT(K2)=PDOT(K2)-DUM4*T5
         PDOT(K3)=PDOT(K3)-DUM4*T6
         PDOT(M1)=PDOT(M1)+DUM4*T4
         PDOT(M2)=PDOT(M2)+DUM4*T5
         PDOT(M3)=PDOT(M3)+DUM4*T6
      ENDIF
C
      DUM11=R(JJMM)-RJZ(N12BB(NL))
      IF (CJJJMM.GE.0.0D0.AND.DUM11.GE.0.0D0) THEN
         DUM44=TEM0*CJJJMM*(1.0D0-RJZ(N12BB(NL))/R(JJMM))
         PDOT(JJ1)=PDOT(JJ1)-DUM44*TT1
         PDOT(JJ2)=PDOT(JJ2)-DUM44*TT2
         PDOT(JJ3)=PDOT(JJ3)-DUM44*TT3
         PDOT(MM1)=PDOT(MM1)+DUM44*TT1
         PDOT(MM2)=PDOT(MM2)+DUM44*TT2
         PDOT(MM3)=PDOT(MM3)+DUM44*TT3
      ENDIF
C
      DUM11=R(KKMM)-RKZ(N12BB(NL))
      IF (CKKKMM.GE.0.0D0.AND.DUM11.GE.0.0D0) THEN
         DUM44=TEM0*CKKKMM*(1.0D0-RKZ(N12BB(NL))/R(KKMM))
         PDOT(KK1)=PDOT(KK1)-DUM44*TT4
         PDOT(KK2)=PDOT(KK2)-DUM44*TT5
         PDOT(KK3)=PDOT(KK3)-DUM44*TT6
         PDOT(MM1)=PDOT(MM1)+DUM44*TT4
         PDOT(MM2)=PDOT(MM2)+DUM44*TT5
         PDOT(MM3)=PDOT(MM3)+DUM44*TT6
      ENDIF
      RETURN
      END
C
C         CALCULATE DIHEDRAL ANGLE TORSION POTENTIAL ENERGY DERIVATIVES
C
      SUBROUTINE DANGLE(NL)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/COORS/R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      COMMON/ANGLEB/FDH(20,4),GDH(20,4),NDH(20),N13I(20),N13J(20),
     *N13K(20),N13L(20)
C
C         CALCULATE INDICES FOR COORDINATES
C
      I3=3*N13I(NL)
      I2=I3-1
      I1=I2-1
      J3=3*N13J(NL)
      J2=J3-1
      J1=J2-1
      K3=3*N13K(NL)
      K2=K3-1
      K1=K2-1
      L3=3*N13L(NL)
      L2=L3-1
      L1=L2-1
C
C         CALCULATE RELATIVE COORDINATES
C
      XJI=Q(J1)-Q(I1)
      YJI=Q(J2)-Q(I2)
      ZJI=Q(J3)-Q(I3)
      XKJ=Q(K1)-Q(J1)
      YKJ=Q(K2)-Q(J2)
      ZKJ=Q(K3)-Q(J3)
      XLK=Q(L1)-Q(K1)
      YLK=Q(L2)-Q(K2)
      ZLK=Q(L3)-Q(K3)
C
C         CALCULATE DIHEDRAL ANGLE
C
      AX=YJI*ZKJ - ZJI*YKJ
      AY=ZJI*XKJ - XJI*ZKJ
      AZ=XJI*YKJ - YJI*XKJ
      BX=YKJ*ZLK - ZKJ*YLK
      BY=ZKJ*XLK - XKJ*ZLK
      BZ=XKJ*YLK - YKJ*XLK
      RA=DSQRT(AX*AX + AY*AY + AZ*AZ)
      RB=DSQRT(BX*BX + BY*BY + BZ*BZ)
      CANG=(AX*BX + AY*BY +AZ*BZ)/RA/RB
      IF (CANG.GT.1.00D0) CANG=1.00D0
      IF (CANG.LT.-1.00D0) CANG=-1.00D0
      DANG(NL)=DACOS(CANG)
      SANG=DSQRT(1.0D0-CANG**2)
      DUM1=AY*BZ - AZ*BY
      DUM2=AZ*BX - AX*BZ
      DUM3=AX*BY - AY*BX
      DUM4=DUM1*XKJ + DUM2*YKJ + DUM3*ZKJ
      IF (DUM4.LT.0.0D0) THEN
         SANG=-SANG
         DANG(NL)=-DANG(NL)
      ENDIF
C
C         CALCULATE DERIVATIVE OF CANG WITH RESPECT TO AX,AY & AZ AND
C         BX,BY & BZ.
C
      DUM1=RA*RB
      DUM2=CANG/RA/RA
      DCADAX=BX/DUM1 - DUM2*AX
      DCADAY=BY/DUM1 - DUM2*AY
      DCADAZ=BZ/DUM1 - DUM2*AZ
      DUM2=CANG/RB/RB
      DCADBX=AX/DUM1 - DUM2*BX
      DCADBY=AY/DUM1 - DUM2*BY
      DCADBZ=AZ/DUM1 - DUM2*BZ
C
C         CALCULATE (DV/DQ)'S
C
      DUM4=0.0D0
      IF (DABS(DANG(NL)).GT.0.1D0) THEN
         IF (DABS(DABS(DANG(NL))-PI).LE.0.1D0) GOTO 4
         DO 1 I=1,NDH(NL)
            DUM1=DBLE(I)
            DUM4=DUM4+FDH(NL,I)*DUM1*DSIN(DUM1*DANG(NL)-GDH(NL,I))
    1    CONTINUE
         DUM4=DUM4/2.0D0/SANG
         GOTO 6
      ENDIF
C
      DO 3 I=1,NDH(NL)
         DUM1=DBLE(I)
         DUM2=DUM1*DANG(NL)
         DUM3=(1.0D0 - DUM2**2/6.0D0+DUM2**4/120.0D0
     *        -DUM2**6/5040.0D0)
         DUM3=DUM3/(1.0D0-DANG(NL)**2/6.0D0+DANG(NL)**4/120.0D0
     *        -DANG(NL)**6/5040.0D0)
         DUM3=FDH(NL,I)*DUM1**2*DUM3
         IF (DABS(GDH(NL,I)-PI).LT.0.1D0) DUM3=-DUM3
         DUM4=DUM4+DUM3
    3 CONTINUE
      DUM4=DUM4/2.0D0
      GOTO 6
C
    4 CONTINUE
      DO 5 I=1,NDH(NL)
         DUM1=DBLE(I)
         DUM2=DABS(DANG(NL)) - PI
         DUM5=DUM1*DUM2
         DUM3=(1.0D0-DUM5**2/6.0D0+DUM5**4/120.0D0
     *        -DUM5**6/5040.0D0)
         DUM3=DUM3/(1.0D0-DUM2**2/6.0D0+DUM2**4/120.0D0
     *        -DUM2**6/5040.0D0)
         DUM3=FDH(NL,I)*DUM1**2*DUM3
         IF (DCOS(DUM1*PI+GDH(NL,I)).GT.0.0D0) DUM3=-DUM3
         DUM4=DUM4 + DUM3
    5 CONTINUE
      DUM4=DUM4/2.0D0
C
    6 CONTINUE
C
C         CALCULATE DERIVATIVES WITH RESPECT TO ATOM I
C
      DUM1=DUM4*(DCADAY*ZKJ - DCADAZ*YKJ)
      DUM2=DUM4*(DCADAZ*XKJ - DCADAX*ZKJ)
      DUM3=DUM4*(DCADAX*YKJ - DCADAY*XKJ)
      PDOT(I1)=PDOT(I1) + DUM1
      PDOT(I2)=PDOT(I2) + DUM2
      PDOT(I3)=PDOT(I3) + DUM3
C
C         CALCULATE DERIVATIVES WITH RESPECT TO ATOM J
C
      DUM1=DUM4*(DCADAZ*(YKJ + YJI) - DCADAY*(ZJI + ZKJ)
     *     +DCADBY*ZLK - DCADBZ*YLK)
      DUM2=DUM4*(DCADAX*(ZKJ + ZJI) - DCADAZ*(XJI + XKJ)
     *     +DCADBZ*XLK - DCADBX*ZLK)
      DUM3=DUM4*(DCADAY*(XKJ + XJI) - DCADAX*(YJI + YKJ)
     *     +DCADBX*YLK - DCADBY*XLK)
      PDOT(J1)=PDOT(J1) + DUM1
      PDOT(J2)=PDOT(J2) + DUM2
      PDOT(J3)=PDOT(J3) + DUM3
C
C         CALCULATE DERIVATIVES WITH RESPECT TO ATOM K
C
      DUM1=DUM4*(DCADAY*ZJI - DCADAZ*YJI + DCADBZ*(YLK + YKJ)
     *     -DCADBY*(ZKJ + ZLK))
      DUM2=DUM4*(DCADAZ*XJI - DCADAX*ZJI + DCADBX*(ZLK + ZKJ)
     *     -DCADBZ*(XKJ + XLK))
      DUM3=DUM4*(DCADAX*YJI - DCADAY*XJI + DCADBY*(XLK + XKJ)
     *     -DCADBX*(YKJ + YLK))
      PDOT(K1)=PDOT(K1) + DUM1
      PDOT(K2)=PDOT(K2) + DUM2
      PDOT(K3)=PDOT(K3) + DUM3
C
C         CALCULATE DERIVATIVES WITH RESPECT TO ATOM L
C
      DUM1=DUM4*(DCADBY*ZKJ - DCADBZ*YKJ)
      DUM2=DUM4*(DCADBZ*XKJ - DCADBX*ZKJ)
      DUM3=DUM4*(DCADBX*YKJ - DCADBY*XKJ)
      PDOT(L1)=PDOT(L1) + DUM1
      PDOT(L2)=PDOT(L2) + DUM2
      PDOT(L3)=PDOT(L3) + DUM3
      RETURN
      END
C
C         CALCULATE AXILROD-TELLER POTENTIAL ENERGY DERIVATIVES
C
      SUBROUTINE AXT(NL)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/AXTB/ZAXT(300),VAXT(300),N14I(300),N14J(300),N14K(300)
      COMMON/FORCES/NATOMS,I3N,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      COMMON/COORS/R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      DIMENSION TIJ(3),TIK(3),TJK(3),DVDTIJ(3),DVDTIK(3),DVDTJK(3)
C
C         CALCULATE INDICES FOR COORDINATES
C
      I3=3*N14I(NL)
      I2=I3-1
      I1=I2-1
      J3=3*N14J(NL)
      J2=J3-1
      J1=J2-1
      K3=3*N14K(NL)
      K2=K3-1
      K1=K2-1
C
C         CALCULATE INDEX FOR R
C
      IJ=(N14I(NL)-1)*(2*NATOMS-N14I(NL))/2+N14J(NL)-N14I(NL)
      IK=(N14I(NL)-1)*(2*NATOMS-N14I(NL))/2+N14K(NL)-N14I(NL)
      JK=(N14J(NL)-1)*(2*NATOMS-N14J(NL))/2+N14K(NL)-N14J(NL)
C
C         CALCULATE RELATIVE COORDINATES
C
      TIJ(1)=Q(J1)-Q(I1)
      TIJ(2)=Q(J2)-Q(I2)
      TIJ(3)=Q(J3)-Q(I3)
      TIK(1)=Q(K1)-Q(I1)
      TIK(2)=Q(K2)-Q(I2)
      TIK(3)=Q(K3)-Q(I3)
      TJK(1)=Q(K1)-Q(J1)
      TJK(2)=Q(K2)-Q(J2)
      TJK(3)=Q(K3)-Q(J3)
      R(IJ)=DSQRT(TIJ(1)*TIJ(1)+TIJ(2)*TIJ(2)+TIJ(3)*TIJ(3))
      R(IK)=DSQRT(TIK(1)*TIK(1)+TIK(2)*TIK(2)+TIK(3)*TIK(3))
      R(JK)=DSQRT(TJK(1)*TJK(1)+TJK(2)*TJK(2)+TJK(3)*TJK(3))
C
C         CALCULATE COSINE OF ANGLES
C
      CI=TIJ(1)*TIK(1)+TIJ(2)*TIK(2)+TIJ(3)*TIK(3)
      CJ=-TIJ(1)*TJK(1)-TIJ(2)*TJK(2)-TIJ(3)*TJK(3)
      CK=TIK(1)*TJK(1)+TIK(2)*TJK(2)+TIK(3)*TJK(3)
      COSI=CI/R(IJ)/R(IK)
      COSJ=CJ/R(IJ)/R(JK)
      COSK=CK/R(IK)/R(JK)
C
C         CALCULATE POTENTIAL INCREMENT
C
      V1=ZAXT(NL)/(R(IJ)*R(IK)*R(JK))**3
      V2=3.D0*ZAXT(NL)/(R(IJ)*R(IK)*R(JK))**5
      VTEMP=V2*CI*CJ*CK
      VAXT(NL)=V1+VTEMP
C
C         CALCULATE (DV/DQ)'S
C
      DUM=-3.D0*V1-5.D0*VTEMP
      DUMIJ=DUM/R(IJ)/R(IJ)
      DUMIK=DUM/R(IK)/R(IK)
      DUMJK=DUM/R(JK)/R(JK)
      DO 10 I=1,3
         DVDTIJ(I)=V2*CK*(TIK(I)*CJ-TJK(I)*CI)+DUMIJ*TIJ(I)
         DVDTIK(I)=V2*CJ*(TIJ(I)*CK+TJK(I)*CI)+DUMIK*TIK(I)
         DVDTJK(I)=V2*CI*(TIK(I)*CJ-TIJ(I)*CK)+DUMJK*TJK(I)
   10 CONTINUE
      PDOT(I1)=PDOT(I1)-DVDTIJ(1)-DVDTIK(1)
      PDOT(I2)=PDOT(I2)-DVDTIJ(2)-DVDTIK(2)
      PDOT(I3)=PDOT(I3)-DVDTIJ(3)-DVDTIK(3)
      PDOT(J1)=PDOT(J1)+DVDTIJ(1)-DVDTJK(1)
      PDOT(J2)=PDOT(J2)+DVDTIJ(2)-DVDTJK(2)
      PDOT(J3)=PDOT(J3)+DVDTIJ(3)-DVDTJK(3)
      PDOT(K1)=PDOT(K1)+DVDTIK(1)+DVDTJK(1)
      PDOT(K2)=PDOT(K2)+DVDTIK(2)+DVDTJK(2)
      PDOT(K3)=PDOT(K3)+DVDTIK(3)+DVDTJK(3)
      RETURN
      END

      SUBROUTINE VSN2
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/PSN2/PESN2,GA,RA,RB
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      COMMON/FORCES/N,I3N,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      COMMON/MORSEB/RMZ(100),B(100),D(100),N2J(100),N2K(100),
     *CM1(100),CM2(100),CM3(100),CM4(100)
      COMMON/COORS/R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      COMMON/SN2A/SFACLR,SFBCLR,SLGAC,SLGBC,DCLUSA,DCLUSB,DCH3CL,
     *DCH3BR,BACLUS,BBCLUS,BAB,BBB,SBAC,SBBC,BAC,BBC,SDGAC,SDGBC,
     *FPHIAZ,FPHIBZ,APHIAZ,APHIBZ,GPHIAZ,GPHIBZ,GPHIAC,GPHIBC,
     *S1RAA1,S1RAA2,S1RAA3,S1RAA4,S1RAA5,S1RBA1,S1RBA2,S1RBA3,
     *S1RBA4,S1RBA5,S1RAC1,S1RAC2,S1RAC3,S1RAC4,S1RAC5,S1RBC1,
     *S1RBC2,S1RBC3,S1RBC4,S1RBC5,S1CAC,S1CBC,SEAC,SEBC,VH2AC,
     *VH2BC,PHIAOI,PHIAOB,SPAA1,SPAA2,SPAA3,SPAC1,SPAC2,SPAC3,
     *SPGAC,PHIBOI,PHIBOB,SPBA1,SPBA2,SPBA3,SPBC1,SPBC2,SPBC3,
     *SPGBC,PCLCLC,PCLCLG,SFTA,SFTC,SFTD,STHCA,STHCB,STHEA,STHEB,
     *FTHA,FTHB,FTHTS,ATHA,ATHB,ATHTS,BTHA,BTHB,BTHTS,THTS,THA,THB,
     *VLRAA,VLRBA,VCLAHD,VCLBHD,RAC,RBC,RAI,RBI,GATS
      COMMON/SN2B/SCALEP,SDAA1,SDAA2,SDAA3,SDAC1,SDAC2,SDAC3,SDBA1,
     *SDBA2,SDBA3,SDBC1,SDBC2,SDBC3,SRAA1,
     *SRBA1,SRAA2,SRBA2,SRAA3,SRBA3,SRAC1,SRBC1,SRAC2,SRBC2,SRAC3,
     *SRBC3,SRGAC,SRGBC,SRAE1,SRBE1,SRAE2,SRAE3,SRBE2,SRBE3,SSDA1,
     *SSDA2,SSDA3,SSDB1,SSDB2,SSDB3
      COMMON/SN2C/DCH,CRCH,CBCH,GARCH,GABCH,RCHI,RCHTS,BCHI,BCHTS
      DIMENSION DSLADQ(15),DSLBDQ(15),DRADQ(15),DRBDQ(15),
     *DSRADQ(9),DSRBDQ(9),DGADQ(9),DGBDQ(9),
     *DDADQ(9),DDBDQ(9),DS1ADQ(9),DS1BDQ(9),
     *T1(300),T2(300),T3(300),DBGADQ(9),
     *DBGBDQ(9),DS1CA(9),DS1CB(9),DSEADQ(9),DSEBDQ(9),DPHIOA(9),
     *DPHIOB(9),DGPHI(9),DCLCCL(9),DRCHDQ(9),DBCHDQ(9)
      LOGICAL FIRST
      DATA FIRST/.TRUE./
      SAVE FIRST
C
      IF (FIRST) THEN
         CALL PARSN2(NSN2)
         FIRST=.FALSE.
      ENDIF
C
C         DETERMINE RA, RB, GA, GB, RA EQUIL., AND RB EQUIL.
C
      RA=DSQRT((Q(7)-Q(1))**2+(Q(8)-Q(2))**2+(Q(9)-Q(3))**2)
      RB=DSQRT((Q(7)-Q(4))**2+(Q(8)-Q(5))**2+(Q(9)-Q(6))**2)
C
      GA=RA-RB
      GB=-GA
C
C         CALCULATION OF ALL ATOM-ATOM SEPARATIONS
C
      DO 3 J=1,5
         DO 2 K=2,N
            IF (K .GT. J) THEN
               JK=(J-1)*(2*N-J)/2+K-J
               J3=3*J
               J2=J3-1
               J1=J2-1
               K3=3*K
               K2=K3-1
               K1=K2-1
               T1(JK)=Q(K1)-Q(J1)
               T2(JK)=Q(K2)-Q(J2)
               T3(JK)=Q(K3)-Q(J3)
               R(JK)=DSQRT(T1(JK)*T1(JK)+T2(JK)*T2(JK)
     *               +T3(JK)*T3(JK))
            ENDIF
 2       CONTINUE
 3    CONTINUE
C
C         DERIVATIVES OF RA
C
      DRADQ(1)=-(Q(7)-Q(1))/RA
      DRADQ(2)=-(Q(8)-Q(2))/RA
      DRADQ(3)=-(Q(9)-Q(3))/RA
      DRADQ(4)=0.0D0
      DRADQ(5)=0.0D0
      DRADQ(6)=0.0D0
      DRADQ(7)=-DRADQ(1)
      DRADQ(8)=-DRADQ(2)
      DRADQ(9)=-DRADQ(3)
C
C         DERIVATIVES OF RB
C
      DRBDQ(1)=0.0D0
      DRBDQ(2)=0.0D0
      DRBDQ(3)=0.0D0
      DRBDQ(4)=-(Q(7)-Q(4))/RB
      DRBDQ(5)=-(Q(8)-Q(5))/RB
      DRBDQ(6)=-(Q(9)-Q(6))/RB
      DRBDQ(7)=-DRBDQ(4)
      DRBDQ(8)=-DRBDQ(5)
      DRBDQ(9)=-DRBDQ(6)
C
C         DERIVATIVES OF GA AND GB
C
      DO 1 I=1,9
         DGADQ(I)=DRADQ(I)-DRBDQ(I)
         DGBDQ(I)=-DGADQ(I)
    1 CONTINUE
C
C         DERIVATIVES OF SLRA AND SLRB
C
      IF (GA .LE. SLGAC) THEN
         SLRA=0.0D0
         DO 5 I=1,9
            DSLADQ(I)=0.0D0
    5    CONTINUE
         GOTO 11
      ENDIF
      DUM1=DEXP(-SFACLR*(GA-SLGAC)**2)
      SLRA=1.0D0-DUM1
      DUM3=2.0D0*SFACLR*(GA-SLGAC)*DUM1
      DO 10 I=1,9
         DSLADQ(I)=DUM3*DGADQ(I)
   10 CONTINUE
C
   11 IF (GB .LE. SLGBC) THEN
         SLRB=0.0D0
         DO 6 I=1,9
            DSLBDQ(I)=0.0D0
 6       CONTINUE
         GOTO 9
      ENDIF
      DUM2=DEXP(-SFBCLR*(GB-SLGBC)**2)
      SLRB=1.0D0-DUM2
      DUM4=2.0D0*SFBCLR*(GB-SLGBC)*DUM2
C
      DO 12 I=1,9
         DSLBDQ(I)=DUM4*DGBDQ(I)
   12 CONTINUE
C  
C         CALCULATION OF SRGA AND SRGB AND RA AND RB EQUILIBRIUM
C
    9 DUMSLA=1.0D0-SLRA
      DUMSLB=1.0D0-SLRB
      IF (GA .GE. SRGAC)THEN
        SRGA=0.0D0
        RAO=RAC
        DO 13 I=1,9
          DSRADQ(I)=0.0D0
   13   CONTINUE
        GOTO 20
      ENDIF
      DUM=SRGAC-GA
C
      DUM1=SRAA1*DEXP(-SRAC1*DUM**SRAE1)
      DUM2=SRAA2*DEXP(-SRAC2*DUM**SRAE2)
      DUM3=SRAA3*DEXP(-SRAC3*DUM**SRAE3)
C
      SRGA=1.0D0-(DUM1+DUM2+DUM3)
      RAO=RAC+(RAI-RAC)*SRGA
C
C         CALCULATION OF DSRADQ
C
      PART1=-SRAC1*SRAE1*DUM**(SRAE1-1.0D0)*DUM1
      PART2=-SRAC2*SRAE2*DUM**(SRAE2-1.0D0)*DUM2
      PART3=-SRAC3*SRAE3*DUM**(SRAE3-1.0D0)*DUM3
C
      PART1=PART1+PART2+PART3
      DO 21 I=1,9
         DSRADQ(I)=DGADQ(I)*PART1
   21 CONTINUE
   20 IF (GB .GE. SRGBC) THEN
         SRGB=0.0D0
         RBO=RBC
         DO 14 I=1,9
            DSRBDQ(I)=0.0D0
   14    CONTINUE
         GOTO 30
      ENDIF
      DUM=SRGBC-GB
C
      DUM1=SRBA1*DEXP(-SRBC1*DUM**SRBE1)
      DUM2=SRBA2*DEXP(-SRBC2*DUM**SRBE2)
      DUM3=SRBA3*DEXP(-SRBC3*DUM**SRBE3)
C
      SRGB=1.0D0-(DUM1+DUM2+DUM3)
      RBO=RBC+(RBI-RBC)*SRGB
C
C         CALCULATION OF DERIVATIVES OF SRGB
C
      PART1=-SRBC1*SRBE1*DUM**(SRBE1-1.0D0)*DUM1
      PART2=-SRBC2*SRBE2*DUM**(SRBE2-1.0D0)*DUM2
      PART3=-SRBC3*SRBE3*DUM**(SRBE3-1.0D0)*DUM3
C
      PART1=PART1+PART2+PART3
      DO 23 I=1,9
         DSRBDQ(I)=DGBDQ(I)*PART1
   23 CONTINUE  
C
C         CALCULATION OF SDGA
C
   30 DUM4=DCH3CL-DCLUSA
      DUM=SDGAC-GA
      IF (GA .GE. SDGAC) THEN
         SDGA=0.0D0
         DO 15 I=1,9
            DDADQ(I)=0.0D0
   15    CONTINUE
         GOTO 25
      ENDIF
C
      DUM1=SDAA1*DEXP(-SDAC1*DUM**SSDA1)
      DUM2=SDAA2*DEXP(-SDAC2*DUM**SSDA2)
      DUM3=SDAA3*DEXP(-SDAC3*DUM**SSDA3)
C
      SDGA=1.0D0-(DUM1+DUM2+DUM3)
C
C         CALCULATION OF DERIVATIVES OF SDGA AND DA
C
      PART1=-(SSDA1*SDAC1*DUM**(SSDA1-1.0D0)*DUM1)
      PART2=-(SSDA2*SDAC2*DUM**(SSDA2-1.0D0)*DUM2)
      PART3=-(SSDA3*SDAC3*DUM**(SSDA3-1.0D0)*DUM3)
C
      PART1=PART1+PART2+PART3
      DO 24 I=1,9
         DDADQ(I)=DGADQ(I)*PART1*DUM4
   24 CONTINUE      
C
C         CALCULATION OF SDGB
C
   25 DUM14=DCH3BR-DCLUSB
      DUM=SDGBC-GB
      IF (GB .GE. SDGBC) THEN
         SDGB=0.0D0
         DO 16 I=1,9
            DDBDQ(I)=0.0D0
   16    CONTINUE
         GOTO 26
      ENDIF
C
      DUM1=SDBA1*DEXP(-SDBC1*DUM**SSDB1)
      DUM2=SDBA2*DEXP(-SDBC2*DUM**SSDB2)
      DUM3=SDBA3*DEXP(-SDBC3*DUM**SSDB3)
C
      SDGB=1.0D0-(DUM1+DUM2+DUM3)
C
C         CALCULATION OF DERIVATIVES OF SDGB AND DB      
C
      PART1=-(SSDB1*SDBC1*DUM**(SSDB1-1.0D0)*DUM1)
      PART2=-(SSDB2*SDBC2*DUM**(SSDB2-1.0D0)*DUM2)
      PART3=-(SSDB3*SDBC3*DUM**(SSDB3-1.0D0)*DUM3)
C
      PART1=PART1+PART2+PART3
      DO 27 I=1,9
         DDBDQ(I)=DGBDQ(I)*PART1*DUM14
   27 CONTINUE
C
C         CALCULATION OF DA AND DB
C
   26 DA=DCLUSA+DUM4*SDGA
      DB=DCLUSB+DUM14*SDGB
C
C         CALCULATION OF BETA(GA) AND ITS DERIVATIVE
C
      DUM=SBAC-GA
      IF (GA.GE.SBAC) THEN
         BGA=BACLUS
         DO 18 I=1,9
            DBGADQ(I)=0.0D0
   18    CONTINUE
         GOTO 22
      ENDIF
      DUM1=DEXP(-BAC*DUM**3)
      SBGA=1.0D0-DUM1
      BGA=BACLUS+(BAB-BACLUS)*SBGA
      DUM2=-3.0D0*BAC*DUM**2*DUM1*(BAB-BACLUS)
      DO 19 I=1,9
         DBGADQ(I)=DUM2*DGADQ(I)
   19 CONTINUE
C
C         CALCULATION OF BETA(GB) AND ITS DERIVATIVE
C
   22 DUM=SBBC-GB
      IF (GB.GE.SBBC) THEN
         BGB=BBCLUS
         DO 28 I=1,9
            DBGBDQ(I)=0.0D0
   28    CONTINUE
         GOTO 31
      ENDIF 
      DUM1=DEXP(-BBC*DUM**3)
      SBGB=1.0D0-DUM1
      BGB=BBCLUS+(BBB-BBCLUS)*SBGB
      DUM2=-3.0D0*BBC*DUM**2*DUM1*(BBB-BBCLUS)
      DO 35 I=1,9
         DBGBDQ(I)=DUM2*DGBDQ(I)
   35 CONTINUE
C
C         CALCULATION OF VMEPT
C
   31 DUM1=RA-RAO
      DUM2=RB-RBO
      DUM3=DEXP(-2.0D0*BGA*DUM1)
      DUM4=DEXP(-BGA*DUM1)
      DUM5=DEXP(-2.0D0*BGB*DUM2)
      DUM6=DEXP(-BGB*DUM2)
      PARTA=DUM3-2.0D0*DUM4
      PARTB=DUM5-2.0D0*DUM6
      VMEPT=DA*PARTA*DUMSLA+DB*PARTB*DUMSLB+DCH3BR
C
C         CALCULATION OF DVMEPTDQ
C
      DPARA1=2.0D0*BGA*(DUM4-DUM3)
      DPARB1=2.0D0*BGB*(DUM6-DUM5)
      DPARA2=2.0D0*DUM1*(DUM4-DUM3)
      DPARB2=2.0D0*DUM2*(DUM6-DUM5)
      DUMA=RAI-RAC
      DUMB=RBI-RBC
      DUM3=DPARA1*DUMSLA*DA
      DUM4=DPARB1*DUMSLB*DB
      DUM5=PARTA*DUMSLA
      DUM6=PARTB*DUMSLB      
      DUM7=DA*PARTA
      DUM8=DB*PARTB
      DUM9=DPARA2*DUMSLA*DA
      DUM10=DPARB2*DUMSLB*DB
      DO 32 I=1,9
         PDOT(I)=DUM3*(DRADQ(I)-DUMA*DSRADQ(I))+DUM4*
     *           (DRBDQ(I)-DUMB*DSRBDQ(I))+PDOT(I)
         PDOT(I)=DDADQ(I)*DUM5+DDBDQ(I)*DUM6+PDOT(I)
         PDOT(I)=-DUM7*DSLADQ(I)-DUM8*DSLBDQ(I)+PDOT(I)       
         PDOT(I)=DUM9*DBGADQ(I)+DUM10*DBGBDQ(I)+PDOT(I)
 32   CONTINUE
C
C         CALCULATION OF S1RA AND S1CA
C
      IF (RA.LE.RAI) THEN
         S1RA=1.0D0
         S1CA=1.0D0
         DO 53 I=1,9
            DS1CA(I)=0.0D0
            DS1ADQ(I)=0.0D0
   53    CONTINUE
         GOTO 60
      ENDIF
      DUM=RA-RAI
      DUM1=S1RAA1*DEXP(-S1RAC1*DUM**2)
      DUM2=S1RAA2*DEXP(-S1RAC2*DUM**3)
      DUM3=S1RAA3*DEXP(-S1RAC3*DUM**4)
      DUM4=S1RAA4*DEXP(-S1RAC4*DUM**5)
      DUM5=S1RAA5*DEXP(-S1RAC5*DUM**6)
      S1RA=DUM1+DUM2+DUM3+DUM4+DUM5
      S1CA=DEXP(-S1CAC*DUM**2)
C
C         CALCULATION OF DERIVATIVES OF S1RA AND S1CA
C
      PART1=-2.0D0*S1RAC1*DUM*DUM1
      PART2=-3.0D0*S1RAC2*DUM**2*DUM2
      PART3=-4.0D0*S1RAC3*DUM**3*DUM3
      PART4=-5.0D0*S1RAC4*DUM**4*DUM4
      PART5=-6.0D0*S1RAC5*DUM**5*DUM5
      PART1=PART1+PART2+PART3+PART4+PART5
      PART6=-2.0D0*S1CAC*DUM*S1CA
      DO 55 I=1,9
        DS1CA(I)=PART6*DRADQ(I)
        DS1ADQ(I)=PART1*DRADQ(I)
   55 CONTINUE
C
C         CALCULATION OF S1RB AND S1CB
C
   60 IF (RB.LE.RBI) THEN
         S1RB=1.0D0
         S1CB=1.0D0
         DO 63 I=1,9
            DS1BDQ(I)=0.0D0
            DS1CB(I)=0.0D0
   63    CONTINUE
         GOTO 70
      ENDIF
      DUM=RB-RBI
      DUM1=S1RBA1*DEXP(-S1RBC1*DUM**2)
      DUM2=S1RBA2*DEXP(-S1RBC2*DUM**3)
      DUM3=S1RBA3*DEXP(-S1RBC3*DUM**4)
      DUM4=S1RBA4*DEXP(-S1RBC4*DUM**5)
      DUM5=S1RBA5*DEXP(-S1RBC5*DUM**6)
      S1RB=DUM1+DUM2+DUM3+DUM4+DUM5
      S1CB=DEXP(-S1CBC*DUM**2)
C
C         CALCULATION OF DERIVATIVES OF S1RB AND S1CB
C
      PART1=-2.0D0*S1RBC1*DUM*DUM1
      PART2=-3.0D0*S1RBC2*DUM**2*DUM2
      PART3=-4.0D0*S1RBC3*DUM**3*DUM3
      PART4=-5.0D0*S1RBC4*DUM**4*DUM4
      PART5=-6.0D0*S1RBC5*DUM**5*DUM5
      PART1=PART1+PART2+PART3+PART4+PART5
      PART6=-2.0D0*S1CBC*DUM*S1CB
      DO 65 I=1,9
         DS1BDQ(I)=PART1*DRBDQ(I)
         DS1CB(I)=PART6*DRBDQ(I)
   65 CONTINUE
C
C         CALCULATION OF PHI FORCE CONSTANTS
C
   70 FPHIA=FPHIAZ*S1RA
      APHIA=APHIAZ*S1CA
      FPHIB=FPHIBZ*S1RB
      APHIB=APHIBZ*S1CB
C
C         CALCULATION OF SEA
C
      IF (RA.LE.2.50D0) THEN
         SEA=1.0D0
         DO 83 I=1,9
            DSEADQ(I)=0.0D0
   83    CONTINUE
         GOTO 79
      ENDIF
      SEA=DEXP(-SEAC*(RA-2.5D0)**2)
      DUM=-2.0D0*SEAC*(RA-2.5D0)*SEA
      DO 89 I=1,9
         DSEADQ(I)=DUM*DRADQ(I)
   89 CONTINUE
C
C         CALCULATION OF SEB
C
   79 IF (RB.LE.2.50D0) THEN
         SEB=1.0D0
         DO 93 I=1,9
            DSEBDQ(I)=0.0D0
   93    CONTINUE
         GOTO 98
      ENDIF
      SEB=DEXP(-SEBC*(RB-2.5D0)**2)
      DUM=-2.0D0*SEBC*(RB-2.5D0)*SEB
      DO 99 I=1,9
         DSEBDQ(I)=DUM*DRBDQ(I)
   99 CONTINUE
C
C         CALCULATION OF SPHIA AND PHIOA
C
   98 IF (GA.LE.SPGAC) THEN
         SPHIA=1.0D0
         DO 75 I=1,9
            DPHIOA(I)=0.0D0
   75    CONTINUE
         PHIAO=PHIAOB
         GOTO 88
      ENDIF      
      DUM=GA-SPGAC
      DUM1=SPAA1*DEXP(-SPAC1*DUM**2)
      DUM2=SPAA2*DEXP(-SPAC2*DUM**3)
      DUM3=SPAA3*DEXP(-SPAC3*DUM**4)
      SPHIA=DUM1+DUM2+DUM3
      PHIAO=PHIAOI+(PHIAOB-PHIAOI)*SPHIA
C
C         CALCULATION OF DERIVATIVES OF PHIOA
C
      PART1=-2.0D0*SPAC1*DUM*DUM1
      PART2=-3.0D0*SPAC2*DUM**2*DUM2
      PART3=-4.0D0*SPAC3*DUM**3*DUM3
      PART1=(PART1+PART2+PART3)*(PHIAOB-PHIAOI)
      DO 77 I=1,9
         DPHIOA(I)=PART1*DGADQ(I)
   77 CONTINUE
C
C         CALCULATION OF SPHIB AND PHIOB
C
   88 IF (GB.LE.SPGBC) THEN
         SPHIB=1.0D0
         DO 76 I=1,9
            DPHIOB(I)=0.0D0
   76    CONTINUE
         PHIBO=PHIBOB
         GOTO 90
      ENDIF      
      DUM=GB-SPGBC
      DUM1=SPBA1*DEXP(-SPBC1*DUM**2)
      DUM2=SPBA2*DEXP(-SPBC2*DUM**3)
      DUM3=SPBA3*DEXP(-SPBC3*DUM**4)
      SPHIB=DUM1+DUM2+DUM3
      PHIBO=PHIBOI+(PHIBOB-PHIBOI)*SPHIB
C
C         CALCULATION OF DERIVATIVES OF PHIOB
C
      PART1=-2.0D0*SPBC1*DUM*DUM1
      PART2=-3.0D0*SPBC2*DUM**2*DUM2
      PART3=-4.0D0*SPBC3*DUM**3*DUM3
      PART1=(PART1+PART2+PART3)*(PHIBOB-PHIBOI)
      DO 78 I=1,9
         DPHIOB(I)=PART1*DGBDQ(I)
   78 CONTINUE
C
C         CALCULATION OF PHIA
C
   90 VTPHI=0.0D0
      VH1=0.0D0
      VC=0.0D0
      VH2=0.0D0
C
C         CALCULATE INDICES FOR COORDINATES
C
      DO 100 K=4,6
         M=3
         J=1
         J3=3
         J2=2
         J1=1
         K3=3*K
         K2=K3-1
         K1=K2-1
C
C         CALCULATE INDICES FOR R
C
         JM=(J-1)*(2*N-J)/2+M-J
         KM=(M-1)*(2*N-M)/2+K-M
C
C         CALCULATE RELATIVE COORDINATES
C
         D1=-T1(JM)
         D2=-T2(JM)
         D3=-T3(JM)
         D4=T1(KM)
         D5=T2(KM)
         D6=T3(KM)
C
C         CALCULATE PHIA 
C
         CTHETA=(D1*D4+D2*D5+D3*D6)/R(JM)/R(KM)
         IF (CTHETA .GT. 1.0D0) CTHETA=1.0D0
         IF (CTHETA .LT. -1.0D0) CTHETA=-1.0D0
         THETA(K+3*(J-2))=DACOS(CTHETA)
C
C         CALCULATION OF DPHIDQ
C  
         DUM=THETA(K+3*(J-2))-PHIAO
         DUMM=DEXP(-VH2AC*DUM**2)
         PART1=0.5D0*FPHIA*DUM**2*SCALEP
         PART2=APHIA*DUM**3*SCALEP
         PART3=0.5D0*FPHIA*DUMM*DUM**2
         VH1=PART1+VH1
         VC=PART2+VC
         VH2=PART3+VH2
         DUM1=0.5D0*FPHIAZ*DUM**2*SCALEP
         DUM2=DUM**3*APHIAZ*SCALEP
         DUM3=DUM1*DUMM/SCALEP
         DO 115 I=1,9
            PDOT(I)=DSEADQ(I)*(PART1+PART2-PART3)*DUMSLA+PDOT(I)
            PDOT(I)=(DS1ADQ(I)*DUM1+DS1CA(I)*DUM2)*SEA*DUMSLA+PDOT(I)
            PDOT(I)=(DS1ADQ(I)*DUM3)*(1.0D0-SEA)*DUMSLA+PDOT(I)
  115    CONTINUE
         DUM4=FPHIA*DUM*SEA*DUMSLA*SCALEP
         DUM5=3.0D0*DUM**2*SEA*DUMSLA*APHIA*SCALEP
         DUM6=-(VH2AC*DUM**3*DUMM*FPHIA)*(1.0D0-SEA)*DUMSLA
         DUM7=(FPHIA*DUMM*DUM)*(1.0D0-SEA)*DUMSLA
         DUM8=DUM4+DUM5+DUM6+DUM7
         DO 120 I=1,9
            PDOT(I)=-DPHIOA(I)*DUM8+PDOT(I)
  120    CONTINUE
         DUM1=-1.0D0/DSQRT(1.0D0-CTHETA**2)*DUM8
         RJK=R(JM)*R(KM)
         RJ2=R(JM)**2
         RK2=R(KM)**2
         DUM2=CTHETA/RJ2
         PDOT(J1)=PDOT(J1)+DUM1*(D4/RJK-D1*DUM2)
         PDOT(J2)=PDOT(J2)+DUM1*(D5/RJK-D2*DUM2)
         PDOT(J3)=PDOT(J3)+DUM1*(D6/RJK-D3*DUM2)
         DUM2=CTHETA/RK2
         PDOT(K1)=PDOT(K1)+DUM1*(D1/RJK-D4*DUM2)
         PDOT(K2)=PDOT(K2)+DUM1*(D2/RJK-D5*DUM2)
         PDOT(K3)=PDOT(K3)+DUM1*(D3/RJK-D6*DUM2)
         PDOT(7)=PDOT(7)+DUM1*((-D1-D4)/RJK+CTHETA*(D1/RJ2+D4/RK2))
         PDOT(8)=PDOT(8)+DUM1*((-D2-D5)/RJK+CTHETA*(D2/RJ2+D5/RK2))
         PDOT(9)=PDOT(9)+DUM1*((-D3-D6)/RJK+CTHETA*(D3/RJ2+D6/RK2))
  100 CONTINUE
      VPHIA=((VH1+VC)*SEA+VH2*(1.0D0-SEA))
      VTPHIA=VPHIA*DUMSLA
      DO 130 I=1,9
         IF (GA.LE.SLGAC) GOTO 110
         PDOT(I)=-DSLADQ(I)*VPHIA+PDOT(I)
  130 CONTINUE
C
C         CALCULATION OF PHIB
C
  110 VH1=0.0D0
      VC=0.0D0
      VH2=0.0D0
C
C         CALCULATE INDICES FOR COORDINATES
C
      DO 145 K=4,6
         M=3
         J=2
         J3=6
         J2=5
         J1=4
         K3=3*K
         K2=K3-1
         K1=K2-1
C
C         CALCULATE INDICES FOR R
C
         JM=(J-1)*(2*N-J)/2+M-J
         KM=(M-1)*(2*N-M)/2+K-M
C
C         CALCULATE RELATIVE COORDINATES
C
         D1=-T1(JM)
         D2=-T2(JM)
         D3=-T3(JM)
         D4=T1(KM)
         D5=T2(KM)
         D6=T3(KM)
C
C         CALCULATE PHIB
C
         CTHETA=(D1*D4+D2*D5+D3*D6)/R(JM)/R(KM)
         IF (CTHETA .GT. 1.0D0) CTHETA=1.0D0
         IF (CTHETA .LT. -1.0D0) CTHETA=-1.0D0
         THETA(K+3*(J-2))=DACOS(CTHETA)
C
C         CALCULATION OF DPHIBDQ
C  
         DUM=THETA(K+3*(J-2))-PHIBO
         DUMM=DEXP(-VH2BC*DUM**2)
         PART1=0.5D0*FPHIB*DUM**2*SCALEP
         PART2=APHIB*DUM**3*SCALEP
         PART3=0.5D0*FPHIB*DUMM*DUM**2
         VH1=PART1+VH1
         VC=PART2+VC
         VH2=PART3+VH2
         DUM1=0.5D0*FPHIBZ*DUM**2*SCALEP
         DUM2=DUM**3*APHIBZ*SCALEP
         DUM3=DUM1*DUMM/SCALEP
         DO 135 I=1,9
            PDOT(I)=DSEBDQ(I)*(PART1+PART2-PART3)*DUMSLB+PDOT(I)
            PDOT(I)=(DS1BDQ(I)*DUM1+DS1CB(I)*DUM2)*SEB*DUMSLB+PDOT(I)
            PDOT(I)=(DS1BDQ(I)*DUM3)*(1.0D0-SEB)*DUMSLB+PDOT(I)
  135    CONTINUE
         DUM4=FPHIB*DUM*SEB*DUMSLB*SCALEP
         DUM5=3.0D0*DUM**2*SEB*DUMSLB*APHIB*SCALEP
         DUM6=-(VH2BC*DUM**3*DUMM*FPHIB)*(1.0D0-SEB)*DUMSLB
         DUM7=(FPHIB*DUMM*DUM)*(1.0D0-SEB)*DUMSLB
         DUM8=DUM4+DUM5+DUM6+DUM7
         DO 140 I=1,9
            PDOT(I)=-DPHIOB(I)*DUM8+PDOT(I)
  140    CONTINUE
         DUM1=-1.0D0/DSQRT(1.0D0-CTHETA**2)*DUM8
         RJK=R(JM)*R(KM)
         RJ2=R(JM)**2
         RK2=R(KM)**2
         DUM2=CTHETA/RJ2
         PDOT(J1)=PDOT(J1)+DUM1*(D4/RJK-D1*DUM2)
         PDOT(J2)=PDOT(J2)+DUM1*(D5/RJK-D2*DUM2)
         PDOT(J3)=PDOT(J3)+DUM1*(D6/RJK-D3*DUM2)
         DUM2=CTHETA/RK2
         PDOT(K1)=PDOT(K1)+DUM1*(D1/RJK-D4*DUM2)
         PDOT(K2)=PDOT(K2)+DUM1*(D2/RJK-D5*DUM2)
         PDOT(K3)=PDOT(K3)+DUM1*(D3/RJK-D6*DUM2)
         PDOT(7)=PDOT(7)+DUM1*((-D1-D4)/RJK+CTHETA*(D1/RJ2+D4/RK2))
         PDOT(8)=PDOT(8)+DUM1*((-D2-D5)/RJK+CTHETA*(D2/RJ2+D5/RK2))
         PDOT(9)=PDOT(9)+DUM1*((-D3-D6)/RJK+CTHETA*(D3/RJ2+D6/RK2))
  145 CONTINUE
      VPHIB=((VH1+VC)*SEB+VH2*(1.0D0-SEB))
      VTPHIB=VPHIB*DUMSLB
      DO 148 I=1,9
         IF (GB.LE.SLGBC) GOTO 149
         PDOT(I)=-DSLBDQ(I)*VPHIB+PDOT(I)
  148 CONTINUE
C
C         CALCULATION OF VCLACLB AND ITS DERIVATIVES
C
C         CALCULATE INDICES FOR COORDINATES
C
  149 J=1
      M=3
      K=2
C
C         CALCULATE INDICES FOR R
C
      JM=(J-1)*(2*N-J)/2+M-J
      KM=(K-1)*(2*N-K)/2+M-K
      JK=(J-1)*(2*N-J)/2+K-J
C
C         CALCULATE RELATIVE COOR.
C
      D1=-T1(JM)
      D2=-T2(JM)
      D3=-T3(JM)
      D4=-T1(KM)
      D5=-T2(KM)
      D6=-T3(KM)
      D7=-T1(JK)
      D8=-T2(JK)
      D9=-T3(JK)
C
C         CALCULATE CLACCLB ANGLE
C
      CTHETA=(D1*D4+D2*D5+D3*D6)/R(JM)/R(KM)
      IF(CTHETA .GT. 1.0D0)CTHETA=1.0D0
      IF(CTHETA .LT. -1.0D0)CTHETA=-1.0D0
      THETA(7)=DACOS(CTHETA)
      DTHET=THETA(7)
C
C         CALCULATION OF VCLACLB
C
      DUM=(DCOS(DTHET/2.0D0))**2
      VCLCL=(PCLCLC/R(JK)**6+PCLCLG/R(JK)**4)*DUM
      VTCLCL=VCLCL*DUMSLA*DUMSLB
C
C         CALCULATION OF DVTCLCLDQ
C
      IF (DTHET .LE. 0.1D0) THEN
         DUM1=0.5D0-DTHET**2/48.0D0+DTHET**4/3840.D0-DTHET**6/645120.D0
         DUM2=1.0D0-DTHET**2/6.0D0+DTHET**4/120.0D0-DTHET**6/5040.0D0
         DUM1=DUM1/DUM2*DCOS(DTHET/2.0D0)
      ELSEIF ((PI-DTHET).LE.0.1D0) THEN
         DUMM=PI-DTHET
         DUM1=0.5D0-DUMM**2/48.0D0+DUMM**4/3840.D0-DUMM**6/645120.D0
         DUM2=1.0D0-DUMM**2/6.0D0+DUMM**4/120.0D0-DUMM**6/5040.0D0
         DUM1=DUM1/DUM2*DSIN(DTHET/2.0D0)
      ELSE
        DUM1=DCOS(DTHET/2.0D0)*DSIN(DTHET/2.0D0)/DSIN(DTHET)
      ENDIF
C
      DUM4=DUMSLA*DUMSLB*(PCLCLC/R(JK)**6+
     #PCLCLG/R(JK)**4)
      RJK=R(JM)*R(KM)
      RJ2=R(JM)**2
      RK2=R(KM)**2
      DUM2=CTHETA/RJ2
      PDOT(1)=PDOT(1)+DUM1*(D4/RJK-D1*DUM2)*DUM4
      PDOT(2)=PDOT(2)+DUM1*(D5/RJK-D2*DUM2)*DUM4
      PDOT(3)=PDOT(3)+DUM1*(D6/RJK-D3*DUM2)*DUM4
      DUM2=CTHETA/RK2
      PDOT(4)=PDOT(4)+DUM1*(D1/RJK-D4*DUM2)*DUM4     
      PDOT(5)=PDOT(5)+DUM1*(D2/RJK-D5*DUM2)*DUM4
      PDOT(6)=PDOT(6)+DUM1*(D3/RJK-D6*DUM2)*DUM4
      PDOT(7)=PDOT(7)+DUM1*((-D1-D4)/RJK+CTHETA*(D1/RJ2+D4/RK2))*DUM4
      PDOT(8)=PDOT(8)+DUM1*((-D2-D5)/RJK+CTHETA*(D2/RJ2+D5/RK2))*DUM4
      PDOT(9)=PDOT(9)+DUM1*((-D3-D6)/RJK+CTHETA*(D3/RJ2+D6/RK2))*DUM4
      DUM4=DUMSLA*DUMSLB*DUM
      DUM5=-PCLCLC*6.0D0/R(JK)**8-PCLCLG*4.0D0/R(JK)**6
      PDOT(1)=PDOT(1)+DUM5*D7*DUM4
      PDOT(2)=PDOT(2)+DUM5*D8*DUM4
      PDOT(3)=PDOT(3)+DUM5*D9*DUM4
      PDOT(4)=PDOT(4)-(DUM5*D7*DUM4)
      PDOT(5)=PDOT(5)-(DUM5*D8*DUM4)
      PDOT(6)=PDOT(6)-(DUM5*D9*DUM4)
      DO 150 I=1,9
         PDOT(I)=-VCLCL*DSLADQ(I)*DUMSLB+PDOT(I)
         PDOT(I)=-VCLCL*DSLBDQ(I)*DUMSLA+PDOT(I)
  150 CONTINUE
C
C         CALCULATION OF SFT,STH,VHCH, AND THEIR DERIVATIVES
C
      IF (GA.GE.GATS) THEN
         SIGN=1 
         STHC=STHCA
         STHE=STHEA
         THR=THA
         GOTO 151
      ENDIF
         SIGN=-1
         STHC=STHCB
         STHE=STHEB
         THR=THB
  151 CONTINUE 
      GATH=SIGN*(GA-GATS)
      SFT=SFTA*DEXP(-SFTC*GATH**2)+(1.0D0-SFTA)*DEXP(-SFTD*GATH**4)
      STH=DEXP(-STHC*GATH**STHE)
      DUM1=-2.0D0*SFTC*SIGN*GATH*SFTA*DEXP(-SFTC*GATH**2)
      DUM2=-4.0D0*SIGN*GATH**3*(1.0D0-SFTA)*DEXP(-SFTD*GATH**4)*SFTD
      DUM3=-SIGN*STHE*STHC*GATH**(STHE-1.0D0)*STH*(THTS-THR)
      DUM1=DUM1+DUM2
      DUM4=DUM1*(FTHTS-FTHB)
      DUM5=DUM1*(ATHTS-ATHB)
      DUM6=DUM1*(BTHTS-BTHB)
      FTH=FTHB+(FTHTS-FTHB)*SFT
      ATH=ATHB+(ATHTS-ATHB)*SFT
      BTH=BTHB+(BTHTS-BTHB)*SFT
      THO=THR+(THTS-THR)*STH
      M=3
      VHCH=0.0D0
      DO 170 I=1,3
         IF (I .EQ. 1) THEN
            J=4
            K=5
         ELSEIF (I .EQ. 2) THEN
            J=4
            K=6
         ELSE
            J=5
            K=6
         ENDIF
C
C         CALCULATE INDICES FOR COORDINATES
C
         J3=3*J
         J2=J3-1
         J1=J2-1
         K3=3*K
         K2=K3-1
         K1=K2-1
C
C         CALCULATE INDICES FOR R
C
         JM=(M-1)*(2*N-M)/2+J-M
         KM=(M-1)*(2*N-M)/2+K-M
C
C         CALCULATE RELATIVE COORDINATES
C
         D1=T1(JM)
         D2=T2(JM)
         D3=T3(JM)
         D4=T1(KM)
         D5=T2(KM)
         D6=T3(KM)
C
C         CALCULATE HCH ANGLE
C
         CTHETA=(D1*D4+D2*D5+D3*D6)/R(JM)/R(KM)
         IF (CTHETA .GT.1.0D0) CTHETA=1.0D00
         IF (CTHETA .LE.-1.0D0) CTHETA=-1.0D0
         THETA(I+7)=DACOS(CTHETA)
         DTHET=THETA(I+7)
         DUM=DTHET-THO
         VHCH=0.5D0*FTH*DUM**2+ATH*DUM**3+BTH*DUM**4+VHCH
         DUM7=0.5D0*DUM4*DUM**2+DUM5*DUM**3+DUM6*DUM**4
         DO 160 L=1,9
            PDOT(L)=DUM7*DGADQ(L)+PDOT(L)
  160    CONTINUE
         DUM7=-FTH*DUM*DUM3
         DUM8=-ATH*DUM**2*DUM3*3.0D0
         DUM9=-BTH*DUM**3*DUM3*4.0D0
         DUM7=DUM7+DUM8+DUM9
         DO 165 L=1,9
            PDOT(L)=DUM7*DGADQ(L)+PDOT(L)
  165    CONTINUE
         DUM1=-(FTH*DUM+3.0D0*ATH*DUM**2+4.0D0*BTH*DUM**3)/DSIN(DTHET)
         RJK=R(JM)*R(KM)
         RJ2=R(JM)**2
         RK2=R(KM)**2
         DUM2=CTHETA/RJ2
         PDOT(J1)=PDOT(J1)+DUM1*(D4/RJK-D1*DUM2)
         PDOT(J2)=PDOT(J2)+DUM1*(D5/RJK-D2*DUM2)
         PDOT(J3)=PDOT(J3)+DUM1*(D6/RJK-D3*DUM2)
         DUM2=CTHETA/RK2
         PDOT(K1)=PDOT(K1)+DUM1*(D1/RJK-D4*DUM2)
         PDOT(K2)=PDOT(K2)+DUM1*(D2/RJK-D5*DUM2)
         PDOT(K3)=PDOT(K3)+DUM1*(D3/RJK-D6*DUM2)
         PDOT(7)=PDOT(7)+DUM1*((-D1-D4)/RJK+CTHETA*(D1/RJ2+D4/RK2))
         PDOT(8)=PDOT(8)+DUM1*((-D2-D5)/RJK+CTHETA*(D2/RJ2+D5/RK2))
         PDOT(9)=PDOT(9)+DUM1*((-D3-D6)/RJK+CTHETA*(D3/RJ2+D6/RK2))
  170 CONTINUE
C
C         CALCULATION OF THE LONG RANGE POTENTIAL AND DERIVATIVES
C         VTLRA. DETERMINE R RELATIVE BETWEEN CLB OR BR AND C.
C
      VTLRA=0.0D0
      IF (GA.LE.SLGAC) GOTO 300
      MK=6
      T1R=-T1(MK)/R(MK)
      T2R=-T2(MK)/R(MK)
      T3R=-T3(MK)/R(MK)
C
C         COORDINATES OF THE MASS CORRESPONDING TO 3 HYDROGENS
C
      CHD=0.341149D0
      X3H=Q(7)-CHD*T1R
      Y3H=Q(8)-CHD*T2R
      Z3H=Q(9)-CHD*T3R
      W3H=3.0D0*W(4)
      WT=W(2)+W(3)+W3H
      WTI=1.0D0/WT
      XCM=WTI*(W3H*X3H+W(3)*Q(7)+W(2)*Q(4))
      YCM=WTI*(W3H*Y3H+W(3)*Q(8)+W(2)*Q(5))
      ZCM=WTI*(W3H*Z3H+W(3)*Q(9)+W(2)*Q(6))
      T1CM=Q(1)-XCM
      T2CM=Q(2)-YCM
      T3CM=Q(3)-ZCM
      T4CM=Q(4)-XCM
      T5CM=Q(5)-YCM
      T6CM=Q(6)-ZCM
      RJCM=DSQRT(T1CM**2+T2CM**2+T3CM**2)
      RKCM=DSQRT(T4CM**2+T5CM**2+T6CM**2)
      CDELTA=(T1CM*T4CM+T2CM*T5CM+T3CM*T6CM)/RJCM/RKCM
      IF (CDELTA.GT.1.0D0) CDELTA=1.0D0
      IF (CDELTA.LT.-1.0D0) CDELTA=-1.0D0
      DELTA=DACOS(CDELTA)
      THET=PI-DELTA
      CTHETA=DCOS(THET)
      DUM1=VLRAA/RJCM**2*CTHETA
      VLRA=DUM1
      VTLRA=VLRA*SLRA
      DUM=W(3)*WTI
      DU=W3H*WTI
      DUM4=1.0D0/R(MK)
      PART1=T1(MK)/R(MK)**2
      PART2=T2(MK)/R(MK)**2
      PART3=T3(MK)/R(MK)**2
      DXCDXM=DUM+DU*(1.0D0-CHD*(-DUM4+PART1*DRBDQ(7)))
      DYCDXM=-DU*CHD*PART2*DRBDQ(7)
      DZCDXM=-DU*CHD*PART3*DRBDQ(7)
      DXCDYM=-DU*CHD*PART1*DRBDQ(8)
      DYCDYM=DUM+DU*(1.0D0-CHD*(-DUM4+PART2*DRBDQ(8)))
      DZCDYM=-DU*CHD*PART3*DRBDQ(8)
      DXCDZM=-DU*CHD*PART1*DRBDQ(9)
      DYCDZM=-DU*CHD*PART2*DRBDQ(9)
      DZCDZM=DUM+DU*(1.0D0-CHD*(-DUM4+PART3*DRBDQ(9)))
      DUM=W(2)*WTI
      DU=DU*CHD
      DXCDXK=DUM-DU*(DUM4+PART1*DRBDQ(4))
      DYCDXK=-DU*PART2*DRBDQ(4)
      DZCDXK=-DU*PART3*DRBDQ(4)
      DXCDYK=-DU*PART1*DRBDQ(5)
      DYCDYK=DUM-DU*(DUM4+PART2*DRBDQ(5))
      DZCDYK=-DU*PART3*DRBDQ(5)
      DXCDZK=-DU*PART1*DRBDQ(6)
      DYCDZK=-DU*PART2*DRBDQ(6)
      DZCDZK=DUM-DU*(DUM4+PART3*DRBDQ(6))
      DRJDXK=-(T1CM*DXCDXK+T2CM*DYCDXK+T3CM*DZCDXK)/RJCM
      DRJDYK=-(T1CM*DXCDYK+T2CM*DYCDYK+T3CM*DZCDYK)/RJCM
      DRJDZK=-(T1CM*DXCDZK+T2CM*DYCDZK+T3CM*DZCDZK)/RJCM
      DRJDXM=-(T1CM*DXCDXM+T2CM*DYCDXM+T3CM*DZCDXM)/RJCM
      DRJDYM=-(T1CM*DXCDYM+T2CM*DYCDYM+T3CM*DZCDYM)/RJCM
      DRJDZM=-(T1CM*DXCDZM+T2CM*DYCDZM+T3CM*DZCDZM)/RJCM
      DRKDXK=(T4CM*(1.0D0-DXCDXK)-T5CM*DYCDXK-T6CM*DZCDXK)/RKCM
      DRKDYK=(-T4CM*DXCDYK+T5CM*(1.0D0-DYCDYK)-T6CM*DZCDYK)/RKCM
      DRKDZK=(-T4CM*DXCDZK-T5CM*DYCDZK+T6CM*(1.0D0-DZCDZK))/RKCM
      DRKDXM=-(T4CM*DXCDXM+T5CM*DYCDXM+T6CM*DZCDXM)/RKCM
      DRKDYM=-(T4CM*DXCDYM+T5CM*DYCDYM+T6CM*DZCDYM)/RKCM
      DRKDZM=-(T4CM*DXCDZM+T5CM*DYCDZM+T6CM*DZCDZM)/RKCM
      DO 260 I=1,9
         PDOT(I)=PDOT(I)+VLRA*DSLADQ(I)
  260 CONTINUE
      DUM3=(-DUM1*2.0D0/RJCM)*SLRA
      PDOT(1)=PDOT(1)+DUM3*T1CM/RJCM
      PDOT(2)=PDOT(2)+DUM3*T2CM/RJCM
      PDOT(3)=PDOT(3)+DUM3*T3CM/RJCM     
      PDOT(4)=PDOT(4)+DUM3*DRJDXK
      PDOT(5)=PDOT(5)+DUM3*DRJDYK
      PDOT(6)=PDOT(6)+DUM3*DRJDZK
      PDOT(7)=PDOT(7)+DUM3*DRJDXM
      PDOT(8)=PDOT(8)+DUM3*DRJDYM
      PDOT(9)=PDOT(9)+DUM3*DRJDZM
      RJK=RJCM*RKCM
      RJ2=RJCM**2
      RK2=RKCM**2
      DUM1=VLRAA/RJ2*SLRA
      PDOT(1)=-(T4CM/RJK-T1CM/RJ2*CDELTA)*DUM1+PDOT(1)
      PDOT(2)=-(T5CM/RJK-T2CM/RJ2*CDELTA)*DUM1+PDOT(2)
      PDOT(3)=-(T6CM/RJK-T3CM/RJ2*CDELTA)*DUM1+PDOT(3)
C
      PDOT(7)=PDOT(7)-DUM1*((-DXCDXM*(T4CM+T1CM)-DYCDXM*(T5CM+T2CM)
     #-DZCDXM*(T6CM+T3CM))/RJCM/RKCM-CDELTA*(DRJDXM/RJCM+DRKDXM/RKCM))
C
      PDOT(8)=PDOT(8)-DUM1*((-DXCDYM*(T4CM+T1CM)-DYCDYM*(T5CM+T2CM)
     #-DZCDYM*(T6CM+T3CM))/RJCM/RKCM-CDELTA*(DRJDYM/RJCM+DRKDYM/RKCM))
      PDOT(9)=PDOT(9)-DUM1*((-DXCDZM*(T4CM+T1CM)-DYCDZM*(T5CM+T2CM)
     #-DZCDZM*(T6CM+T3CM))/RJCM/RKCM-CDELTA*(DRJDZM/RJCM+DRKDZM/RKCM))
C
      PDOT(4)=-DUM1*((-DXCDXK*T4CM+(1.0D0-DXCDXK)*T1CM-DYCDXK*(T5CM
     #+T2CM)-DZCDXK*(T6CM+T3CM))/RJCM/RKCM-CDELTA*(DRJDXK/RJCM+
     #DRKDXK/RKCM))+PDOT(4)
      PDOT(5)=-DUM1*((-DYCDYK*T5CM+(1.0D0-DYCDYK)*T2CM-DXCDYK*(T4CM
     #+T1CM)-DZCDYK*(T6CM+T3CM))/RJCM/RKCM-CDELTA*(DRJDYK/RJCM+
     #DRKDYK/RKCM))+PDOT(5)
      PDOT(6)=-DUM1*((-DZCDZK*T6CM+(1.0D0-DZCDZK)*T3CM-DYCDZK*(T5CM
     #+T2CM)-DXCDZK*(T4CM+T1CM))/RJCM/RKCM-CDELTA*(DRJDZK/RJCM+
     #DRKDZK/RKCM))+PDOT(6)
C
C         CALCULATE VTLRB
C         DETERMINE R RELATIVE BETWEEN CLA AND C
C
  300 VTLRB=0.0D0
      IF (GB.LE.SLGBC) GOTO 335
      MK=2
      T1R=-T1(MK)/R(MK)
      T2R=-T2(MK)/R(MK)
      T3R=-T3(MK)/R(MK)
C
C         COORDINATES OF THE MASS CORRESPONDING TO 3 HYDROGENS
C
      CHD=0.341149D0
      X3H=Q(7)-CHD*T1R
      Y3H=Q(8)-CHD*T2R
      Z3H=Q(9)-CHD*T3R
      W3H=3.0D0*W(4)
      WT=W(1)+W(3)+W3H
      WTI=1.0D0/WT
      XCM=WTI*(W3H*X3H+W(3)*Q(7)+W(1)*Q(1))
      YCM=WTI*(W3H*Y3H+W(3)*Q(8)+W(1)*Q(2))
      ZCM=WTI*(W3H*Z3H+W(3)*Q(9)+W(1)*Q(3))
      T1CM=Q(4)-XCM
      T2CM=Q(5)-YCM
      T3CM=Q(6)-ZCM
      T4CM=Q(1)-XCM
      T5CM=Q(2)-YCM
      T6CM=Q(3)-ZCM
      RJCM=DSQRT(T1CM**2+T2CM**2+T3CM**2)
      RKCM=DSQRT(T4CM**2+T5CM**2+T6CM**2)
      CDELTA=(T1CM*T4CM+T2CM*T5CM+T3CM*T6CM)/RJCM/RKCM
      IF (CDELTA.GT.1.0D0) CDELTA=1.0D0
      IF (CDELTA.LT.-1.0D0) CDELTA=-1.0D0
      DELTA=DACOS(CDELTA)
      THET=PI-DELTA
      CTHETA=DCOS(THET)
      DUM1=VLRBA/RJCM**2*CTHETA
      VLRB=DUM1
      VTLRB=VLRB*SLRB
      DUM=W(3)*WTI
      DU=W3H*WTI
      DUM4=1.0D0/R(MK)
      PART1=T1(MK)/R(MK)**2
      PART2=T2(MK)/R(MK)**2
      PART3=T3(MK)/R(MK)**2
      DXCDXM=DUM+DU*(1.0D0-CHD*(-DUM4+PART1*DRADQ(7)))
      DYCDXM=-DU*CHD*PART2*DRADQ(7)
      DZCDXM=-DU*CHD*PART3*DRADQ(7)
      DXCDYM=-DU*CHD*PART1*DRADQ(8)
      DYCDYM=DUM+DU*(1.0D0-CHD*(-DUM4+PART2*DRADQ(8)))
      DZCDYM=-DU*CHD*PART3*DRADQ(8)
      DXCDZM=-DU*CHD*PART1*DRADQ(9)
      DYCDZM=-DU*CHD*PART2*DRADQ(9)
      DZCDZM=DUM+DU*(1.0D0-CHD*(-DUM4+PART3*DRADQ(9)))
      DUM=W(1)*WTI
      DU=DU*CHD
      DXCDXK=DUM-DU*(DUM4+PART1*DRADQ(1))
      DYCDXK=-DU*PART2*DRADQ(1)
      DZCDXK=-DU*PART3*DRADQ(1)
      DXCDYK=-DU*PART1*DRADQ(2)
      DYCDYK=DUM-DU*(DUM4+PART2*DRADQ(2))
      DZCDYK=-DU*PART3*DRADQ(2)
      DXCDZK=-DU*PART1*DRADQ(3)
      DYCDZK=-DU*PART2*DRADQ(3)
      DZCDZK=DUM-DU*(DUM4+PART3*DRADQ(3))
      DRJDXK=-(T1CM*DXCDXK+T2CM*DYCDXK+T3CM*DZCDXK)/RJCM
      DRJDYK=-(T1CM*DXCDYK+T2CM*DYCDYK+T3CM*DZCDYK)/RJCM
      DRJDZK=-(T1CM*DXCDZK+T2CM*DYCDZK+T3CM*DZCDZK)/RJCM
      DRJDXM=-(T1CM*DXCDXM+T2CM*DYCDXM+T3CM*DZCDXM)/RJCM
      DRJDYM=-(T1CM*DXCDYM+T2CM*DYCDYM+T3CM*DZCDYM)/RJCM
      DRJDZM=-(T1CM*DXCDZM+T2CM*DYCDZM+T3CM*DZCDZM)/RJCM
      DRKDXK=(T4CM*(1.0D0-DXCDXK)-T5CM*DYCDXK-T6CM*DZCDXK)/RKCM
      DRKDYK=(-T4CM*DXCDYK+T5CM*(1.0D0-DYCDYK)-T6CM*DZCDYK)/RKCM
      DRKDZK=(-T4CM*DXCDZK-T5CM*DYCDZK+T6CM*(1.0D0-DZCDZK))/RKCM
      DRKDXM=-(T4CM*DXCDXM+T5CM*DYCDXM+T6CM*DZCDXM)/RKCM
      DRKDYM=-(T4CM*DXCDYM+T5CM*DYCDYM+T6CM*DZCDYM)/RKCM
      DRKDZM=-(T4CM*DXCDZM+T5CM*DYCDZM+T6CM*DZCDZM)/RKCM
      DO 320 I=1,9
         PDOT(I)=PDOT(I)+VLRB*DSLBDQ(I)
  320 CONTINUE
      DUM3=(-DUM1*2.0D0/RJCM)*SLRB
      PDOT(4)=PDOT(4)+DUM3*T1CM/RJCM
      PDOT(5)=PDOT(5)+DUM3*T2CM/RJCM
      PDOT(6)=PDOT(6)+DUM3*T3CM/RJCM     
      PDOT(1)=PDOT(1)+DUM3*DRJDXK
      PDOT(2)=PDOT(2)+DUM3*DRJDYK
      PDOT(3)=PDOT(3)+DUM3*DRJDZK
      PDOT(7)=PDOT(7)+DUM3*DRJDXM
      PDOT(8)=PDOT(8)+DUM3*DRJDYM
      PDOT(9)=PDOT(9)+DUM3*DRJDZM
      RJK=RJCM*RKCM
      RJ2=RJCM**2
      RK2=RKCM**2
      DUM1=VLRBA/RJ2*SLRB
      PDOT(4)=-(T4CM/RJK-T1CM/RJ2*CDELTA)*DUM1+PDOT(4)
      PDOT(5)=-(T5CM/RJK-T2CM/RJ2*CDELTA)*DUM1+PDOT(5)
      PDOT(6)=-(T6CM/RJK-T3CM/RJ2*CDELTA)*DUM1+PDOT(6)
C
      PDOT(7)=PDOT(7)-DUM1*((-DXCDXM*(T4CM+T1CM)-DYCDXM*(T5CM+T2CM)
     #-DZCDXM*(T6CM+T3CM))/RJCM/RKCM-CDELTA*(DRJDXM/RJCM+DRKDXM/RKCM))
C
      PDOT(8)=PDOT(8)-DUM1*((-DXCDYM*(T4CM+T1CM)-DYCDYM*(T5CM+T2CM)
     #-DZCDYM*(T6CM+T3CM))/RJCM/RKCM-CDELTA*(DRJDYM/RJCM+DRKDYM/RKCM))
      PDOT(9)=PDOT(9)-DUM1*((-DXCDZM*(T4CM+T1CM)-DYCDZM*(T5CM+T2CM)
     #-DZCDZM*(T6CM+T3CM))/RJCM/RKCM-CDELTA*(DRJDZM/RJCM+DRKDZM/RKCM))
C
      PDOT(1)=-DUM1*((-DXCDXK*T4CM+(1.0D0-DXCDXK)*T1CM-DYCDXK*(T5CM
     #+T2CM)-DZCDXK*(T6CM+T3CM))/RJCM/RKCM-CDELTA*(DRJDXK/RJCM+
     #DRKDXK/RKCM))+PDOT(1)
      PDOT(2)=-DUM1*((-DYCDYK*T5CM+(1.0D0-DYCDYK)*T2CM-DXCDYK*(T4CM
     #+T1CM)-DZCDYK*(T6CM+T3CM))/RJCM/RKCM-CDELTA*(DRJDYK/RJCM+
     #DRKDYK/RKCM))+PDOT(2)
      PDOT(3)=-DUM1*((-DZCDZK*T6CM+(1.0D0-DZCDZK)*T3CM-DYCDZK*(T5CM
     #+T2CM)-DXCDZK*(T4CM+T1CM))/RJCM/RKCM-CDELTA*(DRJDZK/RJCM+
     #DRKDZK/RKCM))+PDOT(3)
C
C         CALCULATION OF VCLHA
C
 335  VTCLAH=0.0D0
      IF(GA.LE.SLGAC)GOTO 350
      VCLAH=0.0D0
      J=1
      DO 340 K=4,6
         K3=3*K
         K2=K3-1
         K1=K2-1
         JK=(J-1)*(2*N-J)/2+K-J
         DUM1=VCLAHD/R(JK)**4
         DUM=4.0D0*DUM1/R(JK)**2*SLRA
         PDOT(1)=DUM*T1(JK)+PDOT(1)
         PDOT(2)=DUM*T2(JK)+PDOT(2)
         PDOT(3)=DUM*T3(JK)+PDOT(3)
         PDOT(K1)=-DUM*T1(JK)+PDOT(K1)
         PDOT(K2)=-DUM*T2(JK)+PDOT(K2)
         PDOT(K3)=-DUM*T3(JK)+PDOT(K3)
         VCLAH=DUM1+VCLAH
  340 CONTINUE
      DO 345 I=1,9
         PDOT(I)=DSLADQ(I)*VCLAH+PDOT(I)
  345 CONTINUE
      VTCLAH=VCLAH*SLRA
C
C         CALCULATION OF VCLHB
C
  350 VTCLBH=0.0D0
      IF (GB.LE.SLGBC) GOTO 400
      VCLBH=0.0D0
      J=2
      DO 360 K=4,6
         K3=3*K
         K2=K3-1
         K1=K2-1
         JK=(J-1)*(2*N-J)/2+K-J
         DUM1=VCLBHD/R(JK)**4
         DUM=4.0D0*DUM1/R(JK)**2*SLRB
         PDOT(4)=DUM*T1(JK)+PDOT(4)
         PDOT(5)=DUM*T2(JK)+PDOT(5)
         PDOT(6)=DUM*T3(JK)+PDOT(6)
         PDOT(K1)=-DUM*T1(JK)+PDOT(K1)
         PDOT(K2)=-DUM*T2(JK)+PDOT(K2)
         PDOT(K3)=-DUM*T3(JK)+PDOT(K3)
         VCLBH=DUM1+VCLBH
  360 CONTINUE
      DO 365 I=1,9
         PDOT(I)=DSLBDQ(I)*VCLBH+PDOT(I)
  365 CONTINUE
      VTCLBH=VCLBH*SLRB
C
C         CALCULATION OF PHIA AND ETA OFF DIAGONAL TERMS
C
  400 VTPEA=0.0D0
      IF (GA.LE.SLGAC) GOTO 450
      DUM=DEXP(-GPHIAC*(RA-RAC)**2)
      GPHI=GPHIAZ*DUM
      DDUM=-2.0D0*GPHIAC*(RA-RAC)*GPHI
      DO 405 I=1,9
         DGPHI(I)=DDUM*DRADQ(I)
  405 CONTINUE
      M=3
      J=1
      K=2
C
C         CALCULATE INDICES FOR R
C
      JM=(J-1)*(2*N-J)/2+M-J
      KM=(K-1)*(2*N-K)/2+M-K
C
C         CALCULATE RELATIVE COOR.
C
      D1=-T1(JM)
      D2=-T2(JM)
      D3=-T3(JM)
      D4=-T1(KM)
      D5=-T2(KM)
      D6=-T3(KM)
C
C         CALCULATE CLACCLB ANGLE
C
      CTHETA=(D1*D4+D2*D5+D3*D6)/R(JM)/R(KM)
      IF (CTHETA .GT. 1.0D0) CTHETA=1.0D0
      IF (CTHETA .LT. -1.0D0) CTHETA=-1.0D0
      THETA(7)=DACOS(CTHETA)
      DTHET=THETA(7)
      DUMM=PI-DTHET
      IF (DUMM.LE.0.1D0) THEN
         DUM1=1.0D0/(1.0D0-DUMM**2/81.0D0+DUMM**4/120.0D0
     *          -DUMM**6/5040.D0)
      ELSE
         DUM1=DUMM/SIN(DUMM)
      ENDIF
C
      RJK=R(JM)*R(KM)
      RJ2=R(JM)**2
      RK2=R(KM)**2
      DUM2=CTHETA/RJ2
      DCLCCL(1)=DUM1*(D4/RJK-D1*DUM2)
      DCLCCL(2)=DUM1*(D5/RJK-D2*DUM2)
      DCLCCL(3)=DUM1*(D6/RJK-D3*DUM2)
      DUM2=CTHETA/RK2
      DCLCCL(4)=DUM1*(D1/RJK-D4*DUM2)
      DCLCCL(5)=DUM1*(D2/RJK-D5*DUM2)
      DCLCCL(6)=DUM1*(D3/RJK-D6*DUM2)
      DCLCCL(7)=DUM1*((-D1-D4)/RJK+CTHETA*(D1/RJ2+D4/RK2))
      DCLCCL(8)=DUM1*((-D2-D5)/RJK+CTHETA*(D2/RJ2+D5/RK2))
      DCLCCL(9)=DUM1*((-D3-D6)/RJK+CTHETA*(D3/RJ2+D6/RK2))
C
C         CALCULATE PHIA ANGLES
C
      VPE=0.0D0
      DO 410 K=4,6
         K3=3*K
         K2=K3-1
         K1=K2-1
C
C         CALCULATE INDICES FOR R
C
      KM=(M-1)*(2*N-M)/2+K-M
C
C         CALCULATE RELATIVE COORDINATES
C
         D4=T1(KM)
         D5=T2(KM)
         D6=T3(KM)
C
C         CALCULATE PHIA 
C
         CTHETA=(D1*D4+D2*D5+D3*D6)/R(JM)/R(KM)
         IF (CTHETA .GT. 1.0D0) CTHETA=1.0D0
         IF (CTHETA .LT. -1.0D0) CTHETA=-1.0D0
         THETA(K+3*(J-2))=DACOS(CTHETA)
C
C         CALCULATION OF DPHIDQ
C  
         DUM=THETA(K+3*(J-2))-PHIAO
         WHAM=GPHI*DUM*DUMM**2
         VPE=WHAM+VPE
         PART1=DUM*DUMM**2*SLRA
         PART2=2.0D0*GPHI*DUM*SLRA
         PART3=GPHI*DUMM**2*SLRA
         DO 415 I=1,9
            PDOT(I)=PDOT(I)+DGPHI(I)*PART1
            PDOT(I)=PDOT(I)+DCLCCL(I)*PART2
            PDOT(I)=PDOT(I)-DPHIOA(I)*PART3
  415    CONTINUE
         DUM1=-1.0D0/DSQRT(1.0D0-CTHETA**2)*PART3
         RJK=R(JM)*R(KM)
         RJ2=R(JM)**2
         RK2=R(KM)**2
         DUM2=CTHETA/RJ2
         PDOT(1)=PDOT(1)+DUM1*(D4/RJK-D1*DUM2)
         PDOT(2)=PDOT(2)+DUM1*(D5/RJK-D2*DUM2)
         PDOT(3)=PDOT(3)+DUM1*(D6/RJK-D3*DUM2)
         DUM2=CTHETA/RK2
         PDOT(K1)=PDOT(K1)+DUM1*(D1/RJK-D4*DUM2)
         PDOT(K2)=PDOT(K2)+DUM1*(D2/RJK-D5*DUM2)
         PDOT(K3)=PDOT(K3)+DUM1*(D3/RJK-D6*DUM2)
         PDOT(7)=PDOT(7)+DUM1*((-D1-D4)/RJK+CTHETA*(D1/RJ2+D4/RK2))
         PDOT(8)=PDOT(8)+DUM1*((-D2-D5)/RJK+CTHETA*(D2/RJ2+D5/RK2))
         PDOT(9)=PDOT(9)+DUM1*((-D3-D6)/RJK+CTHETA*(D3/RJ2+D6/RK2))
  410 CONTINUE
      VTPEA=VPE*SLRA
      DO 425 I=1,9
         PDOT(I)=PDOT(I)+DSLADQ(I)*VPE
  425 CONTINUE      
C
C         CALCULATION OF PHIB AND ETA OFF DIAGONAL TERMS
C
  450 VTPEB=0.0D0
      IF (GB.LE.SLGBC) GOTO 500
      DUM=DEXP(-GPHIBC*(RB-RBC)**2)
      GPHI=GPHIBZ*DUM
      DDUM=-2.0D0*GPHIBC*(RB-RBC)*GPHI
      DO 455 I=1,9
         DGPHI(I)=DDUM*DRBDQ(I)
  455 CONTINUE
      M=3
      J=2
      K=1
C
C         CALCULATE INDICES FOR R
C
      JM=(J-1)*(2*N-J)/2+M-J
      KM=(K-1)*(2*N-K)/2+M-K
C
C         CALCULATE RELATIVE COOR.
C
      D1=-T1(JM)
      D2=-T2(JM)
      D3=-T3(JM)
      D4=-T1(KM)
      D5=-T2(KM)
      D6=-T3(KM)
C
C         CALCULATE CLACCLB ANGLE
C
      CTHETA=(D1*D4+D2*D5+D3*D6)/R(JM)/R(KM)
      IF (CTHETA .GT. 1.0D0) CTHETA=1.0D0
      IF (CTHETA .LT. -1.0D0) CTHETA=-1.0D0
      THETA(7)=DACOS(CTHETA)
      DTHET=THETA(7)
      DUMM=PI-DTHET
      IF (DUMM.LE.0.1D0) THEN
         DUM1=1.0D0/(1.0D0-DUMM**2/81.0D0+DUMM**4/120.0D0
     *             -DUMM**6/5040.D0)
      ELSE
         DUM1=DUMM/SIN(DUMM)
      ENDIF
C
      RJK=R(JM)*R(KM)
      RJ2=R(JM)**2
      RK2=R(KM)**2
      DUM2=CTHETA/RJ2
      DCLCCL(4)=DUM1*(D4/RJK-D1*DUM2)
      DCLCCL(5)=DUM1*(D5/RJK-D2*DUM2)
      DCLCCL(6)=DUM1*(D6/RJK-D3*DUM2)
      DUM2=CTHETA/RK2
      DCLCCL(1)=DUM1*(D1/RJK-D4*DUM2)
      DCLCCL(2)=DUM1*(D2/RJK-D5*DUM2)
      DCLCCL(3)=DUM1*(D3/RJK-D6*DUM2)
      DCLCCL(7)=DUM1*((-D1-D4)/RJK+CTHETA*(D1/RJ2+D4/RK2))
      DCLCCL(8)=DUM1*((-D2-D5)/RJK+CTHETA*(D2/RJ2+D5/RK2))
      DCLCCL(9)=DUM1*((-D3-D6)/RJK+CTHETA*(D3/RJ2+D6/RK2))
C
C         CALCULATE PHIB ANGLES
C
      VPE=0.0D0
      DO 460 K=4,6
         K3=3*K
         K2=K3-1
         K1=K2-1
C
C         CALCULATE INDICES FOR R
C
         KM=(M-1)*(2*N-M)/2+K-M
C
C         CALCULATE RELATIVE COORDINATES
C
         D4=T1(KM)
         D5=T2(KM)
         D6=T3(KM)
C     CALCULATE PHIB 
         CTHETA=(D1*D4+D2*D5+D3*D6)/R(JM)/R(KM)
         IF (CTHETA .GT. 1.0D0) CTHETA=1.0D0
         IF (CTHETA .LT. -1.0D0) CTHETA=-1.0D0
         THETA(K+3*(J-2))=DACOS(CTHETA)
C
C         CALCULATION OF DPHIDQ
C  
         DUM=THETA(K+3*(J-2))-PHIBO
         WHAM=GPHI*DUM*DUMM**2
         VPE=WHAM+VPE
         PART1=DUM*DUMM**2*SLRB
         PART2=2.0D0*GPHI*DUM*SLRB
         PART3=GPHI*DUMM**2*SLRB
         DO 465 I=1,9
            PDOT(I)=PDOT(I)+DGPHI(I)*PART1
            PDOT(I)=PDOT(I)+DCLCCL(I)*PART2
            PDOT(I)=PDOT(I)-DPHIOB(I)*PART3
  465    CONTINUE
         DUM1=-1.0D0/DSQRT(1.0D0-CTHETA**2)*PART3
         RJK=R(JM)*R(KM)
         RJ2=R(JM)**2
         RK2=R(KM)**2
         DUM2=CTHETA/RJ2
         PDOT(4)=PDOT(4)+DUM1*(D4/RJK-D1*DUM2)
         PDOT(5)=PDOT(5)+DUM1*(D5/RJK-D2*DUM2)
         PDOT(6)=PDOT(6)+DUM1*(D6/RJK-D3*DUM2)
         DUM2=CTHETA/RK2
         PDOT(K1)=PDOT(K1)+DUM1*(D1/RJK-D4*DUM2)
         PDOT(K2)=PDOT(K2)+DUM1*(D2/RJK-D5*DUM2)
         PDOT(K3)=PDOT(K3)+DUM1*(D3/RJK-D6*DUM2)
         PDOT(7)=PDOT(7)+DUM1*((-D1-D4)/RJK+CTHETA*(D1/RJ2+D4/RK2))
         PDOT(8)=PDOT(8)+DUM1*((-D2-D5)/RJK+CTHETA*(D2/RJ2+D5/RK2))
         PDOT(9)=PDOT(9)+DUM1*((-D3-D6)/RJK+CTHETA*(D3/RJ2+D6/RK2))
  460 CONTINUE
      VTPEB=VPE*SLRB
      DO 475 I=1,9
         PDOT(I)=PDOT(I)+DSLBDQ(I)*VPE
  475 CONTINUE      
C
C         THE MORSE STRETCHING OF C-H BOND
C
  500 NCH=3
      VMCH=0.0D0
C
C         INDICES FOR C-H STRETCHING
C
      N2J(1)=3
      N2K(1)=4
      N2J(2)=3
      N2K(2)=5
      N2J(3)=3
      N2K(3)=6
C
C         OTHER PARAMETERS NEED TO BE INPUT
C         C-H BOND LENGTH TO BE VARIED ALONG THE REACTION PATH
C
      SRCH=DEXP(-CRCH*(GA-GARCH)**2)
      RMZ(1)=RCHI+(RCHTS-RCHI)*SRCH
      RMZ(2)=RCHI+(RCHTS-RCHI)*SRCH
      RMZ(3)=RCHI+(RCHTS-RCHI)*SRCH
C
C         CALCULATE DERIVATIVES OF SRCH
C
      DUM1=RCHTS-RCHI
      PART1=-2.0D0*CRCH*(GA-GARCH)*SRCH
      DO 481 I=1,9
         DRCHDQ(I)=DUM1*PART1*DGADQ(I)
  481 CONTINUE
C
C         THE BETA VALUE TO BE VARIED ALONG THE REACTION PATH
C
      SBCH=DEXP(-CBCH*(GA-GABCH)**2)
      B(1)=BCHI+(BCHTS-BCHI)*SBCH
      B(2)=BCHI+(BCHTS-BCHI)*SBCH
      B(3)=BCHI+(BCHTS-BCHI)*SBCH
C
C         CALCULATE DERIVATIBES OF SBCH
C
      DUM1=BCHTS-BCHI
      PART1=-2.0D0*CBCH*(GA-GABCH)*SBCH
      DO 482 I=1,9
         DBCHDQ(I)=DUM1*PART1*DGADQ(I)
  482 CONTINUE
C
      D(1)=DCH
      D(2)=DCH
      D(3)=DCH
C
      DO 480 I=1,NCH
         NJ=N2J(I)
         NK=N2K(I)
         JK=(NJ-1)*(2*N-NJ)/2+NK-NJ
         BETAM=B(I)
         RLCM=R(JK)-RMZ(I)
         VMCH=VMCH+D(I)*(1.0D0-DEXP(-BETAM*RLCM))**2
  480 CONTINUE
C
      DO 484 J=1,NCH
         NJ=N2J(J)
         NK=N2K(J)
         JK=(NJ-1)*(2*N-NJ)/2+NK-NJ
         DUM=DEXP(-B(J)*(R(JK)-RMZ(J)))
         DUM1=1.0D0-DUM
         DUM2=2.0D0*D(J)*DUM1
         DO 483 I=1,9
            PDOT(I)=PDOT(I)-DUM2*DUM*(B(J)*DRCHDQ(I)-
     *               (R(JK)-RMZ(J))*DBCHDQ(I))
  483    CONTINUE
  484 CONTINUE
C
      DO 485 I=1,NCH
         CALL MORSE(I)
  485 CONTINUE 
C
C         CALCULATION OF TOTAL POTENTIAL ENERGY FOR THE SN2 REACTION
C
      PESN2=VMEPT+VTPHIA+VTPHIB+VTCLCL+VHCH+VTLRA+VTLRB
     #+VTCLAH+VTCLBH+VTPEA+VTPEB+VMCH
      RETURN
      END
C
C         SET PARAMETERS FOR SELECTED SN2 POTENTIAL ENERGY SURFACE
C
      SUBROUTINE PARSN2(NSN2)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      COMMON/SN2A/SFACLR,SFBCLR,SLGAC,SLGBC,DCLUSA,DCLUSB,DCH3CL,
     *DCH3BR,BACLUS,BBCLUS,BAB,BBB,SBAC,SBBC,BAC,BBC,SDGAC,SDGBC,
     *FPHIAZ,FPHIBZ,APHIAZ,APHIBZ,GPHIAZ,GPHIBZ,GPHIAC,GPHIBC,
     *S1RAA1,S1RAA2,S1RAA3,S1RAA4,S1RAA5,S1RBA1,S1RBA2,S1RBA3,
     *S1RBA4,S1RBA5,S1RAC1,S1RAC2,S1RAC3,S1RAC4,S1RAC5,S1RBC1,
     *S1RBC2,S1RBC3,S1RBC4,S1RBC5,S1CAC,S1CBC,SEAC,SEBC,VH2AC,
     *VH2BC,PHIAOI,PHIAOB,SPAA1,SPAA2,SPAA3,SPAC1,SPAC2,SPAC3,
     *SPGAC,PHIBOI,PHIBOB,SPBA1,SPBA2,SPBA3,SPBC1,SPBC2,SPBC3,
     *SPGBC,PCLCLC,PCLCLG,SFTA,SFTC,SFTD,STHCA,STHCB,STHEA,STHEB,
     *FTHA,FTHB,FTHTS,ATHA,ATHB,ATHTS,BTHA,BTHB,BTHTS,THTS,THA,THB,
     *VLRAA,VLRBA,VCLAHD,VCLBHD,RAC,RBC,RAI,RBI,GATS
      COMMON/SN2B/SCALEP,SDAA1,SDAA2,SDAA3,SDAC1,SDAC2,SDAC3,SDBA1,
     *SDBA2,SDBA3,SDBC1,SDBC2,SDBC3,SRAA1,
     *SRBA1,SRAA2,SRBA2,SRAA3,SRBA3,SRAC1,SRBC1,SRAC2,SRBC2,SRAC3,
     *SRBC3,SRGAC,SRGBC,SRAE1,SRBE1,SRAE2,SRAE3,SRBE2,SRBE3,SSDA1,
     *SSDA2,SSDA3,SSDB1,SSDB2,SSDB3
      COMMON/SN2C/DCH,CRCH,CBCH,GARCH,GABCH,RCHI,RCHTS,BCHI,BCHTS
C
C       NSN2=1, PES1
C       NSN2=2, PES1/R
C       NSN2=3, PES2
C       NSN2=4, PES2/R
C       NSN2=5, PES1/RCH
C       NSN2=6, PES2/RCH
C       NSN2=7, PES1(BR)
C       NSN2=8, PES2(BR)
C
C       FOR REFERENCE, SEE:  S.R. VANDE LINDE AND W.L. HASE, J. PHYS.
C       CHEM. 1990, 94, 2778-2788,  AND  H. WANG, L. ZHU AND W.L. HASE,
C       J. PHYS. CHEM. 1994, 98, 1608-1619.
C
C         SET PARAMETERS FOR PES1 AND PES2
C
      SCALEP=1.0000D0
      IF ((NSN2.EQ.3).OR.(NSN2.EQ.4).OR.(NSN2.EQ.6)) 
     * SCALEP=0.7603D0
C  
C         SCALEP FOR NSN2=8 EQUALS TO 0.58/0.7822
C
      IF (NSN2.EQ.8) SCALEP=0.7415D0
      IF ((NSN2.EQ.7).OR.(NSN2.EQ.8)) GOTO 200
C
C         TO COMPUTE VMEP
C
      SFACLR=1.68763661D0
      SFBCLR=1.68763661D0
      SLGAC=1.4378D0
      SLGBC=1.4378D0
C
      DCLUSA=10.257D0*C1
      DCLUSB=10.257D0*C1
      DCH3CL=87.38D0*C1
      DCH3BR=87.38D0*C1
      BACLUS=0.9775D0
      BBCLUS=0.9775D0
      BAB=1.7219D0
      BBB=1.7219D0
      SBAC=1.4378D0
      SBBC=1.4378D0
      RAC=3.2655D0
      RBC=3.2655D0
      RAI=1.7846D0
      RBI=1.7846D0
      BAC=0.109250285D0
      BBC=0.109250285D0
C
      SDGAC=1.4378D0
      SDGBC=1.4378D0
C
      FPHIAZ=0.85486D0*C3
      FPHIBZ=0.85486D0*C3
      APHIAZ=-0.230506D0*C3
      APHIBZ=-0.230506D0*C3
      GPHIAZ=0.01707734D0*C3
      GPHIBZ=GPHIAZ
      GPHIAC=1.64786208D0
      GPHIBC=GPHIAC
      S1RAA1=0.24283089D0
      S1RAA2=0.63575782D0
      S1RAA3=0.04366770D0
      S1RAA4=-0.07819218D0
      S1RAA5=0.15593577D0
      S1RBA1=S1RAA1
      S1RBA2=S1RAA2
      S1RBA3=S1RAA3
      S1RBA4=S1RAA4
      S1RBA5=S1RAA5
C
      S1RAC1=3.92088485D0
      S1RAC2=2.99414730D0
      S1RAC3=0.0305397473D0
      S1RAC4=6.02009583D0
      S1RAC5=0.307747841D0
      S1RBC1=S1RAC1
      S1RBC2=S1RAC2
      S1RBC3=S1RAC3
      S1RBC4=S1RAC4
      S1RBC5=S1RAC5
C
      S1CAC=2.76286244D0
      S1CBC=S1CAC      
C
C         PARAMETERS FOR SEA AND SEB AND VH2A AND VH2B
C
      SEAC=250.0D0
      SEBC=250.0D0
      VH2AC=0.631382883D0
      VH2BC=VH2AC
C
C         PARAMETERS FOR PHIO AND SPHI
C
      PHIAOI=71.5472D0*C4
      PHIAOB=108.4528D0*C4
      SPAA1=-.0303812604D0
      SPAA2=0.459232688D0
      SPAA3=0.5711485744D0
      SPAC1=0.149247006D0
      SPAC2=0.0872259662D0
      SPAC3=0.0427533239D0
      SPGAC=-2.0D0
      PHIBOI=71.5472D0*C4
      PHIBOB=108.4528D0*C4
      SPBA1=-.0303812604D0
      SPBA2=0.459232688D0
      SPBA3=0.5711485744D0
      SPBC1=0.149247006D0
      SPBC2=0.0872259662D0
      SPBC3=0.0427533239D0
      SPGBC=-2.0D0
C
C         PARAMETERS FOR VCLACLB
C
      PCLCLC=4655.41602D0*C1
      PCLCLG=1403.1145D0*C1
C
C         PARAMETERS FOR SFT,STH,FTH,ATH,BTH,THETA
C
      SFTA=0.690124214D0
      SFTC=2.52136517D0
      SFTD=0.268466502D0
      STHCA=1.66545117D0
      STHEA=2.0D0
      STHCB=1.66545117D0
      STHEB=2.0D0
      SCALE=0.735D0
      FTHA=0.68037917D0*C3*SCALE
      FTHB=0.68037917D0*C3*SCALE
      FTHTS=0.482799777D0*C3*SCALE
      ATHA=-0.208978565D0*C3*SCALE
      ATHB=-0.208978565D0*C3*SCALE
      ATHTS=-0.099804415D0*C3*SCALE
      BTHA=0.225127913D0*C3*SCALE
      BTHB=0.225127913D0*C3*SCALE
      BTHTS=0.002376130D0*C3*SCALE
      THTS=120.0D0*C4
      GATS=0.0D0
      THA=110.4702D0*C4
      THB=110.4702D0*C4
C
C         PARAMETERS FOR VLR
C
      VLRAA=-129.27D0*C1
      VLRBA=-129.27D0*C1
      VCLAHD=-207.968353D0*C1
      VCLBHD=VCLAHD
C
C         PARAMETERS FOR VCH STRETCHING
C
      DCH=110.0D0*C1
      IF ((NSN2.EQ.5).OR.(NSN2.EQ.6)) THEN
         CRCH=0.55D0
         CBCH=0.45D0
         GARCH=0.0D0
         GABCH=0.0D0
         RCHI=1.070D0
         RCHTS=1.06167D0
         BCHI=1.867D0
         BCHTS=1.9566D0
      ELSE
         CRCH=0.0D0
         CBCH=0.0D0
         GARCH=0.0D0
         GABCH=0.0D0
         RCHI=1.070D0
         RCHTS=1.070D0
         BCHI=1.867D0
         BCHTS=1.867D0
      ENDIF
C
      IF ((NSN2.EQ.2).OR.(NSN2.EQ.4).OR.(NSN2.EQ.5).OR.(NSN2.EQ.6))
     *GOTO 100
C
      SDAA1=0.49601936D0
      SDAA2=0.51755225D0
      SDAA3=-0.01357161D0
      SDAC1=0.0111886524D0
      SDAC2=0.421045393D0
      SDAC3=0.282822996D0
      SDBA1=SDAA1
      SDBA2=SDAA2
      SDBA3=SDAA3
      SDBC1=SDAC1
      SDBC2=SDAC2
      SDBC3=SDAC3
C
      SSDA1=6.0D0
      SSDA2=3.0D0
      SSDA3=2.0D0
      SSDB1=6.0D0
      SSDB2=3.0D0
      SSDB3=2.0D0
C
C         PARAMETERS FOR SRGA AND SRGB
C
      SRAA1=3.49158662D0
      SRBA1=3.49158662D0
      SRAA2=-5.08577781D0
      SRBA2=-5.08577781D0
      SRAA3=2.59419119D0
      SRBA3=2.59419119D0
      SRAC1=0.652240396D0
      SRBC1=0.652240396D0
      SRAC2=0.385334522D0
      SRBC2=0.385334522D0
      SRAC3=0.197647810D0
      SRBC3=0.197647810D0
      SRGAC=1.4378D0
      SRGBC=1.4378D0
C
      SRAE1=2.0D0
      SRAE2=3.0D0
      SRAE3=4.0D0
      SRBE1=2.0D0
      SRBE2=3.0D0
      SRBE3=4.0D0
C
      RETURN
C
  100 CONTINUE
C
C         SET PARAMETERS FOR ROSSKY'S SURFACE
C         TO COMPUTE VMEP
C
      SDAA1=0.60232981D0
      SDAA2=0.40172109D0
      SDAA3=-0.00405090D0
      SDAC1=0.0305336192D0
      SDAC2=0.489931613D0
      SDAC3=0.0459612347D0
      SDBA1=SDAA1
      SDBA2=SDAA2
      SDBA3=SDAA3
      SDBC1=SDAC1
      SDBC2=SDAC2
      SDBC3=SDAC3
C
      SSDA1=5.0D0
      SSDA2=3.0D0
      SSDA3=3.0D0
      SSDB1=5.0D0
      SSDB2=3.0D0
      SSDB3=3.0D0
C
C         PARAMETERS FOR SRGA AND SRGB
C
      SRAA1=3.40515780D0
      SRBA1=3.40515780D0
      SRAA2=-4.00930405D0
      SRBA2=-4.00930405D0
      SRAA3=1.604146250D0
      SRBA3=1.604146250D0
      SRAC1=0.632000208D0
      SRBC1=0.632000208D0
      SRAC2=0.423530132D0
      SRBC2=0.423530132D0
      SRAC3=0.172229841D0
      SRBC3=0.172229841D0
      SRGAC=1.4378D0
      SRGBC=1.4378D0
C
      SRAE1=1.56673360D0
      SRAE2=2.0D0
      SRAE3=3.0D0
      SRBE1=1.56673360D0
      SRBE2=2.0D0
      SRBE3=3.0D0
C
      RETURN
C
 200  CONTINUE
C
      SFACLR=1.68763661D0
      SFBCLR=1.68763661D0
      SLGAC=1.2190D0
      SLGBC=1.6911D0
C
C         TO COMPUTE VMEP
C
      DCLUSA=10.7364D0*C1
      DCLUSB=8.5874D0*C1
      DCH3CL=84.976D0*C1
      DCH3BR=72.349D0*C1
      BACLUS=0.9530D0
      BBCLUS=1.0089D0
      BAB=1.7368D0
      BBB=1.7217D0
      SBAC=1.2190D0
      SBBC=1.6911D0
      RAC=3.2157D0
      RBC=3.5165D0
      RAI=1.789D0
      RBI=1.944D0
      BAC=0.610962883D-01
      BBC=0.824599639D-01
C
      SDGAC=1.2190D0
      SDGBC=1.6911D0
C
      FPHIAZ=0.8424D0*C3
      FPHIBZ=0.7822D0*C3
      APHIAZ=-0.230506D0*C3
      APHIBZ=-0.230506D0*C3
      GPHIAZ=0.01707734D0*C3
      GPHIBZ=GPHIAZ
      GPHIAC=1.64786208D0
      GPHIBC=GPHIAC
      S1RAA1=0.24283089D0
      S1RAA2=0.63575782D0
      S1RAA3=0.04366770D0
      S1RAA4=-0.07819218D0
      S1RAA5=0.15593577D0
      S1RBA1=S1RAA1
      S1RBA2=S1RAA2
      S1RBA3=S1RAA3
      S1RBA4=S1RAA4
      S1RBA5=S1RAA5
C
      S1RAC1=3.92088485D0
      S1RAC2=2.99414730D0
      S1RAC3=0.0305397473D0
      S1RAC4=6.02009583D0
      S1RAC5=0.307747841D0
      S1RBC1=S1RAC1
      S1RBC2=S1RAC2
      S1RBC3=S1RAC3
      S1RBC4=S1RAC4
      S1RBC5=S1RAC5
C
      S1CAC=2.76286244D0
      S1CBC=S1CAC      
C
C         PARAMETERS FOR SEA AND SEB AND VH2A AND VH2B
C
      SEAC=250.0D0
      SEBC=250.0D0
      VH2AC=0.631382883D0
      VH2BC=VH2AC
C
C         PARAMETERS FOR PHIO AND SPHI
C
      PHIAOI=72.4010D0*C4
      PHIAOB=108.0837D0*C4
      SPAA1=-0.269056737D0
      SPAA2=0.404086620D0
      SPAA3=1.0D0-SPAA1-SPAA2
      SPAC1=0.274189264D0
      SPAC2=0.295055717D0
      SPAC3=0.0250420179D0
      SPGAC=-2.186D0
      PHIBOI=71.9163D0*C4
      PHIBOB=107.5990D0*C4
      SPBA1=-0.240745306D0
      SPBA2=1.95309746D0
      SPBA3=1.0D0-SPBA1-SPBA2
      SPBC1=0.597150028D0
      SPBC2=0.101824671D0
      SPBC3=0.0635212585D0
      SPGBC=-2.031D0
C
C         PARAMETERS FOR VCLACLB
C
      PCLCLC=4655.41602D0*C1
      PCLCLG=1403.1145D0*C1
C
C         PARAMETERS FOR SFT,STH,FTH,ATH,BTH,THETA
C
      SFTA=0.690124214D0
      SFTC=2.52136517D0
      SFTD=0.268466502D0
      STHCA=1.44735110D0
      STHEA=2.34337068D0
      STHCB=1.35360157D0
      STHEB=2.34800005D0
      SCALE=0.735D0
      FTHA=0.68037917D0*C3*SCALE
      FTHB=0.68037917D0*C3*SCALE
      FTHTS=0.482799777D0*C3*SCALE
      ATHA=-0.208978565D0*C3*SCALE
      ATHB=-0.208978565D0*C3*SCALE
      ATHTS=-0.099804415D0*C3*SCALE
      BTHA=0.225127913D0*C3*SCALE
      BTHB=0.225127913D0*C3*SCALE
      BTHTS=0.002376130D0*C3*SCALE
      THTS=120.0D0*C4
      GATS=-0.13473D0
      THA=111.2768D0*C4
      THB=110.8224D0*C4
C
C         PARAMETERS FOR VLR
C
      VLRAA=-129.27D0*C1*1.81D0/1.87D0
      VLRBA=-129.27D0*C1
      VCLAHD=-207.968353D0*C1
      VCLBHD=VCLAHD
C
C         PARAMETERS FOR VCH STRETCHING
C
      DCH=110.0D0*C1
      CRCH=0.55D0
      CBCH=0.45D0
      GARCH=-0.06188D0
      GABCH=0.0112D0
      RCHI=1.077D0
      RCHTS=1.06167D0
      BCHI=1.8757D0
      BCHTS=2.0033D0
C
      SDAA3=-0.484710075D-01
      SDAA2=0.618888557D0
      SDAA1=1.0D0-SDAA3-SDAA2
      SDAC1=0.258094817D-01
      SDAC2=0.221944809D0
      SDAC3=0.327017593D+01
C      
      SDBA3=SDAA3
      SDBA2=SDAA2
      SDBA1=SDAA1
      SDBC1=SDAC1
      SDBC2=SDAC2
      SDBC3=SDAC3
C
      SSDA3=2.30719304D0
      SSDA2=3.92013764D0
      SSDA1=5.46368742D0
      SSDB1=SSDA1
      SSDB2=SSDA2
      SSDB3=SSDA3
C
C         PARAMETERS FOR SRGA AND SRGB
C
      SRAA1=0.950364411D0
      SRBA1=0.241002798D+01
      SRAA2=-0.148700345D+01
      SRBA2=-0.272049618D+01
      SRAA3=1.0D0-SRAA1-SRAA2
      SRBA3=1.0D0-SRBA1-SRBA2
      SRAC1=0.852632165D0
      SRBC1=0.555458486D0
      SRAC2=0.222973332D0
      SRBC2=0.297049016D0
      SRAC3=0.141861632D0
      SRBC3=0.111322239D0
      SRGAC=1.2190D0
      SRGBC=1.6911D0
C
      SRAE1=0.109114826D+01
      SRAE2=0.242355037D+01
      SRAE3=0.306331682D+01
      SRBE1=0.129949927D+01
      SRBE2=0.185627961D+01
      SRBE3=0.299765491D+01
      RETURN
      END
C
C         CALCULATE RYDBERG POTENTIAL ENERGY AND DERIVATIVES
C
      SUBROUTINE RYDBG(NL)
      PARAMETER(ND1=100)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/COORS/R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      COMMON/RYDBGB/RYDZ(100),DRYD(100),ARYD(100),VRYD(100),
     *N16J(100),N16K(100)
      COMMON/FORCES/NATOMS,I3N,NS,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
C
C         CALCULATE INDICES FOR COORDINATES
C
      J3=3*N16J(NL)
      J2=J3-1
      J1=J2-1
      K3=3*N16K(NL)
      K2=K3-1
      K1=K2-1
C
C        CALCULATE  INDEX FOR R
C
      JK=(N16J(NL)-1)*(2*NATOMS-N16J(NL))/2+N16K(NL)-N16J(NL)
C
C        CALCULATE RELATIVE COORDINATES AND POTENTIAL INCREMENT
C
      T1=Q(K1)-Q(J1)
      T2=Q(K2)-Q(J2)
      T3=Q(K3)-Q(J3)
      R(JK)=DSQRT(T1*T1+T2*T2+T3*T3)
      ROJK=R(JK)/RYDZ(NL)-1.0D0
      DUM=-DRYD(NL)*DEXP(-ARYD(NL)*ROJK)
      VRYD(NL)=DUM*(1.0D0+ARYD(NL)*ROJK)
      DUM=DUM*ARYD(NL)*ARYD(NL)*ROJK/R(JK)/RYDZ(NL)
C
C        CALCULATE (DV/DQ)'S
C
      TMP=DUM*T1
      PDOT(K1)=PDOT(K1)-TMP
      PDOT(J1)=PDOT(J1)+TMP
      TMP=DUM*T2
      PDOT(K2)=PDOT(K2)-TMP
      PDOT(J2)=PDOT(J2)+TMP
      TMP=DUM*T3
      PDOT(K3)=PDOT(K3)-TMP
      PDOT(J3)=PDOT(J3)+TMP
      RETURN
      END
C
C         CALCULATE HARTREE-FOCK DIFFUSION POTENTIAL ENERGY
C         AND DERIVATIVES
C
      SUBROUTINE HFD(JNL,KNL)
      PARAMETER(ND1=100)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/COORS/R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      COMMON/HFDB/AHFD(100),BHFD(100),RHFD(100),VHFD(100),C6HFD(100),
     *C8HFD(100),C10HFD(100),N17J(100),N17K(100)
      COMMON/FORCES/NATOMS,I3N,NS,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
C
C         DATA FOR THE FIT F(R) FUNCTION OF R. AHLRICHS, R. PENCO 
C         & G. SCOLES, CHEMICAL PHYSICS 19 (1977), 119-130
C
      DATA AAHFD,BBHFD/1.28D0,2.0D0/
C
C         LOOP ON ALL POTENTIAL FUNCTIONS
C
      DO 10 NL=JNL,KNL
C
C         CALCULATE INDICES FOR COORDINATES
C
         J3=3*N17J(NL)
         J2=J3-1
         J1=J2-1
         K3=3*N17K(NL)
         K2=K3-1
         K1=K2-1
C
C        CALCULATE  INDEX FOR R
C
         JK=(N17J(NL)-1)*(2*NATOMS-N17J(NL))/2+N17K(NL)-N17J(NL)
C
C        CALCULATE RELATIVE COORDINATES
C
         T1=Q(K1)-Q(J1)
         T2=Q(K2)-Q(J2)
         T3=Q(K3)-Q(J3)
         R(JK)=DSQRT(T1*T1+T2*T2+T3*T3)
C
C         HARTREE-FOCK REPULSION PART
C
         DEHF=AHFD(NL)*DEXP(-BHFD(NL)*R(JK))
C
C         F(R) FUNCTION AND DERIVATIVE
C
         XX=AAHFD*RHFD(NL)/R(JK)-1.0D0
         IF (XX.LT.0.0D0) XX=0.0D0
         FR=DEXP(-XX**BBHFD)
         DFDR=AAHFD*BBHFD*RHFD(NL)*(XX**(BBHFD-1.0D0))*FR/(R(JK)**3)
C
C         DISPERSION EXPANSION AND DERIVATIVE
C
         R4=1.0D0/R(JK)**4
         R6=1.0D0/R(JK)**6
         CCC=C6HFD(NL)*R6+C8HFD(NL)*R4*R4+C10HFD(NL)*R4*R6
         DDD=-6.0D0*C6HFD(NL)*R4*R4-8.0D0*C8HFD(NL)*R4*R6-
     *   10.0D0*C10HFD(NL)*R6*R6
C
C         POTENTIAL ENERGY INCREMENT
C
         VHFD(NL)=DEHF-CCC*FR
         DUM=BHFD(NL)*DEHF/R(JK)+CCC*DFDR+DDD*FR
C
C        CALCULATE (DV/DQ)'S
C
         TMP=DUM*T1
         PDOT(K1)=PDOT(K1)-TMP
         PDOT(J1)=PDOT(J1)+TMP
         TMP=DUM*T2
         PDOT(K2)=PDOT(K2)-TMP
         PDOT(J2)=PDOT(J2)+TMP
         TMP=DUM*T3
         PDOT(K3)=PDOT(K3)-TMP
         PDOT(J3)=PDOT(J3)+TMP
C
   10 CONTINUE
      RETURN
      END
C
C         CALCULATES GENERALIZED LEPS POTENTIAL ENERGY AND DERIVATIVES
C
      SUBROUTINE LEPS1(NL)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/COORS/R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      COMMON/LEPSA/RLZ1(100),RLZ2(100),RLZ3(100),BL1(100),BL2(100),
     *BL3(100),DL1(100),DL2(100),DL3(100),N18J1(100),N18K1(100),
     *N18J2(100),N18K2(100),N18J3(100),N18K3(100),DELTA1(100),
     *DELTA2(100),DELTA3(100),VLEPSA(100)
      COMMON/FORCES/N,I3N,NS,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
C
C         CALCULATE INDICES FOR COORDINATES
C
      J13=3*N18J1(NL)
      J12=J13-1
      J11=J12-1
      K13=3*N18K1(NL)
      K12=K13-1
      K11=K12-1
      J23=3*N18J2(NL)
      J22=J23-1
      J21=J22-1
      K23=3*N18K2(NL)
      K22=K23-1
      K21=K22-1
      J33=3*N18J3(NL)
      J32=J33-1
      J31=J32-1
      K33=3*N18K3(NL)
      K32=K33-1
      K31=K32-1
C
C         CALCULATE INDEX FOR R
C
      JK1=(N18J1(NL)-1)*(2*N-N18J1(NL))/2+N18K1(NL)-N18J1(NL)
      JK2=(N18J2(NL)-1)*(2*N-N18J2(NL))/2+N18K2(NL)-N18J2(NL)
      JK3=(N18J3(NL)-1)*(2*N-N18J3(NL))/2+N18K3(NL)-N18J3(NL)
C
C         CALCULATE RELATIVE COORDINATES AND R
C
      T11=Q(K11)-Q(J11)
      T12=Q(K12)-Q(J12)
      T13=Q(K13)-Q(J13)
      T21=Q(K21)-Q(J21)
      T22=Q(K22)-Q(J22)
      T23=Q(K23)-Q(J23)
      T31=Q(K31)-Q(J31)
      T32=Q(K32)-Q(J32)
      T33=Q(K33)-Q(J33)
      R(JK1)=DSQRT(T11*T11+T12*T12+T13*T13)
      R(JK2)=DSQRT(T21*T21+T22*T22+T23*T23)
      R(JK3)=DSQRT(T31*T31+T32*T32+T33*T33)
C
C         CALCULATE THE POTENTIAL
C
      TERM1=DEXP(-BL1(NL)*(R(JK1)-RLZ1(NL)))
      TERM2=DEXP(-BL2(NL)*(R(JK2)-RLZ2(NL)))
      TERM3=DEXP(-BL3(NL)*(R(JK3)-RLZ3(NL)))
      VM1=DL1(NL)*(TERM1*TERM1-2.0D0*TERM1)
      VM2=DL2(NL)*(TERM2*TERM2-2.0D0*TERM2)
      VM3=DL3(NL)*(TERM3*TERM3-2.0D0*TERM3)
      VAM1=0.5D0*DL1(NL)*(TERM1*TERM1+2.0D0*TERM1)
      VAM2=0.5D0*DL2(NL)*(TERM2*TERM2+2.0D0*TERM2)
      VAM3=0.5D0*DL3(NL)*(TERM3*TERM3+2.0D0*TERM3)
      CM1=1.0D0+DELTA1(NL)
      CM2=1.0D0+DELTA2(NL)
      CM3=1.0D0+DELTA3(NL)
      CAM1=1.0D0-DELTA1(NL)
      CAM2=1.0D0-DELTA2(NL)
      CAM3=1.0D0-DELTA3(NL)
      VQ1=(CM1*VM1+CAM1*VAM1)*0.5D0
      VQ2=(CM2*VM2+CAM2*VAM2)*0.5D0
      VQ3=(CM3*VM3+CAM3*VAM3)*0.5D0
      VJ1=(CM1*VM1-CAM1*VAM1)*0.5D0
      VJ2=(CM2*VM2-CAM2*VAM2)*0.5D0
      VJ3=(CM3*VM3-CAM3*VAM3)*0.5D0
      TERMJ=DSQRT((VJ1/CM1)**2+(VJ2/CM2)**2+(VJ3/CM3)**2
     *-VJ1*VJ2/(CM1*CM2)-VJ2*VJ3/(CM2*CM3)-VJ3*VJ1/(CM3*CM1))
C
      VLEPSA(NL)=VQ1/CM1+VQ2/CM2+VQ3/CM3-TERMJ
C
C         CALCULATE (DV/DQ)'S
C
      DVMDR1=2.0D0*DL1(NL)*(1.0D0-TERM1)*BL1(NL)*TERM1/R(JK1)
      DVMDR2=2.0D0*DL2(NL)*(1.0D0-TERM2)*BL2(NL)*TERM2/R(JK2)
      DVMDR3=2.0D0*DL3(NL)*(1.0D0-TERM3)*BL3(NL)*TERM3/R(JK3)
      DVAMDR1=-DL1(NL)*(1.0D0+TERM1)*BL1(NL)*TERM1/R(JK1)
      DVAMDR2=-DL2(NL)*(1.0D0+TERM2)*BL2(NL)*TERM2/R(JK2)
      DVAMDR3=-DL3(NL)*(1.0D0+TERM3)*BL3(NL)*TERM3/R(JK3)
      DQDR1=(CM1*DVMDR1+CAM1*DVAMDR1)*0.5D0
      DQDR2=(CM2*DVMDR2+CAM2*DVAMDR2)*0.5D0
      DQDR3=(CM3*DVMDR3+CAM3*DVAMDR3)*0.5D0
      DJDR1=(CM1*DVMDR1-CAM1*DVAMDR1)*0.5D0
      DJDR2=(CM2*DVMDR2-CAM2*DVAMDR2)*0.5D0
      DJDR3=(CM3*DVMDR3-CAM3*DVAMDR3)*0.5D0
      DVDQ1=1.0D0/CM1
      DVDQ2=1.0D0/CM2
      DVDQ3=1.0D0/CM3
      DVDJ1=-0.5D0*(2.0D0*VJ1/CM1-VJ2/CM2-VJ3/CM3)/(TERMJ*CM1)
      DVDJ2=-0.5D0*(2.0D0*VJ2/CM2-VJ3/CM3-VJ1/CM1)/(TERMJ*CM2)
      DVDJ3=-0.5D0*(2.0D0*VJ3/CM3-VJ1/CM1-VJ2/CM2)/(TERMJ*CM3)
      DVDR1=DVDQ1*DQDR1+DVDJ1*DJDR1
      DVDR2=DVDQ2*DQDR2+DVDJ2*DJDR2
      DVDR3=DVDQ3*DQDR3+DVDJ3*DJDR3
C
      DUM2=T11*DVDR1
      PDOT(K11)=PDOT(K11)+DUM2
      PDOT(J11)=PDOT(J11)-DUM2
      DUM2=T12*DVDR1
      PDOT(K12)=PDOT(K12)+DUM2
      PDOT(J12)=PDOT(J12)-DUM2
      DUM2=T13*DVDR1
      PDOT(K13)=PDOT(K13)+DUM2
      PDOT(J13)=PDOT(J13)-DUM2
C
      DUM2=T21*DVDR2
      PDOT(K21)=PDOT(K21)+DUM2
      PDOT(J21)=PDOT(J21)-DUM2
      DUM2=T22*DVDR2
      PDOT(K22)=PDOT(K22)+DUM2
      PDOT(J22)=PDOT(J22)-DUM2
      DUM2=T23*DVDR2
      PDOT(K23)=PDOT(K23)+DUM2
      PDOT(J23)=PDOT(J23)-DUM2
C
      DUM2=T31*DVDR3
      PDOT(K31)=PDOT(K31)+DUM2
      PDOT(J31)=PDOT(J31)-DUM2
      DUM2=T32*DVDR3
      PDOT(K32)=PDOT(K32)+DUM2
      PDOT(J32)=PDOT(J32)-DUM2
      DUM2=T33*DVDR3
      PDOT(K33)=PDOT(K33)+DUM2
      PDOT(J33)=PDOT(J33)-DUM2
C
      RETURN
      END
C
      SUBROUTINE LEPS2(NL)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/COORS/R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      COMMON/LEPSB/RLZS1(100),RLZS2(100),RLZS3(100),RLZT1(100),
     *RLZT2(100),RLZT3(100),BLS1(100),BLS2(100),BLS3(100),BLT1(100),
     *BLT2(100),BLT3(100),DLS1(100),DLS2(100),DLS3(100),DLT1(100),
     *DLT2(100),DLT3(100),VLEPSB(100),N19J1(100),N19K1(100),
     *N19J2(100),N19K2(100),N19J3(100),N19K3(100)
      COMMON/FORCES/N,I3N,NS,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
C
C         CALCULATE INDICES FOR COORDINATES
C
      J13=3*N19J1(NL)
      J12=J13-1
      J11=J12-1
      K13=3*N19K1(NL)
      K12=K13-1
      K11=K12-1
      J23=3*N19J2(NL)
      J22=J23-1
      J21=J22-1
      K23=3*N19K2(NL)
      K22=K23-1
      K21=K22-1
      J33=3*N19J3(NL)
      J32=J33-1
      J31=J32-1
      K33=3*N19K3(NL)
      K32=K33-1
      K31=K32-1
C
C         CALCULATE INDEX FOR R
C
      JK1=(N19J1(NL)-1)*(2*N-N19J1(NL))/2+N19K1(NL)-N19J1(NL)
      JK2=(N19J2(NL)-1)*(2*N-N19J2(NL))/2+N19K2(NL)-N19J2(NL)
      JK3=(N19J3(NL)-1)*(2*N-N19J3(NL))/2+N19K3(NL)-N19J3(NL)
C
C         CALCULATE RELATIVE COORDINATES AND R
C
      T11=Q(K11)-Q(J11)
      T12=Q(K12)-Q(J12)
      T13=Q(K13)-Q(J13)
      T21=Q(K21)-Q(J21)
      T22=Q(K22)-Q(J22)
      T23=Q(K23)-Q(J23)
      T31=Q(K31)-Q(J31)
      T32=Q(K32)-Q(J32)
      T33=Q(K33)-Q(J33)
      R(JK1)=DSQRT(T11*T11+T12*T12+T13*T13)
      R(JK2)=DSQRT(T21*T21+T22*T22+T23*T23)
      R(JK3)=DSQRT(T31*T31+T32*T32+T33*T33)
C
C         CALCULATE THE POTENTIAL
C
      TERM1=DEXP(-BLS1(NL)*(R(JK1)-RLZS1(NL)))
      TERM2=DEXP(-BLS2(NL)*(R(JK2)-RLZS2(NL)))
      TERM3=DEXP(-BLS3(NL)*(R(JK3)-RLZS3(NL)))
      TERM4=DEXP(-BLT1(NL)*(R(JK1)-RLZT1(NL)))
      TERM5=DEXP(-BLT2(NL)*(R(JK2)-RLZT2(NL)))
      TERM6=DEXP(-BLT3(NL)*(R(JK3)-RLZT3(NL)))
      VM1=DLS1(NL)*(TERM1*TERM1-2.0D0*TERM1)
      VM2=DLS2(NL)*(TERM2*TERM2-2.0D0*TERM2)
      VM3=DLS3(NL)*(TERM3*TERM3-2.0D0*TERM3)
      VAM1=DLT1(NL)*(TERM4*TERM4+2.0D0*TERM4)
      VAM2=DLT2(NL)*(TERM5*TERM5+2.0D0*TERM5)
      VAM3=DLT3(NL)*(TERM6*TERM6+2.0D0*TERM6)
      VQ1=(VM1+VAM1)*0.5D0
      VQ2=(VM2+VAM2)*0.5D0
      VQ3=(VM3+VAM3)*0.5D0
      VJ1=(VM1-VAM1)*0.5D0
      VJ2=(VM2-VAM2)*0.5D0
      VJ3=(VM3-VAM3)*0.5D0
      TERMJ=DSQRT(VJ1**2+VJ2**2+VJ3**2-VJ1*VJ2-VJ2*VJ3-VJ3*VJ1)
C
      VLEPSB(NL)=VQ1+VQ2+VQ3-TERMJ
C
C         CALCULATE (DV/DQ)'S
C
      DVMDR1=2.0D0*DLS1(NL)*(1.0D0-TERM1)*BLS1(NL)*TERM1/R(JK1)
      DVMDR2=2.0D0*DLS2(NL)*(1.0D0-TERM2)*BLS2(NL)*TERM2/R(JK2)
      DVMDR3=2.0D0*DLS3(NL)*(1.0D0-TERM3)*BLS3(NL)*TERM3/R(JK3)
      DVAMDR1=-2.0D0*DLT1(NL)*(1.0D0+TERM4)*BLT1(NL)*TERM4/R(JK1)
      DVAMDR2=-2.0D0*DLT2(NL)*(1.0D0+TERM5)*BLT2(NL)*TERM5/R(JK2)
      DVAMDR3=-2.0D0*DLT3(NL)*(1.0D0+TERM6)*BLT3(NL)*TERM6/R(JK3)
      DQDR1=(DVMDR1+DVAMDR1)*0.5D0
      DQDR2=(DVMDR2+DVAMDR2)*0.5D0
      DQDR3=(DVMDR3+DVAMDR3)*0.5D0
      DJDR1=(DVMDR1-DVAMDR1)*0.5D0
      DJDR2=(DVMDR2-DVAMDR2)*0.5D0
      DJDR3=(DVMDR3-DVAMDR3)*0.5D0
      DVDJ1=-0.5D0*(2.0D0*VJ1-VJ2-VJ3)/TERMJ
      DVDJ2=-0.5D0*(2.0D0*VJ2-VJ3-VJ1)/TERMJ
      DVDJ3=-0.5D0*(2.0D0*VJ3-VJ1-VJ2)/TERMJ
      DVDR1=DQDR1+DVDJ1*DJDR1
      DVDR2=DQDR2+DVDJ2*DJDR2
      DVDR3=DQDR3+DVDJ3*DJDR3
C
      DUM2=T11*DVDR1
      PDOT(K11)=PDOT(K11)+DUM2
      PDOT(J11)=PDOT(J11)-DUM2
      DUM2=T12*DVDR1
      PDOT(K12)=PDOT(K12)+DUM2
      PDOT(J12)=PDOT(J12)-DUM2
      DUM2=T13*DVDR1
      PDOT(K13)=PDOT(K13)+DUM2
      PDOT(J13)=PDOT(J13)-DUM2
C
      DUM2=T21*DVDR2
      PDOT(K21)=PDOT(K21)+DUM2
      PDOT(J21)=PDOT(J21)-DUM2
      DUM2=T22*DVDR2
      PDOT(K22)=PDOT(K22)+DUM2
      PDOT(J22)=PDOT(J22)-DUM2
      DUM2=T23*DVDR2
      PDOT(K23)=PDOT(K23)+DUM2
      PDOT(J23)=PDOT(J23)-DUM2
C
      DUM2=T31*DVDR3
      PDOT(K31)=PDOT(K31)+DUM2
      PDOT(J31)=PDOT(J31)-DUM2
      DUM2=T32*DVDR3
      PDOT(K32)=PDOT(K32)+DUM2
      PDOT(J32)=PDOT(J32)-DUM2
      DUM2=T33*DVDR3
      PDOT(K33)=PDOT(K33)+DUM2
      PDOT(J33)=PDOT(J33)-DUM2
C
      RETURN
      END
C
C         CALCULATE THE HO2 DMBE IV POTENTIAL ENERGY AND DERIVATIVE
C
      SUBROUTINE DMBE
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER(ND1=100,NDP=10)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/FORCES/NATOMS,I3N,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      COMMON/DMBEB/VDMBE,NDMB(3)
      DIMENSION RR(3),GRAD(3)
      LOGICAL FIRST
      DATA FIRST/.TRUE./CA0,CA1/0.5291772D0,627.51D0/
      SAVE FIRST
C
C         SCREEN FOR ATOM LABELS
C
      IF (FIRST) THEN
         DO 20 I=1,NATOMS
            TMP=DABS(1.0D0-W(I)/1.0D0)
            IF (TMP.LT.0.05D0) NDMB(3)=I
   20    CONTINUE
         K=1
         DO 40 I=1,NATOMS
            TMP=DABS(1.0D0-W(I)/16.0D0)
            IF (TMP.LT.0.05D0.AND.K.LE.2) THEN
               NDMB(K)=I
               K=K+1
            ENDIF
   40    CONTINUE
         IDUM=NDMB(1)*NDMB(2)*NDMB(3)
         IF (IDUM.EQ.0) STOP
         FIRST=.FALSE.
      ENDIF
C
C         INTERATOMIC DISTANCES IN ATOMIC UNITS
C
      DO 60 J=1,3
         DO 50 K=J+1,3
            JK=(J-1)*(2*3-J)/2+K-J
            J3=3*NDMB(J)
            J2=J3-1
            J1=J2-1
            K3=3*NDMB(K)
            K2=K3-1
            K1=K2-1
            T1=Q(J1)-Q(K1)
            T2=Q(J2)-Q(K2)
            T3=Q(J3)-Q(K3)
            RR(JK)=DSQRT(T1*T1+T2*T2+T3*T3)/CA0
   50    CONTINUE
   60 CONTINUE
C
C         ENERGY AND DERIVATIVES WITH RESPECT TO
C         INTERATOMIC DISTANCES
C
      CALL HO2SUR(RR,VDMBE)
      CALL HO2DER(RR,GRAD)
      CC1=CA1*C1
      CC0=CC1/CA0/CA0
      VDMBE=VDMBE*CC1
      DO 70 I=1,3
         GRAD(I)=GRAD(I)/RR(I)*CC0
   70 CONTINUE
C
C        CALCULATE (DV/DQ)'S
C
      DO 90 J=1,3
         DO 80 K=J+1,3
            JK=(J-1)*(2*3-J)/2+K-J
            J3=3*NDMB(J)
            J2=J3-1
            J1=J2-1
            K3=3*NDMB(K)
            K2=K3-1
            K1=K2-1
            T1=Q(J1)-Q(K1)
            T2=Q(J2)-Q(K2)
            T3=Q(J3)-Q(K3)
            TMP=GRAD(JK)*T1
            PDOT(K1)=PDOT(K1)-TMP
            PDOT(J1)=PDOT(J1)+TMP
            TMP=GRAD(JK)*T2
            PDOT(K2)=PDOT(K2)-TMP
            PDOT(J2)=PDOT(J2)+TMP
            TMP=GRAD(JK)*T3
            PDOT(K3)=PDOT(K3)-TMP
            PDOT(J3)=PDOT(J3)+TMP
   80    CONTINUE
   90 CONTINUE
C
      RETURN
      END
C
C         THE FOLLOWING IS A COLLECTION OF FUNCTIONS AND ROUTINES
C         FROM A.J.C. VARANDAS, UNIVERSITY OF COIMBRA, PORTUGAL:
C         HO2SUR, HO2DER, DEXDIS, DELECT, THREBQ, VOH, EHFOH,
C         DISOH, DVOH, VOO, EHFOO, DISOO, DVOO, CEF, EXDIS, ELECT,
C         DISP, DDISP, AND HO2DAT DATA BLOCK
C
C         CALCULATE THE HO2 DMBE IV POTENTIAL ENERGY SURFACE 
C
      SUBROUTINE HO2SUR(X,F)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION X(3)
      COMMON/HCOEFF/C(52)
      COMMON/THRBOD/POLQ,DECAY1,DECAY2,DECAY3,R1,R2,R3
      COMMON/REFGEO/R10,R20,R30
      COMMON/TESTD/ITEST
      R1=X(1)
      R2=X(2)
      R3=X(3)
      Q1=1.0D0/DSQRT(3.0D0)*(R1+R2+R3)
      Q2=1.0D0/DSQRT(2.0D0)*(R2-R3)
      Q3=1.0D0/DSQRT(6.0D0)*(2.0D0*R1-R2-R3)
      F=VOO(R1)+VOH(R2)+VOH(R3)+THREBQ(Q1,Q2,Q3)+
     1  EXDIS(R1,R2,R3)+ELECT(R1,R2,R3)
      RETURN
      END
C
C         CALCULATE THE HO2 DMBE IV POTENTIAL ENERGY SURFACE AND
C         ITS FIRST DERIVATIVES
C
      SUBROUTINE HO2DER(X,G)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION X(3),G(3)
      COMMON/HCOEFF/C(52)
      COMMON/THRBOD/POLQ,DECAY1,DECAY2,DECAY3,R1,R2,R3
      COMMON/REFGEO/R10,R20,R30
      COMMON/TESTD/ITEST
      R1=X(1)
      R2=X(2)
      R3=X(3)
      Q1=1.0D0/DSQRT(3.0D0)*(R1+R2+R3)
      Q2=1.0D0/DSQRT(2.0D0)*(R2-R3)
      Q3=1.0D0/DSQRT(6.0D0)*(2.0D0*R1-R2-R3)
      F=THREBQ(Q1,Q2,Q3)
      S1=R1-R10
      S2=R2-R20
      S3=R3-R30
      Q12=Q1*Q1
      Q13=Q12*Q1
      Q14=Q13*Q1
      Q15=Q14*Q1
      Q16=Q15*Q1
      Q22=Q2*Q2
      Q32=Q3*Q3
      TQ1=Q22+Q32
      TQ2=Q32-3.0D0*Q22
      TQ3=Q22-Q32
      TQ12=TQ1*TQ1
      TQ13=TQ12*TQ1
      TQ22=TQ2*TQ2
      DQ1R1=1.0D0/DSQRT(3.0D0)
      DQ1R2=DQ1R1
      DQ1R3=DQ1R1
      DQ2R1=0.0D0
      DQ2R2=1.0D0/DSQRT(2.0D0)
      DQ2R3=-DQ2R2
      DQ3R1=2.0D0/DSQRT(6.0D0)
      DQ3R2=-0.5D0*DQ3R1
      DQ3R3=DQ3R2
      DTQ2=2.0D0*Q2
      DTQ3=2.0D0*Q3
      DPOQ1=C(1)+2.0D0*C(2)*Q1+3.0D0*C(4)*Q12+C(5)*TQ1+4.0D0*C(7)*Q13+
     1 2.0D0*C(8)*Q1*TQ1+C(10)*Q3*TQ2+C(12)*Q3+C(14)*Q1*DTQ3+C(15)*TQ3+
     2  3.0D0*C(17)*Q12*Q3+2.0D0*C(18)*Q1*TQ3+C(19)*Q3*TQ1+5.0D0*
     3 C(23)*Q14+3.0D0*C(24)*Q12*TQ1+C(25)*TQ12+C(26)*Q1*DTQ3*TQ2+4.0D0
     4  *C(28)*Q13*Q3+3.0D0*C(29)*Q12*TQ3+C(30)*Q1*DTQ3*TQ1+C(31)*Q32*
     5  TQ2+C(32)*TQ1*TQ3+6.0D0*C(35)*Q15+4.0D0*C(36)*Q13*TQ1+2.0D0*
     6  C(37)*Q1*TQ12+3.0D0*C(38)*Q12*Q3*TQ2+C(39)*Q3*TQ1*TQ2+5.0D0*
     7  C(42)*Q14*Q3+4.0D0*C(43)*Q13*TQ3+3.0D0*C(44)*Q12*Q3*TQ1+2.0D0*
     8  C(45)*Q1*Q32*TQ2+2.0D0*C(46)*Q1*TQ1*TQ3+C(47)*Q3*TQ12+C(48)*Q3*
     9  TQ2*TQ3
      DPOQ2=C(3)*DTQ2+C(5)*Q1*DTQ2-C(6)*Q3*6.0D0*Q2+C(8)*Q12*DTQ2
     1   +C(9)*2.0D0*TQ1*DTQ2-C(10)*Q1*Q3*6.0D0*Q2+C(13)*DTQ2+
     2   C(15)*Q1*DTQ2+C(16)*Q3*DTQ2+C(18)*Q12*DTQ2+
     3   C(19)*Q1*Q3*DTQ2-C(20)*Q32*6.0D0*Q2+C(21)*DTQ2*TQ3+
     4   C(21)*TQ1*DTQ2+C(24)*Q13*DTQ2+C(25)*Q1*2.0D0*TQ1*DTQ2-
     5   C(26)*Q12*Q3*6.0D0*Q2+C(27)*Q3*DTQ2*TQ2-C(27)*Q3*TQ1*6.0D0*
     6   Q2+C(29)*Q13*DTQ2+C(30)*Q12*Q3*DTQ2-C(31)*Q1*Q32*6.0D0*Q2
     7   +C(32)*Q1*DTQ2*(TQ1+TQ3)+C(33)*DTQ3*TQ1*DTQ2+C(34)*Q3*DTQ2*
     8   (TQ2-3.0D0*TQ3)+C(36)*Q14*DTQ2+4.0D0*C(37)*Q12*Q2*TQ1-
     9   C(38)*Q13*Q3*6.0D0*Q2+C(39)*Q1*Q3*DTQ2*(TQ2-3.0D0*TQ1)+
     A   C(40)*3.0D0*TQ12*DTQ2-C(41)*Q32*TQ2*6.0D0*DTQ2+
     B   C(43)*Q14*DTQ2+C(44)*Q13*Q3*DTQ2-C(45)*Q12*Q32*6.0D0*Q2+
     C   C(46)*Q12*DTQ2*(TQ3+TQ1)+C(47)*Q1*DTQ3*TQ1*DTQ2+
     D  C(48)*Q1*Q3*DTQ2*(TQ2-3.0D0*TQ3)+C(49)*Q32*DTQ2*(TQ2-3.0D0*TQ1)
     E   +C(50)*DTQ2*TQ1*(2.0D0*TQ3+TQ1)
      DPOQ3=C(3)*DTQ3+C(5)*Q1*DTQ3+C(6)*TQ2+C(6)*Q3*DTQ3+C(8)*Q12*DTQ3+
     1   C(9)*TQ1*2.0D0*DTQ3+C(10)*Q1*(TQ2+Q3*DTQ3)+C(11)+
     2   C(12)*Q1-C(13)*DTQ3+C(14)*Q12-C(15)*Q1*DTQ3+C(16)*(TQ1+
     3   Q3*DTQ3)+C(17)*Q13-C(18)*Q12*DTQ3+C(19)*Q1*(TQ1+Q3*DTQ3)
     4   +C(20)*DTQ3*(TQ2+Q32)+C(21)*DTQ3*(TQ3-TQ1)
     5  +C(24)*Q13*DTQ3+C(25)*Q1*2.0D0*TQ1*DTQ3+C(26)*Q12*(TQ2+Q3*DTQ3)
     6   +C(27)*(TQ1*TQ2+Q3*DTQ3*(TQ2+TQ1))+C(28)*Q14-C(29)*Q13*DTQ3
     7   +C(30)*Q12*(TQ1+Q3*DTQ3)+C(31)*Q1*DTQ3*(TQ2+Q32)+C(32)*Q1*
     8   DTQ3*(TQ3-TQ1)+C(33)*TQ1*(TQ1+DTQ3*DTQ3)+C(34)*TQ2*TQ3+
     9  C(34)*Q3*DTQ3*(TQ3-TQ2)+C(36)*Q14*DTQ3+C(37)*Q12*2.0D0*TQ1*DTQ3
     A   +C(38)*Q13*(TQ2+Q3*DTQ3)+C(39)*Q1*TQ1*TQ2+C(39)*Q1*Q3*DTQ3*
     B  (TQ1+TQ2)+C(40)*3.0D0*TQ12*DTQ3+C(41)*DTQ3*TQ2*(TQ2+2.0D0*Q32)+
     C  C(42)*Q15-C(43)*Q14*DTQ3+C(44)*Q13*(TQ1+Q3*DTQ3)+C(45)*Q12*DTQ3
     D   *(TQ2+Q32)+C(46)*Q12*DTQ3*(TQ3-TQ1)+C(47)*Q1*(TQ12+TQ1*4.0D0*
     E   Q32)+C(48)*Q1*TQ2*TQ3+C(48)*Q1*Q3*DTQ3*(TQ3-TQ2)+C(49)*DTQ3*
     F  TQ1*TQ2+C(49)*Q32*DTQ3*(TQ1+TQ2)+C(50)*DTQ3*TQ1*(2.0D0*TQ3-TQ1)
      CALL  DEXDIS(R1,R2,R3,DER1,DER2,DER3)
      CALL  DELECT(R1,R2,R3,DERI1,DERI2,DERI3)
      G(1)=((DPOQ1*DQ1R1+DPOQ2*DQ2R1+DPOQ3*DQ3R1)*DECAY1-POLQ*C(51)/
     1   DCOSH(C(51)*S1)**2)*DECAY2*DECAY3+DVOO(R1)+DER1+DERI1
      G(2)=((DPOQ1*DQ1R2+DPOQ2*DQ2R2+DPOQ3*DQ3R2)*DECAY2-POLQ*C(52)/
     1   DCOSH(C(52)*S2)**2)*DECAY1*DECAY3+DVOH(R2)+DER2+DERI2
      G(3)=((DPOQ1*DQ1R3+DPOQ2*DQ2R3+DPOQ3*DQ3R3)*DECAY3-POLQ*C(52)/
     1   DCOSH(C(52)*S3)**2)*DECAY1*DECAY2+DVOH(R3)+DER3+DERI3
      RETURN
      END
C
C         CALCULATE THE 1ST DERIVATIVES OF THE EXCHANGE-DISPERSION TERM
C
      SUBROUTINE DEXDIS(R1,R2,R3,DER1,DER2,DER3)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION CEFOO(10),CEFOH2(10),CEFOH3(10),CEDOO(10),CEDOH2(10)
      DIMENSION CEDOH3(10)
      COMMON/DISPC/COO(10),COH(10)
      COMMON/RKVAL/RK0OO(10),RK1OO(10),RK0OH(10),RK1OH(10)
      COMMON/DIATDI/R0OO,RMOO,R0OH,RMOH
      COMMON/DAMPC/ADAMP(10),BDAMP(10)
      T1=R1-RMOO
      T5=R2-RMOH
      T6=R3-RMOH
      T7=0.5D0*COO(6)
      T8=0.5D0*COO(8)
      T9=0.5D0*COO(10)
      T10=0.5D0*COH(6)
      T11=0.5D0*COH(8)
      T12=0.5D0*COH(10)
      T13=RK1OH(6)*RK0OH(6)
      T14=RK1OH(8)*RK0OH(8)
      T15=RK1OH(10)*RK0OH(10)
      T16=RK1OO(6)*RK0OO(6)
      T18=RK1OO(8)*RK0OO(8)
      T19=RK1OO(10)*RK0OO(10)
      T20=DEXP(-RK1OH(6)*T5)
      T21=DEXP(-RK1OH(6)*T6)
      T22=DEXP(-RK1OH(8)*T5)
      T23=DEXP(-RK1OH(8)*T6)
      T24=DEXP(-RK1OH(10)*T5)
      T25=DEXP(-RK1OH(10)*T6)
      T26=DEXP(-RK1OO(6)*T1)
      T27=DEXP(-RK1OO(8)*T1)
      T28=DEXP(-RK1OO(10)*T1)
      T29=DCOSH(RK1OH(6)*R2)
      T30=DCOSH(RK1OH(6)*R3)
      T31=DCOSH(RK1OH(8)*R2)
      T32=DCOSH(RK1OH(8)*R3)
      T33=DCOSH(RK1OH(10)*R2)
      T34=DCOSH(RK1OH(10)*R3)
      T35=DCOSH(RK1OO(6)*R1)
      T36=DCOSH(RK1OO(8)*R1)
      T37=DCOSH(RK1OO(10)*R1)
      T38=DTANH(RK1OH(6)*R2)
      T39=DTANH(RK1OH(6)*R3)
      T40=DTANH(RK1OH(8)*R2)
      T41=DTANH(RK1OH(8)*R3)
      T42=DTANH(RK1OH(10)*R2)
      T43=DTANH(RK1OH(10)*R3)
      T44=DTANH(RK1OO(6)*R1)
      T45=DTANH(RK1OO(8)*R1)
      T46=DTANH(RK1OO(10)*R1)
      DO 10 IN=6,10,2
         CEFOO(IN)=CEF(COO(IN),RK0OH(IN),RK1OH(IN),RK0OH(IN),RK1OH(IN),
     1          RMOH,RMOH,R2,R3)
         CEDOO(IN)=CEFOO(IN)-COO(IN)
         CEFOH2(IN)=CEF(COH(IN),RK0OO(IN),RK1OO(IN),RK0OH(IN),RK1OH(IN),
     1          RMOO,RMOH,R1,R3)
         CEDOH2(IN)=CEFOH2(IN)-COH(IN)
         CEFOH3(IN)=CEF(COH(IN),RK0OO(IN),RK1OO(IN),RK0OH(IN),RK1OH(IN),
     1          RMOO,RMOH,R1,R2)
         CEDOH3(IN)=CEFOH3(IN)-COH(IN)
   10 CONTINUE
      RR1=2.0D0*R1/(RMOO+2.5D0*R0OO)
      T6R1=((1.0D0-EXP(-ADAMP(6)*RR1-BDAMP(6)*RR1**2))/R1)**6
      T8R1=((1.0D0-EXP(-ADAMP(8)*RR1-BDAMP(8)*RR1**2))/R1)**8
      T10R1=((1.0D0-EXP(-ADAMP(10)*RR1-BDAMP(10)*RR1**2))/R1)**10
      RR2=2.0D0*R2/(RMOH+2.5D0*R0OH)
      T6R2=((1.0D0-EXP(-ADAMP(6)*RR2-BDAMP(6)*RR2**2))/R2)**6
      T8R2=((1.0D0-EXP(-ADAMP(8)*RR2-BDAMP(8)*RR2**2))/R2)**8
      T10R2=((1.0D0-EXP(-ADAMP(10)*RR2-BDAMP(10)*RR2**2))/R2)**10
      RR3=2.0D0*R3/(RMOH+2.5D0*R0OH)
      T6R3=((1.0D0-EXP(-ADAMP(6)*RR3-BDAMP(6)*RR3**2))/R3)**6
      T8R3=((1.0D0-EXP(-ADAMP(8)*RR3-BDAMP(8)*RR3**2))/R3)**8
      T10R3=((1.0D0-EXP(-ADAMP(10)*RR3-BDAMP(10)*RR3**2))/R3)**10
      DC61R2=T7*(T13
     1      *T20*T39+
     1      (1.0D0-RK0OH(6)*T21)
     1      *RK1OH(6)/T29**2)
      DC61R3=T7*(T13
     1      *T21*T38+
     1      (1.0D0-RK0OH(6)*T20)
     1      *RK1OH(6)/T30**2)
      DC81R2=T8*(T14
     1      *T22*T41+
     1      (1.0D0-RK0OH(8)*T23)
     1      *RK1OH(8)/T31**2)
      DC81R3=T8*(T14
     1      *T23*T40+
     1      (1.0D0-RK0OH(8)*T22)
     1      *RK1OH(8)/T32**2)
      D101R2=T9*(T15
     1      *T24*T43+
     1      (1.0D0-RK0OH(10)*T25)
     1      *RK1OH(10)/T33**2)
      D101R3=T9*(T15
     1      *T25*T42+
     1      (1.0D0-RK0OH(10)*T24)
     1      *RK1OH(10)/T34**2)
      DC62R1=T10*(T16
     1      *T26*T39+
     1      (1.0D0-RK0OH(6)*T21)
     1      *RK1OO(6)/T35**2)
      DC62R3=T10*(T13
     1      *T21*T44+
     1      (1.0D0-RK0OO(6)*T26)
     1      *RK1OH(6)/T30**2)
      DC82R1=T11*(T18
     1      *T27*T41+
     1      (1.0D0-RK0OH(8)*T23)
     1      *RK1OO(8)/T36**2)
      DC82R3=T11*(T14
     1      *T23*T45+
     1      (1.0D0-RK0OO(8)*T27)
     1      *RK1OH(8)/T32**2)
      D102R1=T12*(T19
     1      *T28*T43+
     1      (1.0D0-RK0OH(10)*T25)
     1      *RK1OO(10)/T37**2)
      D102R3=T12*(T15
     1      *T25*T46+
     1      (1.0D0-RK0OO(10)*T28)
     1      *RK1OH(10)/T34**2)
      DC63R1=T10*(T16
     1      *T26*T38+
     1      (1.0D0-RK0OH(6)*T20)
     1      *RK1OO(6)/T35**2)
      DC63R2=T10*(T13
     1      *T20*T44+
     1      (1.0D0-RK0OO(6)*T26)
     1      *RK1OH(6)/T29**2)
      DC83R1=T11*(T18
     1      *T27*T40+
     1      (1.0D0-RK0OH(8)*T22)
     1      *RK1OO(8)/T36**2)
      DC83R2=T11*(T14
     1      *T22*T45+
     1      (1.0D0-RK0OO(8)*T27)
     1      *RK1OH(8)/T31**2)
      D103R1=T12*(T19
     1      *T28*T42+
     1      (1.0D0-RK0OH(10)*T24)
     1      *RK1OO(10)/T37**2)
      D103R2=T12*(T15
     1      *T24*T46+
     1      (1.0D0-RK0OO(10)*T28)
     1      *RK1OH(10)/T33**2)
      DER1=DDISP(R1,CEDOO(6),CEDOO(8),CEDOO(10),R0OO,RMOO)-DC62R1*
     1         T6R2-DC63R1*T6R3-DC82R1*T8R2-DC83R1*T8R3-D102R1*T10R2-
     2     D103R1*T10R3
      DER2=DDISP(R2,CEDOH2(6),CEDOH2(8),CEDOH2(10),R0OH,RMOH)-DC61R2*
     1         T6R1-DC63R2*T6R3-DC81R2*T8R1-DC83R2*T8R3-D101R2*T10R1-
     2     D103R2*T10R3
      DER3=DDISP(R3,CEDOH3(6),CEDOH3(8),CEDOH3(10),R0OH,RMOH)-DC61R3*
     1         T6R1-DC62R3*T6R2-DC81R3*T8R1-DC82R3*T8R2-D101R3*T10R1-
     2     D102R3*T10R2
      RETURN
      END
C
C         CALCULATE THE DERIVATIVES OF THE ELECTROSTATIC TERM
C
      SUBROUTINE DELECT(R1,R2,R3,DER1,DER2,DER3)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      COMMON/POLAR/C4,C5
      COMMON/RKVAL/RK0OO(10),RK1OO(10),RK0OH(10),RK1OH(10)
      COMMON/DIATDI/R0OO,RMOO,R0OH,RMOH
      COMMON/DAMPC/ADAMP(10),BDAMP(10)
      C42=C4
      C43=C4
      C52=C5
      C53=C5
      RR1=2.0D0*R1/(RMOO+2.5D0*R0OO)
      D4R1=1.0D0-DEXP(-ADAMP(4)*RR1-BDAMP(4)*RR1*RR1)
      D5R1=1.0D0-DEXP(-ADAMP(5)*RR1-BDAMP(5)*RR1*RR1)
      T4R1=(D4R1/R1)**4
      T5R1=(D5R1/R1)**5
      RR2=2.0D0*R2/(RMOH+2.5D0*R0OH)
      D4R2=1.0D0-DEXP(-ADAMP(4)*RR2-BDAMP(4)*RR2*RR2)
      D5R2=1.0D0-DEXP(-ADAMP(5)*RR2-BDAMP(5)*RR2*RR2)
      T4R2=(D4R2/R2)**4
      T5R2=(D5R2/R2)**5
      RR3=2.0D0*R3/(RMOH+2.5D0*R0OH)
      D4R3=1.0D0-DEXP(-ADAMP(4)*RR3-BDAMP(4)*RR3*RR3)
      D5R3=1.0D0-DEXP(-ADAMP(5)*RR3-BDAMP(5)*RR3*RR3)
      T4R3=(D4R3/R3)**4
      T5R3=(D5R3/R3)**5
      R23=R2**3
      R24=R23*R2
      R33=R3**3
      R34=R33*R3
      R14=R1**4
      R15=R14*R1
      R25=R24*R2
      R35=R34*R3
      RMQ=RMOH**4
      RMQ5=0.50D0/RMQ
      RMR3=RMQ5*R34
      RMR2=RMQ5*R24
      RMR33=RMQ5*R33
      RMR23=RMQ5*R23
      TAO=DTANH(RK1OO(4)*R1)
      TAH2=DTANH(RK1OH(4)*R2)
      TAH3=DTANH(RK1OH(4)*R3)
      EX3=DEXP(-RK1OH(4)*(R3-RMOH))
      EX2=DEXP(-RK1OH(4)*(R2-RMOH))
      COR=1.0D0/DCOSH(RK1OO(4)*R1)
      COR2=1.0D0/DCOSH(RK1OH(4)*R2)
      COR3=1.0D0/DCOSH(RK1OH(4)*R3)
      R3E3=RMR3*EX3
      R2E2=RMR2*EX2
      RKOCC=RK1OO(4)*COR*COR
      RKHC3=RK1OH(4)*COR3*COR3
      RKHC2=RK1OH(4)*COR2*COR2
      CRE43=C4*R3E3
      CRE42=C4*R2E2
      CRE53=C5*R3E3
      CRE52=C5*R2E2
      DIVR3=4.0D0/R3-RK1OH(4)
      DIVR2=4.0D0/R2-RK1OH(4)
      DIF3=4.0D0-R3*RK1OH(4)
      DIF2=4.0D0-R2*RK1OH(4)
      C4OHR2=CRE43*TAO
      C5OHR2=CRE53*TAO
      C4OHR3=CRE42*TAO
      C5OHR3=CRE52*TAO
      C4OO=CRE43*TAH2+CRE42*TAH3
      C5OO=CRE53*TAH2+CRE52*TAH3
      DC42R3=C4OHR2*DIVR3
      DC52R3=C5OHR2*DIVR3
      DC43R2=C4OHR3*DIVR2
      DC53R2=C5OHR3*DIVR2
      DC42R1=CRE43*RKOCC
      DC52R1=CRE53*RKOCC
      DC43R1=CRE42*RKOCC
      DC53R1=CRE52*RKOCC
      DC42R2=0.0D0
      DC52R2=0.0D0
      DC43R3=0.0D0
      DC53R3=0.0D0
      DC41R3=C4*RMR33*EX3*TAH2*DIF3+C4*RMR2*EX2*RKHC3
      DC41R2=C4*RMR23*EX2*TAH3*DIF2+C4*RMR3*EX3*RKHC2
      DC51R3=C5*RMR33*EX3*TAH2*DIF3+C5*RMR2*EX2*RKHC3
      DC51R2=C5*RMR23*EX2*TAH3*DIF2+C5*RMR3*EX3*RKHC2
      DC41R1=0.0D0
      DC51R1=0.0D0
      DRR1=RR1/R1
      DRR2=RR2/R2
      DRR3=RR3/R3
      DDISP1=-4.0D0*C4OO/R14*D4R1**3*(D4R1/R1+(1.0D0-D4R1)*(-ADAMP(4)-
     1       2.0D0*BDAMP(4)*RR1)*DRR1)
     2      -5.0D0*C5OO/R15*D5R1**4*(D5R1/R1+(1.0D0-D5R1)*(-ADAMP(5)-
     3       2.0D0*BDAMP(5)*RR1)*DRR1)
      DDISP2=-4.D0*C4OHR2/R24*D4R2**3*(D4R2/R2+(1.0D0-D4R2)*(-ADAMP(4)-
     1       2.0D0*BDAMP(4)*RR2)*DRR2)
     2      -5.0D0*C5OHR2/R25*D5R2**4*(D5R2/R2+(1.0D0-D5R2)*(-ADAMP(5)-
     3       2.0D0*BDAMP(5)*RR2)*DRR2)
      DDISP3=-4.D0*C4OHR3/R34*D4R3**3*(D4R3/R3+(1.0D0-D4R3)*(-ADAMP(4)-
     1       2.0D0*BDAMP(4)*RR3)*DRR3)
     2      -5.0D0*C5OHR3/R35*D5R3**4*(D5R3/R3+(1.0D0-D5R3)*(-ADAMP(5)-
     3       2.0D0*BDAMP(5)*RR3)*DRR3)
      DER1=DDISP1+DC42R1*T4R2+DC43R1*T4R3+DC52R1*T5R2+DC53R1*T5R3
     1     +DC41R1*T4R1+DC51R1*T5R1
      DER2=DDISP2+DC41R2*T4R1+DC43R2*T4R3+DC51R2*T5R1+DC53R2*T5R3
     1     +DC42R2*T4R2+DC52R2*T5R2
      DER3=DDISP3+DC42R3*T4R2+DC41R3*T4R1+DC52R3*T5R2+DC51R3*T5R1
     1     +DC43R3*T4R3+DC53R3*T5R3
      RETURN
      END
C
C         CALCULATE THE THREE-BODY ENERGY TERM IN COORDINATES Q1,Q2,Q3
C
      FUNCTION THREBQ(Q1,Q2,Q3)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      COMMON/HCOEFF/C(52)
      COMMON/THRBOD/POLQ,DECAY1,DECAY2,DECAY3,R1,R2,R3
      COMMON/REFGEO/R10,R20,R30
      Q12=Q1*Q1
      Q13=Q12*Q1
      Q14=Q13*Q1
      Q15=Q14*Q1
      Q16=Q15*Q1
      Q22=Q2*Q2
      Q32=Q3*Q3
      TQ1=Q22+Q32
      TQ2=Q32-3.0D0*Q22
      TQ3=Q22-Q32
      TQ12=TQ1*TQ1
      TQ13=TQ12*TQ1
      TQ22=TQ2*TQ2
      S1=R1-R10
      S2=R2-R20
      S3=R3-R30
      POLQ=C(1)*Q1+C(2)*Q12+C(3)*TQ1+C(4)*Q13+C(5)*Q1*TQ1+
     1C(6)*Q3*TQ2+C(7)*Q14+C(8)*Q12*TQ1+C(9)*TQ1**2+C(10)*Q1*Q3*TQ2+
     2C(11)*Q3+C(12)*Q1*Q3+C(13)*TQ3+C(14)*Q12*Q3+C(15)*Q1*TQ3+
     3C(16)*Q3*TQ1+C(17)*Q13*Q3+C(18)*Q12*TQ3+C(19)*Q1*Q3*TQ1+
     4C(20)*Q32*TQ2+C(21)*TQ1*TQ3+C(22)+C(23)*Q15+C(24)*Q13*TQ1+
     5C(25)*Q1*TQ12+C(26)*Q12*Q3*TQ2+C(27)*Q3*TQ1*TQ2+C(28)*Q14*Q3+
     6C(29)*Q13*TQ3+C(30)*Q12*Q3*TQ1+C(31)*Q1*Q32*TQ2+C(32)*Q1*TQ1*TQ3+
     7C(33)*Q3*TQ12+C(34)*Q3*TQ2*TQ3+C(35)*Q16+C(36)*Q14*TQ1+
     8C(37)*Q12*TQ12+C(38)*Q13*Q3*TQ2+C(39)*Q1*Q3*TQ1*TQ2+C(40)*TQ13+
     9C(41)*Q32*TQ22+C(42)*Q15*Q3+C(43)*Q14*TQ3+C(44)*Q13*Q3*TQ1+
     AC(45)*Q12*Q32*TQ2+C(46)*Q12*TQ1*TQ3+C(47)*Q1*Q3*TQ12+
     BC(48)*Q1*Q3*TQ2*TQ3+C(49)*Q32*TQ1*TQ2+C(50)*TQ12*TQ3
      DECAY1=1.0D0-DTANH(C(51)*S1)
      DECAY2=1.0D0-DTANH(C(52)*S2)
      DECAY3=1.0D0-DTANH(C(52)*S3)
      THREBQ=POLQ*DECAY1*DECAY2*DECAY3
      RETURN
      END
C
C         CALCULATE THE EHFACE2 POTENTIAL FOR  O...H
C
      FUNCTION VOH(R)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      VOH=EHFOH(R)+DISOH(R)
      RETURN
      END
C
C         CALCULATE THE EHF ENERGY CONTRIBUTION FOR  O...H
C
      FUNCTION EHFOH(R)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION ASV(4)
      COMMON/DIATDI/R0OO,RMOO,R0OH,RMOH
      DATA D,ASV/0.13825385D0,2.6564788D0,1.7450528D0,0.71014391D0,
     1           2.5453276D0/
      X=R-RMOH
      R2=X*X
      R3=R2*X
      EHFOH=-D*(1.0D0+ASV(1)*X+ASV(2)*R2+ASV(3)*R3)*DEXP(-ASV(4)*X)
      RETURN
      END
C
C         CALCULATE THE DISPERSION ENERGY FOR  O...H
C
      FUNCTION DISOH(R)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      COMMON/DISPC/COO(10),COH(10)
      COMMON/DIATDI/R0OO,RMOO,R0OH,RMOH
      DISOH=DISP(R,COH(6),COH(8),COH(10),R0OH,RMOH)
      RETURN
      END
C
C         CALCULATE THE 1ST DERIVATIVE OF EHFACE2 CURVE FOR  O...H
C
      FUNCTION DVOH(R)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION ASV(4)
      COMMON/DISPC/COO(10),COH(10)
      COMMON/DIATDI/R0OO,RMOO,R0OH,RMOH
      DATA D,ASV/0.13825385,2.6564788,1.7450528,0.71014391,2.5453276/
      X=R-RMOH
      R2=X*X
      R3=R2*X
      POL=-D*(1.0D0+ASV(1)*X+ASV(2)*R2+ASV(3)*R3)
      DPOL=-D*(ASV(1)+2.0D0*ASV(2)*X+3.0D0*ASV(3)*R2)
      POT=DEXP(-ASV(4)*X)
      DVOH=-ASV(4)*POT*POL+DPOL*POT+DDISP(R,COH(6),COH(8),COH(10),
     1   R0OH,RMOH)
      RETURN
      END
C
C         CALCULATE THE EHFACE2 POTENTIAL FOR  O...O
C
      FUNCTION VOO(R)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      VOO=EHFOO(R)+DISOO(R)
      RETURN
      END
C
C         CALCULATE THE EHF ENERGY CONTRIBUTION FOR  O...O
C
      FUNCTION EHFOO(R)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION ASV(4)
      COMMON/DIATDI/R0OO,RMOO,R0OH,RMOH
      DATA D,ASV/0.14291202D0,3.6445906D0,3.9281238D0,2.0986689D0,
     1           3.3522498D0/
      X=R-RMOO
      R2=X*X
      R3=R2*X
      EHFOO=-D*(1.0D0+ASV(1)*X+ASV(2)*R2+ASV(3)*R3)*DEXP(-ASV(4)*X)
      RETURN
      END
C
C         CALCULATE THE DISPERSION ENERGY FOR  O...O
C
      FUNCTION DISOO(R)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      COMMON/DISPC/COO(10),COH(10)
      COMMON/DIATDI/R0OO,RMOO,R0OH,RMOH
      DISOO=DISP(R,COO(6),COO(8),COO(10),R0OO,RMOO)
      RETURN
      END
C
C         CALCULATE THE 1ST DERIVATIVE OF EHFACE2 CURVE FOR  O...O
C
      FUNCTION DVOO(R)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION ASV(4)
      COMMON/DISPC/COO(10),COH(10)
      COMMON/DIATDI/R0OO,RMOO,R0OH,RMOH
      DATA D,ASV/0.14291202D0,3.6445906D0,3.9281238D0,2.0986689D0,
     1           3.3522498D0/
      X=R-RMOO
      R2=X*X
      R3=R2*X
      POL=-D*(1.0D0+ASV(1)*X+ASV(2)*R2+ASV(3)*R3)
      DPOL=-D*(ASV(1)+2.0D0*ASV(2)*X+3.0D0*ASV(3)*R2)
      POT=DEXP(-ASV(4)*X)
      DVOO=-ASV(4)*POT*POL+DPOL*POT+DDISP(R,COO(6),COO(8),COO(10),
     1   R0OO,RMOO)
      RETURN
      END
C
C         CALCULATE THE EFECTIVE Cn
C
      FUNCTION CEF(CAS,RK01,RK11,RK02,RK12,RE1,RE2,R1,R2)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      CEF=0.5D0*CAS*((1.0D0-RK01*DEXP(-RK11*(R1-RE1)))*DTANH(RK12*R2)+
     1  (1.0D0-RK02*DEXP(-RK12*(R2-RE2)))*DTANH(RK11*R1))
      RETURN
      END
C
C         CALCULATE THE EXCHANGE - DISPERSION TERM
C
      FUNCTION EXDIS (R1,R2,R3)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      COMMON/DISPC/COO(10),COH(10)
      COMMON/RKVAL/RK0OO(10),RK1OO(10),RK0OH(10),RK1OH(10)
      COMMON/DISCO/CEFOO(10),CEFOH2(10),CEFOH3(10),CEDOO(10),CEDOH2(10)
      COMMON/DISCO2/CEDOH3(10)
      COMMON/DIATDI/R0OO,RMOO,R0OH,RMOH
      DO 10 IN=6,10,2
         CEFOO(IN)=CEF(COO(IN),RK0OH(IN),RK1OH(IN),RK0OH(IN),RK1OH(IN),
     1      RMOH,RMOH,R2,R3)
         CEDOO(IN)=CEFOO(IN)-COO(IN)
         CEFOH2(IN)=CEF(COH(IN),RK0OO(IN),RK1OO(IN),RK0OH(IN),RK1OH(IN),
     1      RMOO,RMOH,R1,R3)
         CEDOH2(IN)=CEFOH2(IN)-COH(IN)
         CEFOH3(IN)=CEF(COH(IN),RK0OO(IN),RK1OO(IN),RK0OH(IN),RK1OH(IN),
     1      RMOO,RMOH,R1,R2)
         CEDOH3(IN)=CEFOH3(IN)-COH(IN)
   10 CONTINUE
      EXDIS=DISP(R1,CEDOO(6),CEDOO(8),CEDOO(10),R0OO,RMOO)
     1     +DISP(R2,CEDOH2(6),CEDOH2(8),CEDOH2(10),R0OH,RMOH)
     2     +DISP(R3,CEDOH3(6),CEDOH3(8),CEDOH3(10),R0OH,RMOH)
      RETURN
      END
C
C         CALCULATE THE ELECTROSTATIC TERM
C
      FUNCTION ELECT(R1,R2,R3)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      COMMON/POLAR/C4,C5
      COMMON/RKVAL/RK0OO(10),RK1OO(10),RK0OH(10),RK1OH(10)
      COMMON/DIATDI/R0OO,RMOO,R0OH,RMOH
      COMMON/DAMPC/ADAMP(10),BDAMP(10)
      COMMON/WELECT/C4OHR2,C5OHR2,C4OHR3,C5OHR3,C4OO,C5OO,TERM4,TERM5
      C42=C4
      C43=C4
      C52=C5
      C53=C5
      R23=R2**3
      R24=R23*R2
      R33=R3**3
      R34=R33*R3
      R14=R1**4
      R15=R14*R1
      R25=R24*R2
      R35=R34*R3
      RMQ=RMOH**4
      RMQ5=0.50D0/RMQ
      RMR3=RMQ5*R34
      RMR2=RMQ5*R24
      RMR33=RMQ5*R33
      RMR23=RMQ5*R23
      TAO=DTANH(RK1OO(4)*R1)
      TAH2=DTANH(RK1OH(4)*R2)
      TAH3=DTANH(RK1OH(4)*R3)
      EX3=DEXP(-RK1OH(4)*(R3-RMOH))
      EX2=DEXP(-RK1OH(4)*(R2-RMOH))
      R3E3=RMR3*EX3
      R2E2=RMR2*EX2
      CRE43=C4*R3E3
      CRE42=C4*R2E2
      CRE53=C5*R3E3
      CRE52=C5*R2E2
      C4OHR2=CRE43*TAO
      C5OHR2=CRE53*TAO
      C4OHR3=CRE42*TAO
      C5OHR3=CRE52*TAO
      C4OO=CRE43*TAH2+CRE42*TAH3
      C5OO=CRE53*TAH2+CRE52*TAH3
      RROH2=2.0D0*R2/(RMOH+2.5D0*R0OH)
      RROH3=2.0D0*R3/(RMOH+2.5D0*R0OH)
      RROO=2.0D0*R1/(RMOO+2.5D0*R0OO)
      TERM4=C4OO/R14*(1.0D0-DEXP(-ADAMP(4)*RROO-BDAMP(4)*RROO**2))**4+
     1 C4OHR2/R24*(1.0D0-DEXP(-ADAMP(4)*RROH2-BDAMP(4)*RROH2**2))**4+
     2 C4OHR3/R34*(1.0D0-DEXP(-ADAMP(4)*RROH3-BDAMP(4)*RROH3**2))**4
      TERM5=C5OO/R15*(1.0D0-DEXP(-ADAMP(5)*RROO-BDAMP(5)*RROO**2))**5+
     1 C5OHR2/R25*(1.0D0-DEXP(-ADAMP(5)*RROH2-BDAMP(5)*RROH2**2))**5+
     2 C5OHR3/R35*(1.0D0-DEXP(-ADAMP(5)*RROH3-BDAMP(5)*RROH3**2))**5
      ELECT=TERM4+TERM5
      RETURN
      END
C
      FUNCTION DISP(R,C6,C8,C10,R0,RM)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      COMMON/DAMPC/ADAMP(10),BDAMP(10)
      R6=R**6
      R8=R6*R*R
      R10=R8*R*R
      RR=2.0D0*R/(RM+2.5D0*R0)
      D6=(1.0D0-DEXP(-ADAMP(6)*RR-BDAMP(6)*RR*RR))**6
      D8=(1.0D0-DEXP(-ADAMP(8)*RR-BDAMP(8)*RR*RR))**8
      D10=(1.0D0-DEXP(-ADAMP(10)*RR-BDAMP(10)*RR*RR))**10
      DISP=-C6/R6*D6-C8/R8*D8-C10/R10*D10
      RETURN
      END
C
      FUNCTION DDISP(R,C6,C8,C10,R0,RM)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      COMMON/DAMPC/ADAMP(10),BDAMP(10)
      R6=R**6
      R8=R6*R*R
      R10=R8*R*R
      RR=2.0D0*R/(RM+2.5D0*R0)
      DRR=RR/R
      T6=1.0D0-DEXP(-ADAMP(6)*RR-BDAMP(6)*RR*RR)
      T8=1.0D0-DEXP(-ADAMP(8)*RR-BDAMP(8)*RR*RR)
      T10=1.0D0-DEXP(-ADAMP(10)*RR-BDAMP(10)*RR*RR)
      DDISP=6.D0*C6/R6*T6**5*(T6/R+(1.0D0-T6)*(-ADAMP(6)-2.0D0*BDAMP(6)
     1      *RR)*DRR)+
     2      8.D0*C8/R8*T8**7*(T8/R+(1.0D0-T8)*(-ADAMP(8)-2.0D0*BDAMP(8)
     3      *RR)*DRR)+
     4      10.0D0*C10/R10*T10**9*(T10/R+(1.0D0-T10)*(-ADAMP(10)-2.0D0*
     5     BDAMP(10)*RR)*DRR)
      RETURN
      END
C
C         DATA FOR HO2 DMBE IV POTENTIAL ENERGY SURFACE
C
      BLOCK DATA HO2DAT
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      COMMON/HCOEFF/C(52)
      COMMON/DISPC/COO(10),COH(10)
      COMMON/DIATDI/R0OO,RMOO,R0OH,RMOH
      COMMON/RKVAL/RK0OO(10),RK1OO(10),RK0OH(10),RK1OH(10)
      COMMON/POLAR/C4,C5
      COMMON/DAMPC/ADAMP(10),BDAMP(10)
      COMMON/REFGEO/R10,R20,R30
      DATA C/
     1  .49040645D+01, -.86748216D+01,  .50555792D+01,  .42941301D+01,
     1 -.41874792D+01,  .13461379D+00, -.99064922D+00,  .13358488D+01,
     1  .13495231D+01, -.18529696D+00, -.23534213D+02,  .24289930D+02,
     1 -.50209026D+01, -.10365484D+02,  .46692224D+01, -.14747138D+01,
     1  .23119718D+01, -.18247842D+01, -.28472166D+00,  .51036509D+00,
     1  .19124083D+00,  .45405729D+01,  .11087611D+00, -.19990481D+00,
     1 -.37356178D+00,  .46142042D-01, -.20565580D+00, -.27015963D+00,
     1  .34085281D+00,  .28321162D+00, -.11558481D+00, -.29448886D+00,
     1 -.52932488D+00,  .58159523D-01, -.48649560D-02,  .11949167D-01,
     1  .21409804D-01, -.20620608D-02,  .30177088D-01,  .27880291D-01,
     1  .88458711D-02,  .13137410D-01, -.24705619D-01, -.31085889D-01,
     1  .34317857D-02,  .52593878D-01,  .79500714D-01, -.79782216D-02,
     2  .31164575D-01, -.28737598D-01,  .98201698D+00,  .62000000D+00/
      DATA R0OO,RMOO,R0OH,RMOH/5.661693D0,2.2818D0,6.294894D0,1.8344D0/
      DATA COO/0.0D0,0.0D0,0.0D0,0.0D0,0.D0,15.40D0,0.0D0,235.219943D0,
     1         0.0D0,4066.23929D0/
      DATA COH/0.0D0,0.0D0,0.0D0,0.0D0,0.D0,10.00D0,0.0D0,180.447673D0,
     1         0.0D0,3685.25842D0/
      DATA C4,C5/-0.92921D0,-1.79000D0/
      DATA RK0OO/0.0D0,0.0D0,0.0D0,0.0D0,0.0D0,-.27847758D0,0.0D0,
     1           -.46815641D0,0.0D0,-1.20506384D0/
      DATA RK1OO/0.0D0,0.0D0,0.0D0,3.35224980D0,3.35224980D0,
     1           0.95273753D0,0.0D0,0.94148408D0,0.0D0,0.72379129D0/
      DATA RK0OH/0.0D0,0.0D0,0.0D0,0.0D0,0.0D0,0.02465005D0,0.0D0,
     1           0.05036950D0,0.0D0,0.06294371D0/
      DATA RK1OH/0.0D0,0.0D0,0.0D0,2.54532760D0,2.54532760D0,
     1           0.68758097D0,0.0D0,0.82542359D0,0.0D0,0.94034225D0/
      DATA ADAMP/0.0D0,0.0D0,0.0D0,5.0079875D0,3.8428294D0,3.0951333D0,
     1           0.0D0,2.1999000D0,0.0D0,1.6880714D0/
      DATA BDAMP/0.0D0,0.0D0,0.D0,10.6645006D0,9.6758155D0,8.7787895D0,
     1           0.0D0,7.2265123D0,0.0D0,5.9487108D0/
      DATA R10,R20,R30/2.5143000D0,2.6469057D0,2.6469057D0/
      END
C
C
C         SUBROUTINE FINAL CALCULATES THE PRODUCT ENERGIES
C         AND SCATTERING ANGLES
C
      SUBROUTINE FINAL
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/FRAGB/WTA(NDP),WTB(NDP),LA(NDP,ND1),LB(NDP,ND1),
     *QZA(NDP,3*ND1),QZB(NDP,3*ND1),NATOMA(NDP),NATOMB(NDP)
      COMMON/TESTB/RMAX(NDP),RBAR(NDP),NTEST,NPATHS,NABJ(NDP),NABK(NDP),
     *NPATH,NAST
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      COMMON/WASTE/QQ(3*ND1),PP(3*ND1),WX,WY,WZ,L(ND1),NAM
      COMMON/FINALB/EROTA,EROTB,EA(3),EB(3),AMA(4),AMB(4),AN,AJ,BN,BJ,
     *OAM(4),EREL,ERELSQ,BF,SDA,SDB,DELH(NDP),ANG(16),NFINAL
      COMMON/PRLIST/T,V,H,TIME,NTZ,NT,ISEED0(8),NC,NX
      COMMON/VECTB/VI(4),OAMI(4),AMAI(4),AMBI(4),ETAI,ERAI,ETBI,ERBI
      COMMON/SELTB/QZ(3*ND1),NSELT,NSFLAG,NACTA,NACTB,NLINA,NLINB
      DIMENSION QCMA(3),VCMA(3),QCMB(3),VCMB(3),QR(3),VR(3),QTEM(3*ND1)
C
C         IF NFINAL=1, ONLY CALCULATE A AND B EROT
C
C         CALCULATE CENTER OF MASS FOR FRAGMENT B
C
      WT=WTB(NPATH)
      N=NATOMB(NPATH)
      DO 1 I=1,N
         L(I)=LB(NPATH,I)
    1 CONTINUE
      CALL CENMAS(WT,QCMB,VCMB,N)
C
C         SET PROPERTIES FOR ATOM A
C
      IF (NATOMA(NPATH).LE.1) THEN
         EA(1)=0.0D0
         EA(2)=0.0D0
         AMA(1)=0.0D0
         AMA(2)=0.0D0
         AMA(3)=0.0D0
         AMA(4)=0.0D0
         EROTA=0.0D0
         GOTO 50
      ENDIF
C
C         SET Q FOR FRAGMENT B TO QZB + QCMB.  THE ORIGIN FOR QZB IS 0.
C         PUT COORDINATES FOR B IN TEMPORARY STORAGE QTEM.
C
      DO 3 I=1,N
         K3=3*I
         K2=K3-1
         K1=K2-1
         J3=3*L(I)
         J2=J3-1
         J1=J2-1
         QTEM(J3)=Q(J3)
         QTEM(J2)=Q(J2)
         QTEM(J1)=Q(J1)
C         Q(J3)=QZB(NPATH,K3)+QCMB(3) + 500.0D0
C         Q(J2)=QZB(NPATH,K2)+QCMB(2) + 500.0D0
C         Q(J1)=QZB(NPATH,K1)+QCMB(1) + 500.0D0
         Q(J3)=QZB(NPATH,K3)+QCMB(3) +5.0D0    ! especially
         Q(J2)=QZB(NPATH,K2)+QCMB(2) +5.0D0
         Q(J1)=QZB(NPATH,K1)+QCMB(1) +5.0D0
    3 CONTINUE
C
C         CALCULATE PROPERTIES FOR FRAGMENT A
C
C             ANGULAR MOMENTUM AND ROTATIONAL ENERGY
C
      WT=WTA(NPATH)
      N=NATOMA(NPATH)
      DO 4 I=1,N
         L(I)=LA(NPATH,I)
    4 CONTINUE
      CALL CENMAS(WT,QCMA,VCMA,N)
      CALL ROTN(AMA,EROTA,N)
      DO 5 I=1,4
         AMA(I)=AMA(I)/C7
    5 CONTINUE
C
C             INTERNAL KINETIC ENERGY
C
      IF (NFINAL.NE.1) THEN
         EA(1)=0.0D0
         DO 6 I=1,N
            J=L(I)
            J3=3*J
            J2=J3-1
            J1=J2-1
            EA(1)=EA(1)+(PP(J1)**2+PP(J2)**2+PP(J3)**2)/W(J)
    6    CONTINUE
         EA(1)=EA(1)/C1/2.0D0
C
C             INTERNAL POTENTIAL ENERGY AND TOTAL ENERGY
C
         CALL DVDQ
         CALL ENERGY
         EA(2)=V-DELH(NPATH)
         EA(3)=EA(1)+EA(2)
C
C             CALCULATE n AND j IF A IS A DIATOM
C
         IF (N.EQ.2) THEN
            DUM=EA(3)*C1
            DUM1=AMA(4)
            CALL FINLNJ(DUM,DUM1,RMIN,RDUM,DELH(NPATH),AN,AJ)
         ENDIF
      ENDIF
C
C         RESET Q ARRAY TO CURRENT B COORDINATES
C
      N=NATOMB(NPATH)
      DO 8 I=1,N
         J3=3*LB(NPATH,I)
         J2=J3-1
         J1=J2-1
         Q(J3)=QTEM(J3)
         Q(J2)=QTEM(J2)
         Q(J1)=QTEM(J1)
    8 CONTINUE
C
C         CALCULATE CENTER OF MASS FOR FRAGMENT A
C
   50 CONTINUE
      WT=WTA(NPATH)
      N=NATOMA(NPATH)
      DO 51 I=1,N
         L(I)=LA(NPATH,I)
   51 CONTINUE
      CALL CENMAS(WT,QCMA,VCMA,N)
C
C         SET PROPERTIES FOR ATOM B
C
      IF (NATOMB(NPATH).LE.1) THEN
         EB(1)=0.0D0
         EB(2)=0.0D0
         AMB(1)=0.0D0
         AMB(2)=0.0D0
         AMB(3)=0.0D0
         AMB(4)=0.0D0
         EROTB=0.0D0
         IF (NFINAL.EQ.1) GOTO 999
         GOTO 60
      ENDIF
C
C         SET Q FOR FRAGMENT A TO QZA + QCMA.  THE ORIGIN FOR QZA IS 0.
C         PUT COORDINATES FOR A IN TEMPORARY STORAGE QTEM.
C
      DO 53 I=1,N
         K3=3*I
         K2=K3-1
         K1=K2-1
         J3=3*L(I)
         J2=J3-1
         J1=J2-1
         QTEM(J3)=Q(J3)
         QTEM(J2)=Q(J2)
         QTEM(J1)=Q(J1)
C         Q(J3)=QZA(NPATH,K3)+QCMA(3) + 500.0D0
C         Q(J2)=QZA(NPATH,K2)+QCMA(2) + 500.0D0
C         Q(J1)=QZA(NPATH,K1)+QCMA(1) + 500.0D0
         Q(J3)=QZA(NPATH,K3)+QCMA(3) +  5.0D0   ! especially
         Q(J2)=QZA(NPATH,K2)+QCMA(2) +  5.0D0
         Q(J1)=QZA(NPATH,K1)+QCMA(1) +  5.0D0
   53 CONTINUE
C
C         CALCULATE PROPERTIES FOR FRAGMENT B
C
C             ANGULAR MOMENTUM AND ROTATIONAL ENERGY
C
      WT=WTB(NPATH)
      N=NATOMB(NPATH)
      DO 54 I=1,N
         L(I)=LB(NPATH,I)
   54 CONTINUE
      CALL CENMAS(WT,QCMB,VCMB,N)
      CALL ROTN(AMB,EROTB,N)
      DO 55 I=1,4
         AMB(I)=AMB(I)/C7
   55 CONTINUE
C
C             INTERNAL KINETIC ENERGY
C
      IF (NFINAL.NE.1) THEN
         EB(1)=0.0D0
         DO 56 I=1,N
            J=L(I)
            J3=3*J
            J2=J3-1
            J1=J2-1
            EB(1)=EB(1)+(PP(J1)**2+PP(J2)**2+PP(J3)**2)/W(J)
   56    CONTINUE
         EB(1)=EB(1)/C1/2.0D0
C
C             INTERNAL POTENTIAL ENERGY AND TOTAL ENERGY
C
         CALL DVDQ
         CALL ENERGY
         EB(2)=V-DELH(NPATH)
         EB(3)=EB(1)+EB(2)
C
C             CALCULATE FINAL n AND j IF B IS A DIATOM
C
         IF (N.EQ.2) THEN
            DUM=EB(3)*C1
            DUM1=AMB(4)
            CALL FINLNJ(DUM,DUM1,RMIN,RDUM,DELH(NPATH),BN,BJ)
         ENDIF
      ENDIF
C
C         RESET Q ARRAY TO CURRENT A COORDINATES
C
      N=NATOMA(NPATH)
      DO 58 I=1,N
         J3=3*LA(NPATH,I)
         J2=J3-1
         J1=J2-1
         Q(J3)=QTEM(J3)
         Q(J2)=QTEM(J2)
         Q(J1)=QTEM(J1)
   58 CONTINUE
      IF (NFINAL.EQ.1) GOTO 999
C
C         CALCULATE RELATIVE A+B PROPERTIES
C
   60 CONTINUE
      RDMASS=WTA(NPATH)*WTB(NPATH)/(WTA(NPATH)+WTB(NPATH))
      RCM=0.0D0
      DO 11 I=1,3
         QR(I)=QCMA(I)-QCMB(I)
         VR(I)=VCMA(I)-VCMB(I)
         RCM=RCM+QR(I)**2
   11 CONTINUE
      RCM=DSQRT(RCM)
      VREL=0.0D0
      VRELSQ=0.0D0
      DO 12 I=1,3
         VREL=VREL+VR(I)*QR(I)
         VRELSQ=VRELSQ+VR(I)**2
   12 CONTINUE
      VREL=VREL/RCM
      EREL=RDMASS*VREL**2/2.0D0/C1
      ERELSQ=RDMASS*VRELSQ/2.0D0/C1
      OAM(1)=(QR(2)*VR(3)-QR(3)*VR(2))*RDMASS
      OAM(2)=(QR(3)*VR(1)-QR(1)*VR(3))*RDMASS
      OAM(3)=(QR(1)*VR(2)-QR(2)*VR(1))*RDMASS
      OAM(4)=DSQRT(OAM(1)**2+OAM(2)**2+OAM(3)**2)
      BF=OAM(4)/RDMASS/DSQRT(VRELSQ)
      DO 106 I=1,4
         OAM(I)=OAM(I)/C7
  106 CONTINUE
C
C         CALCULATE SCATTERING ANGLES
C
C         VI AND VF ARE THE INITIAL AND FINAL RELATIVE VELOCITY
C         LI AND LF ARE THE INITIAL AND FINAL ORBITAL ANG. MOM.
C         JAI AND JAF ARE THE INITIAL AND FINAL A ROTATIONAL ANG. MOM.
C         JBI AND JBF ARE THE INITIAL AND FINAL B ROTATIONAL ANG. MOM.
C
C             LF,JAF:  ANG(1)
C             LF,JBF:  ANG(2)
C             JAF,JBF: ANG(3)
C
      DO 104 I=1,16
         ANG(I)=0.0D0
  104 CONTINUE
      IF (NATOMA(NPATH).NE.1) THEN
         DUM=(OAM(1)*AMA(1)+OAM(2)*AMA(2)+OAM(3)*AMA(3))
     *       /OAM(4)/AMA(4)
         IF (DUM.GT.1.00D0) DUM=1.00D0
         IF (DUM.LT.-1.00D0) DUM=-1.00D0
         ANG(1)=DACOS(DUM)/C4
      ENDIF
      IF (NATOMB(NPATH).NE.1) THEN
         DUM=(OAM(1)*AMB(1)+OAM(2)*AMB(2)+OAM(3)*AMB(3))
     *         /OAM(4)/AMB(4)
         ANG(2)=DACOS(DUM)/C4
         IF (NATOMA(NPATH).NE.1) THEN
            DUM=(AMA(1)*AMB(1)+AMA(2)*AMB(2)
     *          +AMA(3)*AMB(3))/AMA(4)/AMB(4)
            ANG(3)=DACOS(DUM)/C4
         ENDIF
      ENDIF
C
C             VI,VF:   ANG(4)
C             LI,LF:   ANG(5)
C             LI,JAF:  ANG(6)
C             LI,JBF:  ANG(7)
C
      IF (NATOMB(1).NE.0) THEN
         VRELSQ=DSQRT(VRELSQ)
         DUM=(VI(1)*VR(1)+VI(2)*VR(2)+VI(3)*VR(3))/VI(4)/VRELSQ
         VRELSQ=VRELSQ**2
         ANG(4)=DACOS(DUM)/C4
C        write(6,'(a,3f12.6)')'VI: ', VI(1:3)
C        write(6,'(a,3f12.6)')'VF: ', VR(1:3)
         write(26,'(a,3f12.6)')'VI: ', VI(1:3)
         write(26,'(a,3f12.6)')'VF: ', VR(1:3)
         IF (OAMI(4).GE.1.00D-05) THEN
            DUM=(OAMI(1)*OAM(1)+OAMI(2)*OAM(2)+OAMI(3)*OAM(3))
     *          /OAMI(4)/OAM(4)
            ANG(5)=DACOS(DUM)/C4
            IF (NATOMA(NPATH).NE.1) THEN
               DUM=(OAMI(1)*AMA(1)+OAMI(2)*AMA(2)+OAMI(3)*AMA(3))
     *             /OAMI(4)/AMA(4)
               ANG(6)=DACOS(DUM)/C4
            ENDIF
            IF (NATOMB(NPATH).NE.1) THEN
               DUM=(OAMI(1)*AMB(1)+OAMI(2)*AMB(2)+OAMI(3)*AMB(3))
     *              /OAMI(4)/AMB(4)
               ANG(7)=DACOS(DUM)/C4
            ENDIF
         ENDIF
C
C             JAI,LI:  ANG(8)
C             JAI,LF:  ANG(9)
C             JAI,JAF: ANG(10)
C             JAI,JBF: ANG(11)
C             JAI,JBI: ANG(12)
C
         IF (AMAI(4).GE.1.00D-05) THEN
            IF (OAMI(4).GE.1.00D-05) THEN
               DUM=(AMAI(1)*OAMI(1)+AMAI(2)*OAMI(2)+
     *              AMAI(3)*OAMI(3))/AMAI(4)/OAMI(4)
               ANG(8)=DACOS(DUM)/C4
            ENDIF
            DUM=(AMAI(1)*OAM(1)+AMAI(2)*OAM(2)+AMAI(3)*OAM(3))
     *           /AMAI(4)/OAM(4)
            ANG(9)=DACOS(DUM)/C4
            IF (NATOMA(NPATH).NE.1) THEN
               DUM=(AMAI(1)*AMA(1)+AMAI(2)*AMA(2)+AMAI(3)*AMA(3))
     *              /AMAI(4)/AMA(4)
               ANG(10)=DACOS(DUM)/C4
            ENDIF
            IF (NATOMB(NPATH).NE.1) THEN
               DUM=(AMAI(1)*AMB(1)+AMAI(2)*AMB(2)+AMAI(3)*AMB(3))
     *              /AMAI(4)/AMB(4)
               ANG(11)=DACOS(DUM)/C4
            ENDIF
            IF (AMBI(4).LT.1.00D-05) GOTO 25
            DUM=(AMAI(1)*AMBI(1)+AMAI(2)*AMBI(2)
     *          +AMAI(3)*AMBI(3))/AMAI(4)/AMBI(4)
            ANG(12)=DACOS(DUM)/C4
         ENDIF
C
C             JBI,LI:  ANG(13)
C             JBI,LF:  ANG(14)
C             JBI,JAF: ANG(15)
C             JBI,JBF: ANG(16)
C
         IF (AMBI(4).GE.1.00D-05) THEN
            IF (OAMI(4).GE.1.00D-05) THEN
               DUM=(AMBI(1)*OAMI(1)+AMBI(2)*OAMI(2)
     *             +AMBI(3)*OAMI(3))/AMBI(4)/OAMI(4)
               ANG(13)=DACOS(DUM)/C4
            ENDIF
            DUM=(AMBI(1)*OAM(1)+AMBI(2)*OAM(2)
     *           +AMBI(3)*OAM(3))/AMBI(4)/OAM(4)
            ANG(14)=DACOS(DUM)/C4
            IF (NATOMA(NPATH).NE.1) THEN
               DUM=(AMBI(1)*AMA(1)+AMBI(2)*AMA(2)
     *             +AMBI(3)*AMA(3))/AMBI(4)/AMA(4)
               ANG(15)=DACOS(DUM)/C4
            ENDIF
            IF (NATOMB(NPATH).NE.1) THEN
               DUM=(AMBI(1)*AMB(1)+AMBI(2)*AMB(2)
     *             +AMBI(3)*AMB(3))/AMBI(4)/AMB(4)
               ANG(16)=DACOS(DUM)/C4
            ENDIF
         ENDIF
      ENDIF
   25 NFINAL=1
C
  999 RETURN
      END
C
C         CALCULATE THE CENTER OF MASS MOMENTA AND COORDINATES
C
      SUBROUTINE CENMAS(WT,QCM,VCM,N)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/WASTE/QQ(3*ND1),PP(3*ND1),WX,WY,WZ,L(ND1),NAM
      DIMENSION QCM(3),VCM(3)
C
C         CENTER OF MASS COORDINATES AND MOMENTA ARE STORED IN
C         ARRAYS QQ AND PP
C
      DO 1 I=1,3
         VCM(I)=0.0D0
         QCM(I)=0.0D0
    1 CONTINUE
C
      DO 2 I=1,N
         J=L(I)
         J3=3*J
         J2=J3-1
         J1=J2-1
         VCM(1)=VCM(1)+P(J1)
         VCM(2)=VCM(2)+P(J2)
         VCM(3)=VCM(3)+P(J3)
         QCM(1)=QCM(1)+W(J)*Q(J1)
         QCM(2)=QCM(2)+W(J)*Q(J2)
         QCM(3)=QCM(3)+W(J)*Q(J3)
    2 CONTINUE
C
      DO 4 I=1,3
         VCM(I)=VCM(I)/WT
         QCM(I)=QCM(I)/WT
    4 CONTINUE
C
      DO 5 I=1,N
         J=L(I)
         J3=3*J
         J2=J3-1
         J1=J2-1
         PP(J1)=P(J1)-W(J)*VCM(1)
         PP(J2)=P(J2)-W(J)*VCM(2)
         PP(J3)=P(J3)-W(J)*VCM(3)
         QQ(J1)=Q(J1)-QCM(1)
         QQ(J2)=Q(J2)-QCM(2)
         QQ(J3)=Q(J3)-QCM(3)
    5 CONTINUE
C
      RETURN
      END
C
C         CALCULATE ANGULAR MOMENTUM, MOMENT OF INERTIA TENSOR,
C         ANGULAR VELOCITY, AND ROTATIONAL ENERGY
C
      SUBROUTINE ROTN(AM,EROT,N)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/WASTE/QQ(3*ND1),PP(3*ND1),WX,WY,WZ,L(ND1),NAM
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      COMMON/INERT/UXX,UXY,UXZ,UYY,UYZ,UZZ,AIXX,AIXY,AIXZ,AIYY,
     *AIYZ,AIZZ
      DIMENSION AM(4)
C
C         CALCULATE ANGULAR MOMENTUM.  THE CENTER OF MASS COORDINATES
C         QQ AND MOMENTA PP COME FROM SUBROUTINE CENMAS THROUGH COMMON
C         BLOCK WASTE.
C
      IF (NAM.EQ.0) THEN
         AM(1)=0.0D0
         AM(2)=0.0D0
         AM(3)=0.0D0
         AM(4)=0.0D0
         EROT=0.0D0
         IF (N.EQ.1) RETURN
         DO 1 I=1,N
            J=L(I)
            J3=3*J
            J2=J3-1
            J1=J2-1
            AM(1)=AM(1)+(QQ(J2)*PP(J3)-QQ(J3)*PP(J2))
            AM(2)=AM(2)+(QQ(J3)*PP(J1)-QQ(J1)*PP(J3))
            AM(3)=AM(3)+(QQ(J1)*PP(J2)-QQ(J2)*PP(J1))
    1    CONTINUE
         AM(4)=DSQRT(AM(1)**2+AM(2)**2+AM(3)**2)
         IF (N.EQ.2) THEN
            AIXX=0.0D0
            DO 3 I=1,N
               J=3*L(I)+1
               SR=0.0D0
               DO 2 K=1,3
                  SR=SR+QQ(J-K)**2
    2          CONTINUE
               AIXX=AIXX+SR*W(L(I))
    3       CONTINUE
            EROT=AM(4)**2/AIXX/2.0D0/C1
            RETURN
         ENDIF
      ENDIF
C
C         CALCULATE THE MOMENT OF INERTIA TENSOR
C
      AIXX=0.0D0
      AIYY=0.0D0
      AIZZ=0.0D0
      AIXY=0.0D0
      AIXZ=0.0D0
      AIYZ=0.0D0
      DO 4 I=1,N
         J=L(I)
         J3=3*J
         J2=J3-1
         J1=J2-1
         AIXX=AIXX+W(J)*(QQ(J2)**2+QQ(J3)**2)
         AIYY=AIYY+W(J)*(QQ(J1)**2+QQ(J3)**2)
         AIZZ=AIZZ+W(J)*(QQ(J1)**2+QQ(J2)**2)
         AIXY=AIXY+W(J)*QQ(J1)*QQ(J2)
         AIXZ=AIXZ+W(J)*QQ(J1)*QQ(J3)
         AIYZ=AIYZ+W(J)*QQ(J2)*QQ(J3)
    4 CONTINUE
      DET=AIXX*(AIYY*AIZZ-AIYZ*AIYZ)-AIXY*(AIXY*AIZZ+AIYZ*AIXZ)-
     *AIXZ*(AIXY*AIYZ+AIYY*AIXZ)
C
C         CALCULATE INVERSE OF THE INERTIA TENSOR
C
      IF (DABS(DET).GE.0.01D0) THEN
         UXX=(AIYY*AIZZ-AIYZ*AIYZ)/DET
         UXY=(AIXY*AIZZ+AIXZ*AIYZ)/DET
         UXZ=(AIXY*AIYZ+AIXZ*AIYY)/DET
         UYY=(AIXX*AIZZ-AIXZ*AIXZ)/DET
         UYZ=(AIXX*AIYZ+AIXZ*AIXY)/DET
         UZZ=(AIXX*AIYY-AIXY*AIXY)/DET
C
C         CALCULATE ANGULAR VELOCITIES
C
         WX=UXX*AM(1)+UXY*AM(2)+UXZ*AM(3)
         WY=UXY*AM(1)+UYY*AM(2)+UYZ*AM(3)
         WZ=UXZ*AM(1)+UYZ*AM(2)+UZZ*AM(3)
      ELSE
C
C         CALCULATE ROTATIONAL ENERGY
C
         AIXX=0.0D0
         DO 7 I=1,N
            J=3*L(I)+1
            SR=0.0D0
            DO 6 K=1,3
               SR=SR+QQ(J-K)**2
    6       CONTINUE
            AIXX=AIXX+SR*W(L(I))
    7    CONTINUE
         EROT=AM(4)**2/AIXX/2.0D0/C1
         RETURN
      ENDIF
      EROT=(WX*AM(1)+WY*AM(2)+WZ*AM(3))/2.0D0/C1
      RETURN
      END
C
C         SUBTRACT OFF THE ANGULAR VELOCITY
C
      SUBROUTINE ANGVEL(N)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/WASTE/QQ(3*ND1),PP(3*ND1),WX,WY,WZ,L(ND1),NAM
C
      DO 2 I=1,N
         J=L(I)
         J3=3*J
         J2=J3-1
         J1=J2-1
         P(J1)=P(J1)-(QQ(J3)*WY-QQ(J2)*WZ)*W(J)
         P(J2)=P(J2)-(QQ(J1)*WZ-QQ(J3)*WX)*W(J)
         P(J3)=P(J3)-(QQ(J2)*WX-QQ(J1)*WY)*W(J)
         PP(J1)=P(J1)
         PP(J2)=P(J2)
         PP(J3)=P(J3)
    2 CONTINUE
      RETURN
      END
C
C         WRITE TRAJECTORY FINAL ANALYSIS RESULTS IN OUTPUT FILE
C
      SUBROUTINE GFINAL
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	COMMON/TESTIN/VRELO,INTST
      COMMON/FINALB/EROTA,EROTB,EA(3),EB(3),AMA(4),AMB(4),AN,AJ,BN,BJ,
     *OAM(4),EREL,ERELSQ,BF,SDA,SDB,DELH(NDP),ANG(16),NFINAL
      COMMON/TESTB/RMAX(NDP),RBAR(NDP),NTEST,NPATHS,NABJ(NDP),NABK(NDP),
     *NPATH,NAST
      COMMON/SELTB/QZ(3*ND1),NSELT,NSFLAG,NACTA,NACTB,NLINA,NLINB
      COMMON/VECTB/VI(4),OAMI(4),AMAI(4),AMBI(4),ETAI,ERAI,ETBI,ERBI
      COMMON/FRAGB/WTA(NDP),WTB(NDP),LA(NDP,ND1),LB(NDP,ND1),
     *QZA(NDP,3*ND1),QZB(NDP,3*ND1),NATOMA(NDP),NATOMB(NDP)
      COMMON/PRLIST/T,V,H,TIME,NTZ,NT,ISEED0(8),NC,NX
C
      COMMON/hdiag/htmin,htmax

    1 FORMAT(/)
    2 FORMAT(10X,26HREACTION OCCURRED FOR PATH,I3,5X,46HENERGIES IN KCAL
     * AND ANGULAR MOMENTUM IN H-BAR,/)
    3 FORMAT(5X,22HRESULTS FOR FRAGMENT A)
    4 FORMAT(10X,13HTOTAL ENERGY=,D14.7,3X,12HVIB. ENERGY=,D14.7,3X,
     *12HROT. ENERGY=,D12.5,6H +OR- ,D12.5,/,10X,14HANG. MOMENTUM=,
     *D12.5)
    5 FORMAT(/,5X,22HRESULTS FOR FRAGMENT B)
    6 FORMAT(/,5X,23HRELATIVE A+B PROPERTIES)
    7 FORMAT(10X,19HREL. TRANS. ENERGY=,D14.7,3X,36HREL. TRANS. ENERGY +
     * CEN. POTENTIAL=,D14.7,/,10X,19HORB. ANG. MOMENTUM=,D12.5,3X,8HFIN
     *AL B=,D12.5,/)
    8 FORMAT(5X,28HSCATTERING ANGLES IN DEGREES)
    9 FORMAT(10X,8HLF,JAF: ,F7.2)
   10 FORMAT(10X,8HLF,JBF: ,F7.2)
   11 FORMAT(10X,8HJAF,JBF:,F7.2)
   12 FORMAT(10X,8HVI,VF:  ,F7.2,10X,8HLI,LF:  ,F7.2)
   13 FORMAT(10X,8HLI,JAF: ,F7.2)
   14 FORMAT(10X,8HLI,JBF: ,F7.2)
   15 FORMAT(10X,8HJAI,LI: ,F7.2,10X,8HJAI,LF: ,F7.2)
   16 FORMAT(10X,8HJAI,JAF:,F7.2)
   17 FORMAT(10X,8HJAI,JBF:,F7.2)
   18 FORMAT(10X,8HJAI,JBI:,F7.2)
   19 FORMAT(10X,8HJBI,LI: ,F7.2,10X,8HJBI,LF: ,F7.2)
   20 FORMAT(10X,8HJBI,JAF:,F7.2)
   21 FORMAT(10X,8HJBI,JBF:,F7.2)
   22 FORMAT(10X,24HPRODUCT IS A DIATOM:  N=,F6.2,3X,2HJ=,F6.2)  
   23 FORMAT(1X,'XXXXXXXXXXXXXXXXXXXXXXXX TRAJECTORY NUMBER ',I8)
      WRITE(6,1)
      write(26,23)NTZ
      WRITE(6,2)NPATH
      WRITE(26,2)NPATH
      WRITE(6,3)
      WRITE(26,3)
      K=NATOMA(NPATH)
      IF (K.NE.1) THEN
         EVIB=EA(3)-EROTA
         WRITE(6,4)EA(3),EVIB,EROTA,SDA,AMA(4)
         WRITE(26,4)EA(3),EVIB,EROTA,SDA,AMA(4)
         IF (K.EQ.2) WRITE(6,22)AN,AJ
         IF (K.EQ.2) WRITE(26,22)AN,AJ
      ENDIF
      K=NATOMB(NPATH)
      IF (K.NE.1) THEN
         WRITE(6,5)
         WRITE(26,5)
         EVIB=EB(3)-EROTB
         WRITE(6,4)EB(3),EVIB,EROTB,SDB,AMB(4)
         WRITE(26,4)EB(3),EVIB,EROTB,SDB,AMB(4)
         IF (K.EQ.2) WRITE(6,22)BN,BJ
         IF (K.EQ.2) WRITE(26,22)BN,BJ
      ENDIF
      WRITE(6,6);write(26,6)
      WRITE(6,7)EREL,ERELSQ,OAM(4),BF
      WRITE(26,7)EREL,ERELSQ,OAM(4),BF
      WRITE(6,8);write(26,8)
      IF (NATOMA(NPATH).GT.1) WRITE(6,9)ANG(1)
      IF (NATOMA(NPATH).GT.1) WRITE(26,9)ANG(1)
      IF (NATOMB(NPATH).NE.1) THEN
         WRITE(6,10)ANG(2)
         WRITE(26,10)ANG(2)
         IF (NATOMA(NPATH).NE.1) WRITE(6,11)ANG(3)
         IF (NATOMA(NPATH).NE.1) WRITE(26,11)ANG(3)
      ENDIF
      IF (NATOMB(1).NE.0) THEN
         WRITE(6,12)ANG(4),ANG(5)
         WRITE(26,12)ANG(4),ANG(5)
         IF (NATOMA(NPATH).GT.1) WRITE(6,13)ANG(6)
         IF (NATOMB(NPATH).GT.1) WRITE(6,14)ANG(7)
         IF (NATOMA(NPATH).GT.1) WRITE(26,13)ANG(6)
         IF (NATOMB(NPATH).GT.1) WRITE(26,14)ANG(7)
         IF (AMAI(4).GE.1.00D-05) THEN
            WRITE(6,15)ANG(8),ANG(9)
            WRITE(26,15)ANG(8),ANG(9)
            IF (NATOMA(NPATH).GT.1) WRITE(6,16)ANG(10)
            IF (NATOMB(NPATH).GT.1) WRITE(6,17)ANG(11)
            IF (NATOMA(NPATH).GT.1) WRITE(26,16)ANG(10)
            IF (NATOMB(NPATH).GT.1) WRITE(26,17)ANG(11)
            IF (AMBI(4).LT.1.00D-05) GOTO 100
            WRITE(6,18)ANG(12)
            WRITE(26,18)ANG(12)
         ENDIF
         IF (AMBI(4).LT.1.00D-05) GOTO 100
         WRITE(6,19)ANG(13),ANG(14)
         WRITE(26,19)ANG(13),ANG(14)
         IF (NATOMA(NPATH).GT.1) WRITE(6,20)ANG(15)
         IF (NATOMB(NPATH).GT.1) WRITE(6,21)ANG(16)
         IF (NATOMA(NPATH).GT.1) WRITE(26,20)ANG(15)
         IF (NATOMB(NPATH).GT.1) WRITE(26,21)ANG(16)
      ENDIF
  100 WRITE(6,1)
   98 FORMAT(8F8.3)
      WRITE(9,98)ERELSQ,OAMI(4),OAM(4),ANG(4)
      WRITE(10,98)ETAI,ERAI,EA(3),EROTA,SDA,AMAI(4),AMA(4)
      WRITE(11,98)ETBI,ERBI,EB(3),EROTB,SDB,AMBI(4),AMB(4)

      write(26,*)
      write(26,'(i7,E12.5,a,i7)')NTZ,htmax-htmin,' kcal/mol ', NPATH
      write(26,*)
      call flush(26)
      RETURN
      END
C
C         INITIALIZE COORDINATES AND MOMENTA FROM NORMAL MODE
C         PARAMETERS (FREQUENCY, AMPLITUDE,...)
C
      SUBROUTINE INITQP(WW,A,C,AM,WT,EINT,EROTS,AI,EROT,N,NM)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/PRLIST/T,V,H,TIME,NTZ,NT,ISEED0(8),NC,NX
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/WASTE/QQ(3*ND1),PP(3*ND1),WX,WY,WZ,L(ND1),NAM
      COMMON/SELTB/QZ(3*ND1),NSELT,NSFLAG,NACTA,NACTB,NLINA,NLINB
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      COMMON/FINALB/EROTA,EROTB,EA(3),EB(3),AMA(4),AMB(4),AN,AJ,BN,BJ,
     *OAM(4),EREL,ERELSQ,BF,SDA,SDB,DELH(NDP),ANG(16),NFINAL
      COMMON/LMODEB/ENON,EDELTA,RWANT,PWANT,NEXM,NLEV,JFLAG
      COMMON/FORCES/NATOMS,I3N,NST,NMM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      COMMON/SADDLE/EBAR,TBAR,EZERO,NBAR 
      DIMENSION WW(3*ND1),A(3*ND1),C(3*ND1,3*ND1),QCM(3),VCM(3),AM(4),
     *AI(3),COOR(3*ND1),DCOOR(3*ND1)
    5 FORMAT(2X,45HA-B INTERACTION ENERGY WHEN ENTERING INITQP =,
     *D18.9,9H KCAL/MOL,/)
   15 FORMAT(15X,17HINTERNAL ENERGY =,D18.9,9H KCAL/MOL)
   25 FORMAT(/,10X,15HCHOSEN:  EROT =,F7.3,9H KCAL/MOL,/,
     *10X,10HJX,JY,JZ =,3D13.5,6H H-BAR,/)
C
      ESEL=EINT
C
C         CALCULATE THE TOTAL ENERGY, WHICH IS THE REFERENCE ENERGY
C         (EZERO) WITH RESPECT TO ADDING EINT.
C
      CALL DVDQ
      CALL ENERGY
      EZERO=H
      WRITE(6,5)EZERO
C
C         SET COUNTER FOR NUMBER OF SCALING ATTEMPTS
C
      NSCALE=0
C
C         SET IFLAG WHICH IS USED FOR LOCAL MODE EXCITATION BETWEEN
C         ATOMS NONI AND NONJ
C
      IFLAG=0
      IF (NACTA.EQ.4) CALL LMODE(1,ENU,EDELTU,ENL,EDELTL)
C
C         STORE THE ANGULAR MOMENTUM VECTOR FROM SELECT
C
      DUM1=AM(1)
      DUM2=AM(2)
      DUM3=AM(3)
C
C         CALCULATE NORMAL MODE COORDINATES AND VELOCITIES
C
9999  continue      
      
      NSCALE=0

      DO 10 I=1,NM
         RAND=RAND0(ISEED)
         DUM=TWOPI*RAND
         COOR(I)=A(I)*DCOS(DUM)
         DCOOR(I)=-WW(I)*A(I)*DSIN(DUM)
   10 CONTINUE
C
C         TRANSFORM FROM NORMAL MODE TO CARTESIAN COORDINATES AND VELOCIT
C
      DO 40 II=1,N
         DO 30 K=1,3
            JJ=3*II+1-K
            J=3*L(II)+1-K
            Q(J)=0.0D0
            P(J)=0.0D0
            DO 20 I=1,NM
               Q(J)=Q(J)+C(JJ,I)*COOR(I)
               P(J)=P(J)+C(JJ,I)*DCOOR(I)
   20       CONTINUE
            P(J)=P(J)*W(L(II))
            Q(J)=Q(J)+QZ(J)
   30    CONTINUE
   40 CONTINUE
C
C         CALCULATE CENTER OF MASS COORDINATES QQ AND MOMENTA PP
C
   50 CALL CENMAS(WT,QCM,VCM,N)
C
C         MOVE PP ARRAY TO P ARRAY AND QQ ARRAY TO Q ARRAY
C
      DO 70 I=1,N
         J=3*L(I)+1
         DO 60 K=1,3
            Q(J-K)=QQ(J-K)
            P(J-K)=PP(J-K)
   60    CONTINUE
   70 CONTINUE
C
C         ADD ANGULAR MOMENTUM VECTOR FROM SELECT TO THE MOLECULE.
C         CALCULATE THE REQUIRED ANGULAR VELOCITY AND ADD IT TO THE
C         MOLECULE.
C
      CALL ROTN(AM,EROT,N)
      AM(1)=DUM1-AM(1)
      AM(2)=DUM2-AM(2)
      AM(3)=DUM3-AM(3)
      NAM=1
      CALL ROTN(AM,EROT,N)
      NAM=0
      WX=-WX
      WY=-WY
      WZ=-WZ
      CALL ANGVEL(N)
C
C         SCALE COORDINATES AND MOMENTA TO FIT THE TOTAL ENERGY
C         THE INITIAL CONDITION IS ACCEPTED IF THE CALCULATED AND DESIRED
C         ENERGY AGREE TO WITHIN 0.1 PER-CENT.
C
C         EINT IS THE SUM OF THE SELECTED INTERNAL VIBRATIONAL AND
C         ROTATIONAL ENERGIES.  DO NOT SCALE IF THE SELECTED VIBRATIONAL
C         ENERGY IS ZERO.
C
      IF (IFLAG.NE.1) THEN
         DDD=EINT-EROTS
         IF (DDD.NE.0.0D0) THEN
            CALL DVDQ
            CALL ENERGY
            ESEL=H-EZERO
            WRITE(6,15)ESEL
            SDUM=DABS(EINT-ESEL)/EINT
            IF (SDUM.GE.0.001D0) THEN
               NSCALE=NSCALE+1
C               IF (NSCALE.GT.50) STOP
               IF (NSCALE.GT.50) then 
                 goto 9999
                 write(6,*) 'nscale: ', NSCALE
               endif
               SDUM=DSQRT(EINT/ESEL)
               DO 90 I=1,N
                  J=3*L(I)+1
                  DO 80 K=1,3
                     P(J-K)=P(J-K)*SDUM
                     Q(J-K)=(Q(J-K)-QZ(J-K))*SDUM+QZ(J-K)
   80             CONTINUE
   90          CONTINUE
               GOTO 50
            ENDIF
         ENDIF
         IF (NACTA.NE.4) GOTO 120
      ENDIF
C
C         CHOOSE CONDITIONS FOR LOCAL MODE(NACT=4)
C
  110 CALL LMEXCT
      IFLAG=1
      IF (JFLAG.EQ.0) GOTO 50
C
C         CALCULATE THE TOTAL ENERGY
C
      CALL DVDQ
      CALL ENERGY
      ESEL=H-EZERO
C
C         CALCULATE THE ROTATIONAL ENERGY
C
  120 CALL ROTN(AM,EROT,N)
      DUM1=AM(1)/C7
      DUM2=AM(2)/C7
      DUM3=AM(3)/C7
C
      WRITE(6,25)EROT,DUM1,DUM2,DUM3
      WRITE(6,15)ESEL
      WRITE(6,*)
C
      EINT=ESEL
      IF (N.EQ.NATOMS) RETURN
C
C         RANDOMLY ROTATE THE MOLECULE ABOUT ITS CENTER OF MASS
C         BY EULER'S ANGLES.
C         CENTER OF MASS COORDINATES QQ AND MOMENTA PP ARE PASSED FROM
C         SUBROUTINES CENMAS AND ANGVEL THROUGH COMMON BLOCK WASTE.
C
      CALL ROTATE(N)
C
C         RECALCULATE THE ROTATIONAL ENERGY AND ANGULAR MOMENTA
C
      CALL ROTN(AM,EROT,N)
C
      RETURN
      END
C
C         SELECT THE DESIRED BOND LENGTH (RWANT) FOR A DIATOM.
C         THE VALUE FOR RWANT IS SELECTED BY MILLER'S SEMICLASSICAL
C         EXPRESSION WITH J=0.
C
C         SUBROUTINE LMODE PROVIDES THE NECESSARY PARAMETERS FOR
C         INITIAL EXCITATION OF THE MORSE STRETCH.  FOR I = 0, IT
C         CALCULATES THE EXCITATION ENERGY AND FOR I = 1, RWANT IS
C         ADDED TO THE MORSE STRETCH.
C
      SUBROUTINE LMODE(I,ENU,EDELTU,ENL,EDELTL)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/LMODEB/ENON,EDELTA,RWANT,PWANT,NEXM,NLEV,JFLAG
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      COMMON/MORSEB/RMZ(100),B(100),D(100),N2J(100),N2K(100),
     *CM1(100),CM2(100),CM3(100),CM4(100)
      COMMON/SELTB/QZ(3*ND1),NSELT,NSFLAG,NACTA,NACTB,NLINA,NLINB
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
C
      DE=D(NEXM)
      BETA=B(NEXM)
      R0=RMZ(NEXM)
      IF (I.EQ.0) THEN
         WA=W(N2J(NEXM))
         WB=W(N2K(NEXM))
         WT=WA+WB
         UMASS=WA*WB/WT
         WE=DSQRT(2.0D0*DE*BETA*BETA/UMASS)
     *        /2.9979246D0/TWOPI/3.49757D-2
         XE=WE*WE/DE/4.0D0
         XE=XE*C1
         DUM=DBLE(NLEV)+0.5D0
         ENON=DUM*WE-DUM*DUM*XE
         UDUM=DUM+1.0D0
         ENU=UDUM*WE-UDUM*UDUM*XE
         EDELTA=0.5D0*(ENU-ENON)
         EENU=(UDUM+1.0D0)*WE-(UDUM+1.0D0)*(UDUM+1.0D0)*XE
         ENL=(DUM-1.0D0)*WE-(DUM-1.0D0)*(DUM-1.0D0)*XE
         EDELTU=0.5D0*(EENU-ENU)
         EDELTL=0.5D0*(ENON-ENL)
      ELSEIF (I.EQ.1) THEN
         RAND=RAND0(ISEED)
         DUM=TWOPI*RAND
         SCOOR=DSIN(DUM)
         EWANT=ENON*C1
         EFACT=DSQRT(DE*EWANT)
         DELR=-DLOG((DE-EWANT)/(DE+EFACT*SCOOR))
         DELR=DELR/BETA
         RWANT=R0+DELR
         VWANT=DE*(1.0D0-DEXP(-BETA*(RWANT-R0)))**2
         TWANT=EWANT-VWANT
         PWANT=DSQRT(2.0D0*UMASS*TWANT)
         RAND=RAND0(ISEED)
         IF (RAND.LT.0.5D0) PWANT=-PWANT
      ENDIF
      RETURN
      END
C
C         CALCULATE ENERGY IN (MORSE OSCILLATOR) LOCAL MODE.
C         ACCEPT CONDITION IF ENERGY AGREES WITH ENON FROM SUBROUTINE
C         LMODE TO WITHIN 0.05%
C
      SUBROUTINE LMEXCT
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/LMODEB/ENON,EDELTA,RWANT,PWANT,NEXM,NLEV,JFLAG
      COMMON/MORSEB/RMZ(100),B(100),D(100),N2J(100),N2K(100),
     *CM1(100),CM2(100),CM3(100),CM4(100)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      CALL EBOND(ECH,TCH,R,NEXM)
      VCH=ECH-TCH
      JFLAG=0
      IF(DABS(ECH-ENON)/ENON.GT.0.0005)GOTO 2
      WRITE(6,9997)R,VCH
      WRITE(6,9998)TCH
      WRITE(6,9999)ECH
 9997 FORMAT(' CH EXCITATION** RCH=',F10.4,' VCH=',F10.4)
 9998 FORMAT(' CH EXCITATION** TCH=',F10.4)
 9999 FORMAT(' CH EXCITATION** ECH=',F10.4)
      JFLAG=1
      RETURN
    2 CONTINUE
C
C         CHOOSE MORSE OSCILLATOR COORDINATES AND
C         MOMENTA RANDOMLY AS DESCRIBED IN
C         Ref.: J. CHEM. PHYS.,63,2214(1975)
C
      IATOMJ=N2J(NEXM)
      IATOMK=N2K(NEXM)
      IJZ=3*IATOMJ
      IJY=IJZ-1
      IJX=IJY-1
      IKZ=3*IATOMK
      IKY=IKZ-1
      IKX=IKY-1
      QX=Q(IJX)-Q(IKX)
      QY=Q(IJY)-Q(IKY)
      QZ=Q(IJZ)-Q(IKZ)
      RX=QX/R
      RY=QY/R
      RZ=QZ/R
      DX=(RWANT-R)*RX
      DY=(RWANT-R)*RY
      DZ=(RWANT-R)*RZ
      Q(IJX)=Q(IJX)+DX
      Q(IJY)=Q(IJY)+DY
      Q(IJZ)=Q(IJZ)+DZ
C
C         ADD APPROPRIATE KINETIC ENERGY TO THE CH
C         LOCAL MODE SO THAT ENON=ECH
C
      PXWANT=PWANT*RX
      PYWANT=PWANT*RY
      PZWANT=PWANT*RZ
      WJK=W(IATOMJ)+W(IATOMK)
      WJ=W(IATOMJ)/WJK
      WK=W(IATOMK)/WJK
      PX=WK*P(IJX)-WJ*P(IKX)
      PY=WK*P(IJY)-WJ*P(IKY)
      PZ=WK*P(IJZ)-WJ*P(IKZ)
      DELPX=(PXWANT-PX)/WK
      DELPY=(PYWANT-PY)/WK
      DELPZ=(PZWANT-PZ)/WK
      P(IJX)=P(IJX)+DELPX
      P(IJY)=P(IJY)+DELPY
      P(IJZ)=P(IJZ)+DELPZ
      RETURN
      END
C
C         INITIALIZE PARAMETERS FOR AN OSCILLATOR WITH GIVEN
C         QUANTUM NUMBERS N AND J BY SEMICLASSICAL EBK QUANTIZATION
C
      SUBROUTINE INITEBK(N,J,RMIN,RMAX,DH,RMASS,ENJ,PTEST,AL)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      COMMON/WASTE/QQ(3*ND1),PP(3*ND1),WX,WY,WZ,L(ND1),NAM
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
C
      BN=DBLE(N)
      HNU=ENJ/(BN+0.5D0)
      AM=DSQRT(DBLE(J*(J+1)))
      AL=AM*C7
      RMASS=W(L(1))*W(L(2))/(W(L(1))+W(L(2)))
      DUM=1.0D0
C
C         SOLVE FOR ENJ BY FIXED POINT APPROACH
C
      ICOUNT=0
      DO WHILE (DABS(DUM).GT.1.0D-6)
         CALL FINLNJ(ENJ,AM,RMIN,RMAX,DH,AN,AJ)
         DUM=BN-AN
         ENJ=ENJ+DUM*HNU
         ICOUNT=ICOUNT+1
         IF (ICOUNT.GT.200) STOP
      END DO
C
      RMIN=RMIN+0.001D0
      RMAX=RMAX-0.001D0
      PTEST=DSQRT(0.0001D0*2.0D0*RMASS*ENJ)
      RETURN
      END
C
C         CALCULATE VIBRATIONAL AND ROTATIONAL QUANTUM NUMBERS FOR
C         A PRODUCT DIATOM
C
      SUBROUTINE FINLNJ(ENJ,AM,RMIN,RMAX,DH,AN,AJ)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/PRLIST/T,V,H,TIME,NTZ,NT,ISEED0(8),NC,NX
      COMMON/FORCES/NATOMS,I3N,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      COMMON/STRETB/RSZ(100),FS(100),N1J(100),N1K(100)
      COMMON/MORSEB/RMZ(100),B(100),D(100),N2J(100),N2K(100),
     *CM1(100),CM2(100),CM3(100),CM4(100)
      COMMON/WASTE/QQ(3*ND1),PP(3*ND1),WX,WY,WZ,L(ND1),NAM
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      DIMENSION QO(6),XGL(500),WGL(500)
    5 FORMAT(/,5X,'WARNING : A PROBLEM WITH THE SELECTED PRODUCT ',
     *'DIATOM HAS OCCURRED',/,15X,'THE DIATOM VIBRATIONAL QUANTUM ',
     *'NUMBER CAN NOT BE EVALUATED.',/)
C
C         FIND THE ROTATIONAL QUANTUM NUMBER AJ FROM THE ROTATIONAL
C         ANGULAR MOMENTUM AM IN UNITS OF H-BAR.
C
      AN=0.0D0
      DUM=AM*AM
      AJ=0.5D0*(-1.0D0+DSQRT(1.0D0+4.0D0*DUM))
C
C         FIND THE VIBRATIONAL QUANTUM NUMBER AN, USING AN INVERSION
C         OF THE SEMICLASSICAL RYDBERG-KLEIN-REES (RKR) APPROACH.
C
C         INITIALIZE SOME VARIABLES FOR THE DIATOM.
C
      L1=MIN0(L(1),L(2))
      L2=MAX0(L(1),L(2))
      RMASS=W(L1)*W(L2)/(W(L1)+W(L2))
      ENJ=ENJ/C1
      T3=Q(3*L2)-Q(3*L1)
      T2=Q(3*L2-1)-Q(3*L1-1)
      T1=Q(3*L2-2)-Q(3*L1-2)
      RO=DSQRT(T1*T1+T2*T2+T3*T3)
      IF (RO.GT.6.0D0) THEN
         WRITE(6,5)
         write(6,'(a,i6,a,i6)') 'L1=', L1, 'L2=', L2
         GOTO 60
      ENDIF
      DO 10 I=1,3
         QO(I)=Q(3*L1-3+I)
         QO(I+3)=Q(3*L2-3+I)
         Q(3*L1-3+I)=(W(L1)*QO(I)+W(L2)*QO(I+3))/(W(L1)+W(L2))
         Q(3*L2-3+I)=(W(L1)*QO(I)+W(L2)*QO(I+3))/(W(L1)+W(L2))
   10 CONTINUE
      Q(3*L1)=Q(3*L1)-0.5D0*RO
      Q(3*L2)=Q(3*L2)+0.5D0*RO
      CALL DVDQ
      CALL ENERGY
      VEFF=V-DH+0.5D0*DUM*C7*C7/(C1*RMASS*RO*RO)
      IF (VEFF.GT.ENJ) THEN
         WRITE(6,5)
         GOTO 60
      ENDIF
C
C         DETERMINE BOUNDARIES OF THE SEMICLASSICAL INTEGRAL
C
   20 Q(3*L2)=Q(3*L2)+0.001D0
      CALL DVDQ
      CALL ENERGY
      RZ=Q(3*L2)-Q(3*L1)
      VEFF=V-DH+0.5D0*DUM*C7*C7/(C1*RMASS*RZ*RZ)
      IF (VEFF.LT.ENJ.AND.RZ.LT.50.0D0) GOTO 20
      RMAX=RZ
      Q(3*L2)=Q(3*L1)+RO
   30 Q(3*L2)=Q(3*L2)-0.001D0
      CALL DVDQ
      CALL ENERGY
      RZ=Q(3*L2)-Q(3*L1)
      VEFF=V-DH+0.5D0*DUM*C7*C7/(C1*RMASS*RZ*RZ)
      IF (VEFF.LT.ENJ) GOTO 30
      RMIN=RZ
C
C         EVALUATE THE SEMICLASSICAL INTEGRAL BY GAUSSIAN QUADRATURE
C
      NGL=50
      CALL GLPAR(RMIN,RMAX,XGL,WGL,NGL)
      ASUM=0.0D0
      DO 40 J=1,NGL
         RZ=XGL(J)
         Q(3*L2)=Q(3*L1)+RZ
         CALL DVDQ
         CALL ENERGY
         VEFF=V-DH+0.5D0*DUM*C7*C7/(C1*RMASS*RZ*RZ)
         IF (ENJ.GT.VEFF) ASUM=ASUM+WGL(J)*DSQRT(ENJ-VEFF)
   40 CONTINUE
      DO 50 I=1,3
         Q(3*L1-3+I)=QO(I)
         Q(3*L2-3+I)=QO(I+3)
   50 CONTINUE
      AN=DSQRT(8.0D0*C1*RMASS)*ASUM/TWOPI/C7
   60 ENJ=ENJ*C1
      AN=AN-0.5D0
      RETURN
      END
C
C         CALCULATE PARAMETERS FOR GAUSS-LEGENDRE QUADRATURE
C
C         THE BASIC OUTLINE OF THE ALGORITHM FOR CALCULATING THE
C         ROOTS OF LEGENDRE POLYNOMIALS (INITIAL GUESS AND NEWTON-
C         RAPHSON ROOT REFINEMENT) IS TAKEN FROM
C
C         "NUMERICAL RECIPES, THE ART OF SCIENTIFIC COMPUTING",
C         W.H. PRESS, S.A. TEUKOLSKY, W.T. VETTERLING & B.P. FLANNERY,
C         CAMBRIDGE UNIVERSITY PRESS.
C
      SUBROUTINE GLPAR(X1,X2,X,W,N)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      COMMON/LEGEND/XX(500),DPL(500)
      DIMENSION X(500),W(500)
      LOGICAL FIRST
      DATA FIRST/.TRUE./
      SAVE FIRST
C
C         LEGENDRE POLYNOMIAL ROOTS
C
      M=(N+1)/2
      IF (FIRST) THEN
         DO I=1,M
            ICOUNT=0
            DUM=1.0D0
            XX(I)=DCOS(PI*(I-0.25D0)/(N+0.5D0))
C
C               NEWTON-RAPHSON FORMULA
C
            DO WHILE (DABS(DUM).GT.1.0D-13)
               DUM=PL(XX(I),N,DPL(I))
               XX(I)=XX(I)-DUM/DPL(I)
            ENDDO
         ENDDO
         FIRST=.FALSE.
      ENDIF
C
C         INTEGRATION POINTS AND WEIGHTS
C
      XM=0.5D0*(X2+X1)
      XL=0.5D0*(X2-X1)
      DO I=1,M
         X(I)=XM-XL*XX(I)
         X(N+1-I)=XM+XL*XX(I)
         W(I)=XL/((1.0D0-XX(I)*XX(I))*DPL(I)*DPL(I))/0.5D0
         W(N+1-I)=W(I)
      ENDDO
C
      RETURN
      END
C
C         LEGENDRE POLYNOMIAL OF ORDER N
C
      FUNCTION PL(X,N,DPL)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      P2=X
      PL=1.5D0*X*X-0.5D0
      DO K=2,N-1
         P1=P2
         P2=PL
         PL=(DBLE(2*K+1)*P2*X-DBLE(K)*P1)/DBLE(K+1)
      ENDDO
      DPL=DBLE(N)*(X*PL-P2)/(X*X-1.0D0)
      RETURN
      END
C
C         INITIALIZE COORDINATES AND MOMENTA FOR A DIATOM
C
      SUBROUTINE HOMOQP(R,PR,AL,AM,RMASS,A)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      COMMON/WASTE/QQ(3*ND1),PP(3*ND1),WX,WY,WZ,L(ND1),NAM
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/SELTB/QZ(3*ND1),NSELT,NSFLAG,NACTA,NACTB,NLINA,NLINB
      COMMON/FORCES/NATOMS,I3N,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      DIMENSION AM(4),A(3),QCM(3),VCM(3)
C
C         SET CARTESIAN COORDINATES AND MOMENTA
C
      DO 1 I=1,2
         J3=3*L(I)
         J2=J3-1
         J1=J2-1
         Q(J1)=0.0D0
         Q(J2)=0.0D0
         Q(J3)=0.0D0
         P(J2)=0.0D0
         P(J3)=0.0D0
    1 CONTINUE
      Q(J1)=R
      VREL=PR/RMASS
      WT=W(L(1))+W(L(2))
      VELA=VREL*W(L(2))/WT
      VELB=VELA-VREL
      J1=3*L(1)-2
      P(J1)=W(L(1))*VELA
      J1=3*L(2)-2
      P(J1)=W(L(2))*VELB
C
C         SET INERTIA ARRAYS.  CHOOSE Y AND Z ANGULAR MOMENTUM COMPONENTS
C
      A(1)=1.0D+20
      A(2)=RMASS*R**2
      A(3)=A(2)
      RAND=RAND0(ISEED)
      DUM=TWOPI*RAND
      AM(1)=0.0D0
      AM(2)=AL*DSIN(DUM)
      AM(3)=AL*DCOS(DUM)
C
C         CALCULATE CENTER OF MASS COORDIANTES QQ AND MOMENTA PP
C
      CALL CENMAS(WT,QCM,VCM,2)
C
C         MOVE PP ARRAY TO P ARRAY AND QQ ARRAY TO Q ARRAY
C
      DO 7 I=1,2
         J=3*L(I)+1
         DO 6 K=1,3
            Q(J-K)=QQ(J-K)
            P(J-K)=PP(J-K)
    6    CONTINUE
    7 CONTINUE
C
C         ADD THE ANGULAR MOMENTUM VECTOR.  CALCULATE THE REQUIRED
C         ANGULAR VELOCITY AND ADD IT TO THE DIATOM, WHICH LIES
C         ALONG THE X-AXIS.
C
      WX=0.0D0
      WY=-AM(2)/A(2)
      WZ=-AM(3)/A(3)
      CALL ANGVEL(2)
C
      IF (NATOMS.EQ.2) RETURN
C
C         RANDOMLY ROTATE THE DIATOM ABOUT ITS CENTER OF MASS BY
C         EULER'S ANGLES.  CENTER OF MASS COORDINATES QQ AND MOMENTA
C         PP ARE PASSED FROM SUBROUTINES CENMAS AND ANGVEL THROUGH
C         COMMON BLOCK WASTE.
C
      CALL ROTATE(2)
C
C         CALCULATE ANGULAR MOMENTUM AND COMPONENTS.
C
      CALL ROTN(AM,EROT,2)
      RETURN
      END
C
C         SELECT ANGULAR MOMENTUM AND ROTATIONAL ENERGY
C
      SUBROUTINE ROTEN(AM,AI,TROT,EROT,NROT,NLIN)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      COMMON/SELTB/QZ(3*ND1),NSELT,NSFLAG,NACTA,NACTB,NLINA,NLINB
C
C         THE ARRAY SIZES OF THE RELEVANT CALLING ARGUEMENTS ARE
C         DEFINED IN COMMON BLOCKS IN SUBROUTINE SELECT.
C
C                   ROTEN:             SELECT:
C
C                   AM(4)              AMA(4)  AMB(4)
C                   AI(3)              AI(3)   BI(3)
C
      DIMENSION AM(4),AI(3)
C
C         NROT=0 , CHOOSE ROTATIONAL ENERGY FROM A THERMAL
C                  DISTRIBUTION BY ASSUMING A SYMMETRIC TOP.
C                  FARADAY DISCUSSIONS 55, 93(1973).
C                  IF Z IS THE SYMMETRY AXIS, THEN IX=IY.
C                  IF X IS THE SYMMETRY AXIS, THEN IY=IZ.
C         NROT=1 , ROTATIONAL ENERGY ABOUT EACH AXIS EQUALS RT/2.
C         NLIN=0 , MOLECULE IS NONLINEAR
C         NLIN=1 , MOLECULE IS LINEAR
C         NOTE: , A LINEAR MOLECULE MUST LIE ALONG THE X-AXIS.
C                 (THE PROGRAM DOES IT AUTOMATICALLY NOW)
C         NOTE: , LZMAX**2 = 10*2*AI(1)*C5*TROT
C
      EROT=0.0D0
      AM(1)=0.0D0
      TEMP=C5*TROT
      IF (NROT.EQ.1) THEN
         DO 1 I=NLIN+1,3
            AM(I)=DSQRT(AI(I)*TEMP)
            RAND=RAND0(ISEED)
            IF (RAND.LT.0.5D0) AM(I)=-AM(I)
    1    CONTINUE
         EROT=DBLE(3-NLIN)*TEMP/2.0D0/C1
      ELSEIF (NROT.EQ.0) THEN
         IF (NLIN.EQ.0) THEN
            DUM1=DABS(AI(1)-AI(2))
            DUM2=DABS(AI(2)-AI(3))
            IF (DUM1.LE.DUM2) THEN
               JDUM=3
            ELSE
               JDUM=1
            ENDIF
            ALZMAX=DSQRT(20.0D0*AI(JDUM)*TEMP)
    2       CONTINUE
            RAND=RAND0(ISEED)
            AM(JDUM)=RAND*ALZMAX
            DUM=DEXP(-AM(JDUM)**2/2.0D0/AI(JDUM)/TEMP)
            RAND=RAND0(ISEED)
            IF (RAND.GT.DUM) GOTO 2
            RAND=RAND0(ISEED)
            IF (RAND.GT.0.5D0) AM(JDUM)=-AM(JDUM)
            EROT=AM(JDUM)**2/AI(JDUM)
         ENDIF
         IF (NLIN.EQ.1.OR.JDUM.EQ.1) THEN
            RAND=RAND0(ISEED)
            DUM=DSQRT(AI(2)*AI(3))
            AL=DSQRT(AM(1)**2-2.0D0*DUM*TEMP*DLOG(1.0D0-RAND))
            DUM=DSQRT(AL**2-AM(1)**2)
            RAND=RAND0(ISEED)
            AM(2)=DUM*DSIN(TWOPI*RAND)
            AM(3)=DUM*DCOS(TWOPI*RAND)
            EROT=(AM(2)**2/AI(2)+AM(3)**2/AI(3)+EROT)/2.0D0/C1
         ELSE
            RAND=RAND0(ISEED)
            DUM=DSQRT(AI(1)*AI(2))
            AL=DSQRT(AM(3)**2-2.0D0*DUM*TEMP*DLOG(1.0D0-RAND))
            DUM=DSQRT(AL**2-AM(3)**2)
            RAND=RAND0(ISEED)
            AM(1)=DUM*DSIN(TWOPI*RAND)
            AM(2)=DUM*DCOS(TWOPI*RAND)
            EROT=(AM(1)**2/AI(1)+AM(2)**2/AI(2)+EROT)/2.0D0/C1
         ENDIF
      ENDIF
      RETURN
      END
C
C         CALCULATE VIBRATIONAL QUANTUM NUMBERS FROM A THERMAL
C         (BOLTZMAN) DISTRIBUTION
C
      SUBROUTINE THRMAN(WW,ANQ,T,NM)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      DIMENSION WW(3*ND1),ANQ(3*ND1)
C
      DUM1=C7/C5/T
      DO 20 I=1,NM
         DUM=DUM1*WW(I)
         N=GAMA(1,ISEED)/DUM 
         ANQ(I)=DBLE(N)
   20 CONTINUE
      RETURN
      END
C
C         INITIALIZE COORDINATES AND MOMENTA FROM ORTHANT SAMPLING
C
      SUBROUTINE ORTHAN(AM,WT,ENMT,HSCALE,QMAX,QMIN,PMAX,PSCALE,EROT,N)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/SELTB/QZ(3*ND1),NSELT,NSFLAG,NACTA,NACTB,NLINA,NLINB
      COMMON/WASTE/QQ(3*ND1),PP(3*ND1),WX,WY,WZ,L(ND1),NAM
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/PRLIST/T,V,H,TIME,NTZ,NT,ISEED0(8),NC,NX
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      COMMON/FINALB/EROTA,EROTB,EA(3),EB(3),AMA(4),AMB(4),AN,AJ,BN,BJ,
     *OAM(4),EREL,ERELSQ,BF,SDA,SDB,DELH(NDP),ANG(16),NFINAL
      COMMON/TESTB/RMAX(NDP),RBAR(NDP),NTEST,NPATHS,NABJ(NDP),NABK(NDP),
     *NPATH,NAST
      COMMON/FORCES/NATOMS,I3N,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      DIMENSION RV(3*3*ND1),QMAX(3*ND1),QMIN(3*ND1),PMAX(ND1),AM(4),QCM(
     *3),VCM(3)
C
   26 FORMAT(/,10X,15HCHOSEN:  EROT =,F7.3,9H KCAL/MOL,/,
     *10X,10HJX,JY,JZ =,3D13.5,6H H-BAR,/)
   27 FORMAT(15X,16HINTERNAL ENERGY=,D18.9,9H KCAL/MOL)
C
      CALL DVDQ
      CALL ENERGY
      EZERO=H
      NSCALE=0
C
C         STORE THE ANGULAR MOMENTUM VECTOR FROM SELECT
C
      DUM1=AM(1)
      DUM2=AM(2)
      DUM3=AM(3)
C
C         CALCULATE INITIAL CONDITIONS USING ORTHANT SAMPLING.
C         FIRST TIME THROUGH SELECT NSFLAG=0, AND THE QMAX, QMIN, PMAX,
C         AND PMIN ARRAYS MUST BE CALCULATED.
C
      IF(NSFLAG.EQ.1) GOTO 12
      DO 2 I=1,N
         J=3*L(I)+1
         DO 1 K=1,3
            P(J-K)=0.0D0
            Q(J-K)=QZ(J-K)
    1    CONTINUE
    2 CONTINUE
      DO 8 I=1,N
         J=3*L(I)-3
         DO 7 K=1,3
    3       Q(J+K)=Q(J+K)+0.1D0
            CALL DVDQ
            CALL TEST
            IF (NTEST.EQ.0) THEN
               CALL ENERGY
               H=H-EZERO
               IF (H.LT.ENMT) GOTO 3
            ENDIF
            QMAX(J+K)=Q(J+K)
            Q(J+K)=QZ(J+K)
    5       Q(J+K)=Q(J+K)-0.1D0
            CALL DVDQ
            CALL TEST
            IF (NTEST.EQ.0) THEN
               CALL ENERGY
               H=H-EZERO
               IF(H.LT.ENMT) GOTO 5
            ENDIF
            QMIN(J+K)=Q(J+K)
            Q(J+K)=QZ(J+K)
    7    CONTINUE
    8 CONTINUE
      SDUM=ENMT*C1*2.0D0
      DO 9 I=1,N
         PMAX(L(I))=DSQRT(SDUM*W(L(I)))*PSCALE
    9 CONTINUE
C
C         CALCULATE 3N DIMENSIONAL RANDOM UNIT VECTOR
C
   12 CONTINUE
      NDIM=6*N-2
      SUMM=1.0D0
      SUM=1.0D0
      J=1
   13 RAND=RAND0(ISEED)
      XS=RAND*SUM
      SDUM=SUMM-XS*XS
      PRO=FLOAT(NDIM-1)/2.0D0
      PRO=(SDUM/SUMM)**PRO
      RAND=RAND0(ISEED)
      IF (PRO.LT.RAND) GOTO 13
      RV(J)=XS
      SUMM=SDUM
      SUM=DSQRT(SUMM)
      NDIM=NDIM-1
      J=J+1
      IF (NDIM.GT.0) GOTO 13
      RAND=RAND0(ISEED)
      XS=SUM*DSIN(HALFPI*RAND)
      RV(J)=XS
      J=J+1
      RV(J)=DSQRT(SUMM-XS*XS)
C
C         SELECT MOMENTA
C
      J=1
      DO 14 I=1,N
         K=3*L(I)
         P(K-2)=RV(J)*PMAX(L(I))
         J=J+1
         P(K-1)=RV(J)*PMAX(L(I))
         J=J+1
         P(K)=RV(J)*PMAX(L(I))
         J=J+1
   14 CONTINUE
      DO 16 I=1,N
         J=3*L(I)+1
         DO 15 K=1,3
            RAND=RAND0(ISEED)
            IF(RAND.LT.0.50D0)P(J-K)=-P(J-K)
   15    CONTINUE
   16 CONTINUE
C
C         SELECT COORDINATES
C
      JJ=3*N+1
      DO 19 I=1,N
         J=3*L(I)-3
         DO 18 K=1,3
            RAND=RAND0(ISEED)
            IF (RAND.GE.0.50D0) THEN
               Q(J+K)=(QMAX(J+K)-QZ(J+K))*RV(JJ)+QZ(J+K)
            ELSE
               Q(J+K)=(QMIN(J+K)-QZ(J+K))*RV(JJ)+QZ(J+K)
            ENDIF
            JJ=JJ+1
   18    CONTINUE
   19 CONTINUE
C
C         SUBTRACT OFF CENTER OF MASS VELOCITY
C
   20 CONTINUE
      CALL CENMAS(WT,QCM,VCM,N)
      DO 22 I=1,N
         J=3*L(I)+1
         DO 21 K=1,3
            P(J-K)=PP(J-K)
   21    CONTINUE
   22 CONTINUE
C
C         ADD ANGULAR VELOCITY VECTOR TO THE MOLECULE TO FIT THE
C         TOTAL ROTATIONAL ENERGY
C
C         ADD ANGULAR MOMENTUM VECTOR FROM SELECT TO THE MOLECULE.
C         CALCULATE THE REQUIRED ANGULAR VELOCITY AND ADD IT TO THE
C         MOLECULE.
C
      CALL ROTN(AM,EROT,N)
      AM(1)=DUM1-AM(1)
      AM(2)=DUM2-AM(2)
      AM(3)=DUM3-AM(3)
      NAM=1
      CALL ROTN(AM,EROT,N)
      NAM=0
      WX=-WX
      WY=-WY
      WZ=-WZ
      CALL ANGVEL(N)
C
C         SCALE COORDINATES AND MOMENTA TO FIT THE TOTAL ENERGY
C
      CALL DVDQ
      CALL ENERGY
      H=H-EZERO
      WRITE(6,27)H
      SDUM=DABS(HSCALE-H)/HSCALE
      IF (SDUM.GE.0.001D0) THEN
         NSCALE=NSCALE+1
         IF (NSCALE.GT.50) STOP
         SDUM=DSQRT(HSCALE/H)
         DO 24 I=1,N
            J=3*L(I)+1
            DO 23 K=1,3
               P(J-K)=P(J-K)*SDUM
               Q(J-K)=(Q(J-K)-QZ(J-K))*SDUM+QZ(J-K)
   23       CONTINUE
   24    CONTINUE
         GOTO 20
      ENDIF
C
      H=H+EZERO
      CALL ROTN(AM,EROT,N)
      DUM1=AM(1)/C7
      DUM2=AM(2)/C7
      DUM3=AM(3)/C7
      WRITE(6,26)EROT,DUM1,DUM2,DUM3
C
      IF (N.EQ.NATOMS) RETURN
C
C         RANDOMLY ROTATE THE MOLECULE ABOUT ITS CENTER OF MASS BY
C         EULER'S ANGLES.  CENTER OF MASS COORDINATES(QQ) AND MOMENTA(PP)
C         ARE PASSED FROM SUBROUTINES CENMAS AND ANGVEL THROUGH COMMON
C         BLOCK WASTE.
C
      CALL ROTATE(N)
      RETURN
      END
C
C         RANDOMLY ROTATE A MOLECULE ABOUT ITS CENTER OF MASS BY
C         EULER'S ANGLES.
C
      SUBROUTINE ROTATE(N)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/WASTE/QQ(3*ND1),PP(3*ND1),WX,WY,WZ,L(ND1),NAM
      COMMON/SELTB/QZ(3*ND1),NSELT,NSFLAG,NACTA,NACTB,NLINA,NLINB
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
C
C         CENTER OF MASS COORDINATES(QQ) AND MOMENTA(PP) ARE PASSED FROM
C         SUBROUTINES CENMAS AND ANGVEL THROUGH COMMON BLOCK WASTE.
C
      RAND=RAND0(ISEED)
      PHI=TWOPI*RAND
      RAND=RAND0(ISEED)
      CSTHTA=2.0D0*RAND-1.0D0
      RAND=RAND0(ISEED)
      CHI=TWOPI*RAND
      THTA=DACOS(CSTHTA)
      SNTHTA=DSIN(THTA)
      SNPHI=DSIN(PHI)
      CSPHI=DCOS(PHI)
      SNCHI=DSIN(CHI)
      CSCHI=DCOS(CHI)
      RXX=CSTHTA*CSPHI*CSCHI-SNPHI*SNCHI
      RXY=-CSTHTA*CSPHI*SNCHI-SNPHI*CSCHI
      RXZ=SNTHTA*CSPHI
      RYX=CSTHTA*SNPHI*CSCHI+CSPHI*SNCHI
      RYY=-CSTHTA*SNPHI*SNCHI+CSPHI*CSCHI
      RYZ=SNTHTA*SNPHI
      RZX=-SNTHTA*CSCHI
      RZY=SNTHTA*SNCHI
      RZZ=CSTHTA
      DO 1 I=1,N
      J=3*L(I)
         Q(J-2)=QQ(J-2)*RXX+QQ(J-1)*RXY+QQ(J)*RXZ
         Q(J-1)=QQ(J-2)*RYX+QQ(J-1)*RYY+QQ(J)*RYZ
         Q(J)=QQ(J-2)*RZX+QQ(J-1)*RZY+QQ(J)*RZZ
         QQ(J-2)=Q(J-2)
         QQ(J-1)=Q(J-1)
         QQ(J)=Q(J) 
         P(J-2)=PP(J-2)*RXX+PP(J-1)*RXY+PP(J)*RXZ
         P(J-1)=PP(J-2)*RYX+PP(J-1)*RYY+PP(J)*RYZ
         P(J)=PP(J-2)*RZX+PP(J-1)*RZY+PP(J)*RZZ
         PP(J-2)=P(J-2)
         PP(J-1)=P(J-1)
         PP(J)=P(J) 
    1 CONTINUE
      RETURN
      END
C
C         DRIVER FOR NORMAL MODE ANALYSIS
C         DOES NOT ALTER EITHER COORDINATES NOR THE ENERGY GRADIENT.
C
      SUBROUTINE NMODE(NATOM,NDIS)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/PRLIST/T,V,H,TIME,NTZ,NT,ISEED0(8),NC,NX
      COMMON/SELTB/QZ(3*ND1),NSELT,NSFLAG,NACTA,NACTB,NLINA,NLINB
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/TABLEB/TABLE(42*ND1)
      COMMON/RSTART/HINC,NPTS
      COMMON/FR2/DG(3*ND1,2),DIM(3*ND1)
      COMMON/ARRAYS/A(3*ND1,3*ND1),DA(3*ND1),B(3*ND1,3*ND1),DB(3*ND1)
      COMMON/EIGVL/EIG(3*ND1)
      COMMON/RANCOM/RANLST(100),ISEED3(8),IBFCTR
      COMMON/GPATHB/WM(3*ND1),TEMP(NDP),AI1D(5),AI(2),BI(2),SYMM(5),
     *SYMA,SYMB,GTEMP(NDP),NFLAG(NDP),N1DR,N2DR
      COMMON/TESTIN/VRELO,INTST
      COMMON/TESTB/RMAX(NDP),RBAR(NDP),NTEST,NPATHS,NABJ(NDP),NABK(NDP),
     *NPATH,NAST
      DIMENSION X(3*ND1),GZS(3*ND1)
C
C         WRITE RELEVANT INFORMATION IN CHECKPOINT FILE
C         (NORMAL MODE ANALYSIS OR REACTION PATH FOLLOWING)
C
      IF (NSELT.LT.0) THEN
         OPEN(50,FORM='UNFORMATTED')
         REWIND(50)
         WRITE(50)Q,P,QDOT,PDOT,TABLE,VRELO,RANLST,GTEMP,NFLAG,
     *            ISEED0,ISEED3,NX,NC,NTZ,INTST,NAST,IBFCTR
         CLOSE(50)
      ENDIF
C
C         SAVE COORDINATES AND GRADIENT
C
      I3N=3*NATOM
      DO 20 I=1,I3N
         X(I)=Q(I+3*NDIS)
         GZS(I)=PDOT(I+3*NDIS)
   20 CONTINUE
C
      CALL FMTRX(NATOM,NDIS,I3N)
C
C         RESTORE COORDINATES AND GRADIENT
C
      DO 30 I=1,I3N
         Q(I+3*NDIS)=X(I)
         PDOT(I+3*NDIS)=GZS(I)
   30 CONTINUE
      RETURN
      END
C
C         EVALUATE THE FORCE CONSTANT MATRIX BY DIFFERENCING
C         THE GRADIENT OF THE POTENTIAL ENERGY FUNCTION.
C
      SUBROUTINE FMTRX(NATOM,NDIS,I3N)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/ARRAYS/A(3*ND1,3*ND1),DA(3*ND1),B(3*ND1,3*ND1),DB(3*ND1)
      COMMON/EIGVL/EIG(3*ND1)
      COMMON/RSTART/HINC,NPTS
      COMMON/FR2/DG(3*ND1,2),DIM(3*ND1)
      COMMON/SELTB/QZ(3*ND1),NSELT,NSFLAG,NACTA,NACTB,NLINA,NLINB
      DIMENSION DIST(2),GZ(3*ND1),FA(3*ND1,3*ND1)
      DATA PT5/0.5D0/
  100 FORMAT(10X,5(1H*),' CALCULATION OF FORCE CONSTANT  ',5(1H*))
  102 FORMAT(1H1)
  103 FORMAT(15X,' FORCE CONSTANT MATRIX', /)
  104 FORMAT(/,10X,'SYMMETRIZED CARTESIAN FORCE CONSTANT MATRIX'/)
C
C         SET PRINT FILE FOR EIGOUT
C
      IP=7
      DIST(1)=HINC
      DIST(2)=-HINC
      DO 10 I=1,I3N
         GZ(I)=-PDOT(I+3*NDIS)
   10 CONTINUE
C
C         INITIALIZE SOME ARRAYS
C
      WRITE(7,100)
      IF (NPTS.GT.2) NPTS=2
      DO 20 I=1,I3N
         DO 14 J=1,NPTS
            Q(I+3*NDIS)=Q(I+3*NDIS)+DIST(J)
C
C         DISPLACE COORDINATE AND CALCULATE GRADIENT INTO DG
C
            CALL DVDQ
            Q(I+3*NDIS)=Q(I+3*NDIS)-DIST(J)
            DO 13 K=1,I3N
               DG(K,J)=-PDOT(K+3*NDIS)
   13       CONTINUE
   14    CONTINUE
C
C         TWO POINT DIFFERENCE FORMULA
C
         IF (NPTS.NE.1) THEN
            DO 15 K=1,I3N
               FA(K,I)=(DG(K,1)-DG(K,2))*PT5/HINC
   15       CONTINUE
         ELSE
C
C         SIMPLE ONE POINT FORMULA
C
            DO 18 K=1,I3N
               FA(K,I)=(DG(K,1)-GZ(K))/HINC
   18       CONTINUE
         ENDIF
   20 CONTINUE
C
      DO 21 I=1,I3N
         EIG(I)=0.0D0
   21 CONTINUE
      WRITE(7,102)
      WRITE(7,103)
      CALL EIGOUT(FA,I3N,IP)
      DO 25 I=1,I3N
         DO 24 J=1,I
            DU=PT5*(FA(I,J)+FA(J,I))
            DL=PT5*(FA(I,J)-FA(J,I))
            A(I,J)=DU
            A(J,I)=DL
   24    CONTINUE
   25 CONTINUE
      DO 27 I=1,I3N
         A(I,I)=FA(I,I)
   27 CONTINUE
      IF (NSELT.EQ.-2) RETURN
      WRITE(7,102)
      WRITE(7,104)
      CALL EIGOUT(A,I3N,IP)
C
C         CALCULATE ARRAY DIM(150) USED FOR MASS-WEIGHTING
C         CONVERT TO MASS WEIGHTED COORDINATES AND CALCULATE THE NORMAL
C         MODES AND THE SPECTROSCOPIC FREQUENCIES.
C
      K=0
      DO 31 I=1,NATOM
         DO 30 J=1,3
            K=K+1
            DIM(K)=1.D0/DSQRT(W(I+NDIS))
   30    CONTINUE
   31 CONTINUE
      CALL FGMTRX(I3N)
      IF (NSELT.EQ.-1) STOP
      RETURN
      END
C
C         CONSTRUCT AN EFFECTIVE WILSON -FG- MATRIX BY INTRODUCING MASS 
C         DEPENDENCE INTO THE POTENTIAL FORCE CONSTANT MATRIX. THE NORMAL
C         MODES AND THE SPECTROSCOPIC FREQUENCIES ARE THEN EVALUATED.          
C
      SUBROUTINE FGMTRX(I3N)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/PRLIST/T,V,H,TIME,NTZ,NT,ISEED0(8),NC,NX
      COMMON/SELTB/QZ(3*ND1),NSELT,NSFLAG,NACTA,NACTB,NLINA,NLINB
      COMMON/ARRAYS/A(3*ND1,3*ND1),DA(3*ND1),B(3*ND1,3*ND1),DB(3*ND1)
      COMMON/EIGVL/EIG(3*ND1)
      COMMON/RSTART/HINC,NPTS
      COMMON/FR2/DG(3*ND1,2),DIM(3*ND1)
      DATA TFACT/2.81837552D05/
      DATA RHO/1.0D-08/
  101 FORMAT(1H1)
  102 FORMAT(/,10X,'EIGENVECTORS OF CARTESIAN FORCE CONSTANT MATRIX'/)
  103 FORMAT(/,18X,' NORMAL MODES AND VIBRATIONAL FREQUENCIES (CM-1)')
  104 FORMAT(/)
C
C         MOVE DIAGONAL OF -A- TO -DA- AND SAVE
C 
      DO 10 I=1,I3N
         DA(I)=A(I,I)
  10  CONTINUE
      DO 12 I=1,I3N
         DO 11 J=1,I
            A(J,I)=A(I,J)
  11     CONTINUE
         A(I,I)=DA(I)
  12  CONTINUE
C
C         NOW DIAGONALIZE CARTESIAN FORCE MATRIX
C         SET PRINT FILE FOR EIGOUT
C
      IP=7
      CALL EIGN(A,B,I3N,RHO)
      WRITE(7,101)
      WRITE(7,102)
      CALL EIGOUT(B,I3N,IP)
C
C         CREATE FULL FORCE MATRIX FOR MASS-WEIGHTED  TRANSFORMATION
C
      DO 20 I=1,I3N
         DO 15 J=1,I
            A(I,J)=A(J,I)
  15     CONTINUE
         A(I,I)=DA(I)
  20  CONTINUE
C
C         CONSTRUCT MASS WEIGHTED MATRIX
C
      DO 30 I=1,I3N
         DO 29 J=1,I3N
            A(I,J)=DIM(I)*A(I,J)*DIM(J)
  29     CONTINUE
  30  CONTINUE
C
C         DIAGONALIZE MASS-WEIGHTED MATRIX AND CONVERT FREQUENCIES
C         TO WAVE NUMBERS
C
      CALL EIGN(A,B,I3N,RHO)
      DO 35 I=1,I3N
         EIG(I)=DSQRT(DABS(TFACT*EIG(I)))
  35  CONTINUE
C
C         NORMALIZE THE EIGENVECTORS
C
      DO 39 I=1,I3N
         DO 38 J=1,I3N
            A(I,J)=B(I,J)
  38     CONTINUE
  39  CONTINUE
      DO 42 I=1,I3N
         DUM=0.0D0
         DO 40 J=1,I3N
            DUM=DUM+A(I,J)*A(I,J)
  40     CONTINUE
         DUM=DSQRT(DUM)
         DO 41 J=1,I3N
            A(I,J)=A(I,J)/DUM
  41     CONTINUE
  42  CONTINUE
C
C         SET PHASE OF EIGENVECTORS
C
      DO 45 I=1,I3N
         SGN=1.D0
         DO J=1,I3N
            IF (A(I,J).GE.1.D-3) THEN
               SGN=1.D0
               GOTO 43
            ELSEIF (A(I,J).LE.-1.D-3) THEN
               SGN=-1.D0
               GOTO 43
            ENDIF
         ENDDO
   43    CONTINUE
         DO J=1,I3N
            A(I,J)=SGN*A(I,J)
         ENDDO
   45 CONTINUE
C
C         MASS-WEIGHT THE EIGENVECTORS SO THAT FURTHER NORMAL MODE
C         TRANSFORMATION IS PERFORMED FROM THE CARTESIAN COORDINATES
C
      DO 47 I=1,I3N
         DO 46 J=1,I3N
            A(I,J)=DIM(J)*A(I,J)
   46    CONTINUE
   47 CONTINUE
C
C         WRITE EIGENVALUES AND EIGENVECTORS
C
      IP=6
      IF (NTZ.EQ.1.OR.NSELT.LT.0) THEN
         WRITE(6,103)
         CALL EIGOUT(A,I3N,IP)
         WRITE(6,104)
      ENDIF
      RETURN
      END
C
C         WRITE EIGENVALUES AND EIGENVECTORS IN UNIT IP
C
      SUBROUTINE EIGOUT(A,N,IP)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/EIGVL/EIG(3*ND1)
      DIMENSION A(3*ND1,3*ND1)
  101 FORMAT(//,2X,6(9X,I3))
  102 FORMAT(5X,6E12.4)
  103 FORMAT(I3,1X,6F12.6)
  104 FORMAT(/)
      DO 2 I=1,N
         DO 1 J=1,I
            D=A(I,J)
            A(I,J)=A(J,I)
            A(J,I)=D
    1    CONTINUE
    2 CONTINUE
      K=0
    3 L=K+1
      K=K+6
      IF (N.LT.K) K=N
      WRITE(IP,101)(I,I=L,K)
      WRITE(IP,104)
      WRITE(IP,102)(EIG(I),I=L,K)
      WRITE(IP,104)
      DO 4 I=1,N
         WRITE(IP,103)I,(A(I,J),J=L,K)
    4 CONTINUE
      IF(K.LT.N) GOTO 3
      DO 7 I=1,N
         DO 6 J=1,I
            D=A(I,J)
            A(I,J)=A(J,I)
            A(J,I)=D
    6    CONTINUE
    7 CONTINUE
      RETURN
      END
C
C         DIAGONALIZE A MATRIX A, OF WHICH ONLY LOWER TRIANGLE IS USED
C         AND DESTROYED, USING THE GIVENS-HOUSHOLDER ALGORITHM.
C         EIGENVALUES ARE RETURNED IN ALGEBRAIC ASCENDING ORDER IN ARRAY
C         EIG THE EIGENVECTORS ARE RETURNED IN VEC.   
C
C           PARAMETERS PASSED                   
C           RHO IS THE UPPER LIMIT FOR OFF-DIAGONAL     
C           NN IS THE SIZE OF THE MATRIX              
C
      SUBROUTINE EIGN(A,VEC,NN,RHO)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/EIGVL/EIG(3*ND1)
      DIMENSION W(3*ND1),BETASQ(3*ND1),GAMMA(3*ND1),BETA(3*ND1)
      DIMENSION A(3*ND1,3*ND1),VEC(3*ND1,3*ND1)
      DIMENSION P(3*ND1),Q(3*ND1),IPOSV(3*ND1),IVPOS(3*ND1),IORD(3*ND1)
      RHOSQ=RHO*RHO
      N=NN
      IF (N.EQ.0) RETURN
      SHIFT = 0.0D0
      N1=N-1
      N2=N-2
      GAMMA(1)=A(1,1)
      IF (N2.NE.0) THEN 
         IF (N2.LT.0) GOTO 280
         DO 260 NR=1,N2
            B=A(NR+1,NR)
            S=0.0D0
            DO 130 I=NR,N2
               S=S+A(I+2,NR)**2
  130       CONTINUE
C
C         PREPARE FOR POSSIBLE BYPASS OF TRANSFORMATION
C
            A(NR+1,NR)=0.0D0
            IF (S.GT.0) THEN
               S=S+B*B
               SGN=+1.0D0
               IF (B.LT.0) SGN = -1.D0
               SQRTS=DSQRT(S)
               D=SGN/(SQRTS+SQRTS)
               TEMP=DSQRT(0.5D0+B*D)
               W(NR)=TEMP
               A(NR+1,NR)=TEMP
               D=D/TEMP
               B=-SGN*SQRTS
C
C         D IS FACTOR OF PROPORTIONALITY. COMPUTE AND SAVE W VECTOR
C
               DO 170 I=NR,N2
                  TEMP=D*A(I+2,NR)
                  W(I+1)=TEMP
                  A(I+2,NR)=TEMP
  170          CONTINUE
C
C         PREMULTIPLY VECTOR W BY MATRIX A TO OBTAIN P VECTOR.
C         SIMULTANEOUSLY ACCUMULATE DOT PRODUCT WP,(THE SCALAR K).
C
               WTAW = 0.0D0
               DO 210 I=NR,N1
                  SUM = 0.0D0
                  DO 180 J=NR,I
                     SUM=SUM+A(I+1,J+1)*W(J)
  180             CONTINUE
                  I1=I+1
                  IF ((N1-I1).GE.0) THEN
                     DO 200 J=I1,N1
                        SUM=SUM+A(J+1,I+1)*W(J)
  200                CONTINUE
                  ENDIF
                  P(I)=SUM
                  WTAW=WTAW+SUM*W(I)
  210          CONTINUE
C
C         P VECTOR AND SCALAR K NOW STORED. NEXT COMPUTE Q VECTOR
C         AND FORM PAP MATRIX.
C
               DO 220 I=NR,N1
                  Q(I)=P(I)-WTAW*W(I)
  220          CONTINUE
               DO 240 J=NR,N1
                  QJ=Q(J)
                  WJ=W(J)
                  DO 230 I=J,N1
                     A(I+1,J+1)=A(I+1,J+1)-2.*(W(I)*QJ+WJ*Q(I))
  230             CONTINUE
  240          CONTINUE
  250          BETA(NR)=B
            ENDIF
            BETASQ(NR)=B*B
            GAMMA(NR+1)=A(NR+1,NR+1)
  260    CONTINUE
      ENDIF
      B=A(N,N-1)
      BETA(N-1)=B
      BETASQ(N-1)=B*B
      GAMMA(N)=A(N,N)
  280 BETASQ(N)=0.
C
C         ADJOIN AN IDENTITY MATRIX TO BE POSTMULTIPLIED BY ROTATIONS
C
      DO 300 I=1,N
         DO 290 J=1,N
            VEC(I,J)=0.0D0
  290    CONTINUE
         VEC(I,I)=1.0D0
  300 CONTINUE
      M=N
      SUM=0.0D0
      NPAS=1
      GOTO 400
  310 SUM=SUM+SHIFT
      COSA=1.
      G=GAMMA(1)-SHIFT
      PP=G
      PPBS=PP*PP+BETASQ(1)
      PPBR=DSQRT(PPBS)
      DO 330 J=1,M
         COSAP=COSA
         IF (PPBS.EQ.0) THEN
            SINA = 0.0D0
            SINA2=0.0D0
            COSA=1.0D0
         ELSE
            SINA=BETA(J)/PPBR
            SINA2=BETASQ(J)/PPBS
            COSA=PP/PPBR
C
C         POSTMULTIPLY IDENTITY BY P-TRANSPOSE
C
            NT=J+NPAS
            IF (NT.GT.N) NT=N
            DO 320 I=1,NT
               TEMP=COSA*VEC(J,I)+SINA*VEC(J+1,I)
               VEC(J+1,I)=-SINA*VEC(J,I)+COSA*VEC(J+1,I)
               VEC(J,I)=TEMP
  320       CONTINUE
         ENDIF
         DIA=GAMMA(J+1)-SHIFT
         U=SINA2*(G+DIA)
         GAMMA(J)=G+U
         G=DIA-U
         PP=DIA*COSA-SINA*COSAP*BETA(J)
         IF (J.EQ.M) THEN
            BETA(J)=SINA*PP
            BETASQ(J)=SINA2*PP*PP
            GOTO 340
         ENDIF
         PPBS=PP*PP+BETASQ(J+1)
         PPBR=DSQRT(PPBS)
         BETA(J)=SINA*PPBR
         BETASQ(J)=SINA2*PPBS
  330 CONTINUE
  340 GAMMA(M+1)=G
C
C         TEST FOR CONVERGENCE OF LAST DIAGONAL ELEMENT
C
      NPAS=NPAS+1
      IF (BETASQ(M).GT.RHOSQ) GOTO 410
  390 EIG(M+1)=GAMMA(M+1)+SUM
  400 BETA(M)=0.0D0
      BETASQ(M)=0.0D0
      M=M-1
      IF (M.EQ.0) GOTO 430
      IF (BETASQ(M).LE.RHOSQ) GOTO 390
  410 CONTINUE 
C
C         TAKE ROOT OF CORNER 2 BY 2 NEAREST TO LOWER DIAGONAL IN
C         VALUE AS ESTIMATE OF EIGENVALUE TO USE FOR SHIFT
C
      A2=GAMMA(M+1)
      R2=0.5D0*A2
      R1=0.5D0*GAMMA(M)
      R12=R1+R2
      DIF=R1-R2
      TEMP=DSQRT(DIF*DIF+BETASQ(M))
      R1=R12+TEMP
      R2=R12-TEMP
      DIF=DABS(A2-R1)-DABS(A2-R2)
      IF (DIF.GE.0) THEN
         SHIFT=R2
      ELSE
         SHIFT=R1
      ENDIF
      GOTO 310
  430 EIG(1)=GAMMA(1)+SUM
C
C         INITIALIZE AUXILIARY TABLES REQUIRED FOR
C         REARANGING THE VECTORS
C
      DO 440 J=1,N
         IPOSV(J)=J
         IVPOS(J)=J
         IORD(J) = J
  440 CONTINUE
C
C         USE A TRANSPOSITON SORT TO ORDER THE EIGENVALUES
C
      M=N
      GOTO 470
  450 DO 460 J=1,M
         IF (EIG(J).GT.EIG(J+1)) THEN
            TEMP=EIG(J)
            EIG(J)=EIG(J+1)
            EIG(J+1)=TEMP
            ITEMP=IORD(J)
            IORD(J)=IORD(J+1)
            IORD(J+1)=ITEMP
         ENDIF
  460 CONTINUE
  470 M=M-1
      IF (M.NE.0) GOTO 450
      IF (N1.NE.0) THEN
         DO 490 L=1,N1
            NV=IORD(L)
            NP=IPOSV(NV)
            IF (NP.NE.L) THEN
               LV=IVPOS(L)
               IVPOS(NP)=LV
               IPOSV(LV)=NP
               DO 480 I=1,N
                  TEMP=VEC(L,I)
                  VEC(L,I)=VEC(NP,I)
                  VEC(NP,I) = TEMP
  480          CONTINUE
            ENDIF
  490    CONTINUE
      ENDIF
C
C         BACK TRANSFORM THE VECTORS OF THE TRIPLE DIAGONAL MATRIX
C
      DO 550 NRR=1,N
         K=N1
  510    K=K-1
         IF (K.GT.0) THEN
            SUM = 0.0
            DO 520 I=K,N1
               SUM=SUM+VEC(NRR,I+1)*A(I+1,K)
  520       CONTINUE
            SUM=SUM+SUM
            DO 530 I=K,N1
               VEC(NRR,I+1)=VEC(NRR,I+1)-SUM*A(I+1,K)
  530       CONTINUE
            GOTO 510
         ENDIF
  550 CONTINUE
      RETURN
      END
C
C         PERFORM REACTION PATH FOLLOWING
C
      SUBROUTINE MPATH
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/WASTE/QQ(3*ND1),PP(3*ND1),WX,WY,WZ,LL(ND1),NAM
      COMMON/FORCES/NATOM,I3N,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/COORS/R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      COMMON/FRAGB/WTA(NDP),WTB(NDP),LA(NDP,ND1),LB(NDP,ND1),
     *QZA(NDP,3*ND1),QZB(NDP,3*ND1),NATOMA(NDP),NATOMB(NDP)
      COMMON/PRLIST/T,V,H,TIME,NTZ,NT,ISEED0(8),NC,NX
      COMMON/PRFLAG/NFQP,NCOOR,NFR,NUMR,NFB,NUMB,NFA,NUMA,NFTAU,NUMTAU,
     *NFTET,NUMTET,NFDH,NUMDH
      COMMON/PARRAY/KR(300),JR(300),KB(300),MB(300),IB(300),IA(300),
     *ITAU(300),ITET(300),IDH(300)
      COMMON/INERT/UXX,UXY,UXZ,UYY,UYZ,UZZ,AIXX,AIXY,AIXZ,AIYY,AIYZ,
     *AIZZ
      COMMON/FR2/DG(3*ND1,2),DIM(3*ND1)
      COMMON/ARRAYS/FA(3*ND1,3*ND1),DA(3*ND1),B(3*ND1,3*ND1),DB(3*ND1)
      COMMON/RSTART/HINC,NPTS
      COMMON/EIGVL/EIG(3*ND1)
      COMMON/RKUTTA/RAA1,RA1,RA2,RA3,RB1,RB2,RB3,RC1,RC2
      COMMON/GPATHB/WM(3*ND1),TEMP(NDP),AI1D(5),AAI(2),BBI(2),SYMM(5),
     *SYMA,SYMB,GTEMP(NDP),NFLAG(NDP),N1DR,N2DR
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      COMMON/SYBB/TITLE(36),SYBTI
      DIMENSION BQ(3*ND1),PJ(3*ND1,3*ND1),FAP(3*ND1,3*ND1),QCM(3),VCM(3)
     *,AM(4),QM(3*ND1),GZ(3*ND1)
      DATA RHO/1.0D-08/
      DATA TFACT/2.81837552D05/
C
  150 FORMAT(1X,'XXXXXXXXXXXXXXXXXXXXX REACTION PATH  NC = ',I7,
     *' XXXXXXXXXXXXXXXXXXXXXXX')
  151 FORMAT(1H ,//,10X,33H*****CALCULATE REACTION PATH*****,//,
     *4X,3HNS=,I10,6H  NIP=,I10,5H  DS=,F13.10,/)
  152 FORMAT(/,1H ,3X,3HNC=,I8,5X,28HPOTENTIAL ENERGY(KCAL/MOLE)=,F9.4)
  153 FORMAT(10X,21HCARTESIAN COORDINATES)
  154 FORMAT(3X,3D18.10,3X,3D18.10)
  155 FORMAT(10X,11HEIGENVALUES)
  156 FORMAT(3X,7D14.6)
  157 FORMAT(10X,38HPRINCIPAL MOMENTS OF INERTIA: IX,IY,IZ)
  158 FORMAT(4X,8H ATOMS  ,5X,14HBOND LENGTH(A))
  159 FORMAT(2X,2I4,10X,D15.8)
  160 FORMAT(1X,3F11.7)
  161 FORMAT(10X,38HREACTANT VIBRATIONAL FREQUENCIES(CM-1))
  162 FORMAT(1H ,3X,13HTEMPERATURES=,10F9.2)
  164 FORMAT(1H ,3X,32HNUMBER OF 1-DIMENSIONAL ROTORS =,I2)
  165 FORMAT(10X,5HSYMA=,F4.1)
  166 FORMAT(10X,5HSYMB=,F4.1)
  167 FORMAT(10X,4HAI =,F8.3,6HSYMM =,F5.1)
  168 FORMAT(1H ,3X,32HNUMBER OF 2-DIMENSIONAL ROTORS =,I2)
  171 FORMAT(10X,43HMOMENTS OF INERTIA FOR FRAGMENT A: IX,IY,IZ)
  172 FORMAT(10X,41HREDUCED MOMENTS OF INERTIA FOR 2-D ROTOR:,
     *5H  IX=,D14.6,5H  IZ=,D14.6)
  173 FORMAT(5X,5HATOMS,7X,15HANGLE (DEGREES))
  174 FORMAT(2X,3I3,8X,F8.3)
  175 FORMAT(10X,43HMOMENTS OF INERTIA FOR FRAGMENT B: IX,IY,IZ)
C
C         READ CYCLE COUNTS AND INTEGRATION PARAMETERS
C
      READ(5,*)NS,NIP,DS
      WRITE(6,151)NS,NIP,DS
C
C         READ REACTANT VIBRATIONAL FREQUENCIES(CM-1)
C
      J=I3N-6
      READ(5,*)(WM(I),I=1,J)
      WRITE(6,161)
      WRITE(6,156)(WM(I),I=1,J)
C
C         READ TEMPERATURES(K) FOR CALCULATING THE FREE ENERGY
C         ALONG THE REACTION PATH
C
      READ(5,*)NTEMP
      READ(5,*)(TEMP(I),I=1,NTEMP)
      WRITE(6,162)(TEMP(I),I=1,NTEMP)
C
C         READ PARAMETERS FOR CALCULATING 1- AND 2-DIMENSIONAL INTERNAL
C         ROTOR PARTITION FUNCTIONS.  N2DR MAY EQUAL 0, 1, OR 2.
C
      READ(5,*)N1DR,N2DR
      WRITE(6,164)N1DR
      IF (N1DR.NE.0) THEN
         READ(5,*)(AI1D(I),I=1,N1DR)
         READ(5,*)(SYMM(I),I=1,N1DR)
         WRITE(6,167)(AI1D(I),SYMM(I),I=1,N1DR)
      ENDIF
      WRITE(6,168)N2DR
      IF (N2DR.NE.0) THEN
         READ(5,*)SYMA
         WRITE(6,165)SYMA
         IF (N2DR.NE.1) THEN
            READ(5,*)SYMB
            WRITE(6,166)SYMB
         ENDIF
      ENDIF
C
C         CALCULATE DIM ARRAY USED FOR MASS-WEIGHTING AND TOTAL MASS
C
      K=0
      WTM=0.0D0
      DO 2 I=1,NATOM
         WTM=WTM+W(I)
         DO 1 J=1,3
            K=K+1
            DIM(K)=1.D0/DSQRT(W(I))
    1    CONTINUE
    2 CONTINUE
C
C         SET INDEX FOR LL ARRAY
C
      DO 3 I=1,NATOM
         LL(I)=I
    3 CONTINUE
C
C         CALCULATE CENTER OF MASS COORDINATES
C
      CALL CENMAS(WTM,QCM,VCM,NATOM)
      DO 4 I=1,I3N
         Q(I)=QQ(I)
    4 CONTINUE
      IF (NCOOR.EQ.1) THEN
         SYBTI=-DS*DBLE(NIP)
         CALL SYBMOL
      ENDIF
C
C         CONVERT GRADIENT AND CENTER OF MASS COORDINATES TO
C         MASS WEIGHTED COORDINATES
C
      DUM=0.0D0
      DO 5 I=1,I3N
         QM(I)=QQ(I)/DIM(I)
         GZ(I)=-PDOT(I)*DIM(I)
         DUM=DUM+GZ(I)*GZ(I)
    5 CONTINUE
      DUM=DSQRT(DUM)
      DO 6 I=1,I3N
         GZ(I)=GZ(I)/DUM
    6 CONTINUE
C
C         CALCULATE CARTESIAN FORCE CONSTANT MATRIX
C
  100 CONTINUE
      REWIND 7
      I=0
      CALL NMODE(NATOM,I)
      IF (NC.NE.1) NX=NX+NIP
C
C         CALCULATE MASS-WEIGHTED CARTESIAN FORCE CONSTANT MATRIX
C
      DO 9 I=1,I3N
         DO 7 J=1,I
            FA(I,J)=DIM(I)*FA(I,J)*DIM(J)
            FA(J,I)=FA(I,J)
    7    CONTINUE
    9 CONTINUE
C
C         CALCULATE INERTIA MATRIX AND INVERSE OF INERTIA MATRIX
C         THIS REQUIRES QQ ARRAY
C
      CALL ROTN(AM,EROT,NATOM)
C
C         CALCULATE PROJECTOR COMPONENTS
C
   21 CONTINUE
      DO 13 I=1,NATOM
         I3=3*I
         I2=I3-1
         I1=I3-2
         DUM1=1.0D0/WTM/DIM(I1)/DIM(I1)
         PJ(I1,I1)=1.D0-(GZ(I1)**2+DUM1+QM(I2)**2*UZZ
     *             -2.D0*QM(I2)*QM(I3)*UYZ+QM(I3)**2*UYY)
         PJ(I2,I2)=1.D0-(GZ(I2)**2+DUM1+QM(I1)**2*UZZ
     *             -2.D0*QM(I1)*QM(I3)*UXZ+QM(I3)**2*UXX)
         PJ(I3,I3)=1.D0-(GZ(I3)**2+DUM1+QM(I1)**2*UYY
     *             -2.D0*QM(I1)*QM(I2)*UXY+QM(I2)**2*UXX)
         PJ(I1,I2)=-(GZ(I1)*GZ(I2)-QM(I1)*QM(I2)*UZZ+QM(I2)*QM(I3)*UXZ
     *             +QM(I1)*QM(I3)*UYZ-QM(I3)*QM(I3)*UXY)
         PJ(I2,I1)=PJ(I1,I2)
         PJ(I1,I3)=-(GZ(I1)*GZ(I3)+QM(I1)*QM(I2)*UYZ-QM(I2)*QM(I2)*UXZ
     *             -QM(I1)*QM(I3)*UYY+QM(I2)*QM(I3)*UXY)
         PJ(I3,I1)=PJ(I1,I3)
         PJ(I2,I3)=-(GZ(I2)*GZ(I3)-QM(I1)*QM(I1)*UYZ+QM(I1)*QM(I2)*UXZ
     *             +QM(I1)*QM(I3)*UXY-QM(I2)*QM(I3)*UXX)
         PJ(I3,I2)=PJ(I2,I3)
C
         L=I+1
         DO 11 J=L,NATOM
            J3=3*J
            J2=J3-1
            J1=J3-2
            DUM1=1.0D0/WTM/DIM(I1)/DIM(J1)
            PJ(I1,J1)=-(GZ(I1)*GZ(J1)+DUM1+QM(I2)*QM(J2)*UZZ
     *                -QM(I2)*QM(J3)*UYZ-QM(I3)*QM(J2)*UYZ
     *                +QM(I3)*QM(J3)*UYY)
            PJ(J1,I1)=PJ(I1,J1)
            PJ(I2,J2)=-(GZ(I2)*GZ(J2)+DUM1+QM(I1)*QM(J1)*UZZ
     *                -QM(I1)*QM(J3)*UXZ-QM(I3)*QM(J1)*UXZ
     *                +QM(I3)*QM(J3)*UXX)
            PJ(J2,I2)=PJ(I2,J2)
            PJ(I3,J3)=-(GZ(I3)*GZ(J3)+DUM1+QM(I1)*QM(J1)*UYY
     *                -QM(I1)*QM(J2)*UXY-QM(I2)*QM(J1)*UXY
     *                +QM(I2)*QM(J2)*UXX)
            PJ(J3,I3)=PJ(I3,J3)
            PJ(I1,J2)=-(GZ(I1)*GZ(J2)-QM(I2)*QM(J1)*UZZ
     *                +QM(I2)*QM(J3)*UXZ+QM(I3)*QM(J1)*UYZ
     *                -QM(I3)*QM(J3)*UXY)
            PJ(J2,I1)=PJ(I1,J2)
            PJ(I1,J3)=-(GZ(I1)*GZ(J3)+QM(I2)*QM(J1)*UYZ
     *                -QM(I2)*QM(J2)*UXZ-QM(I3)*QM(J1)*UYY
     *                +QM(I3)*QM(J2)*UXY)
            PJ(J3,I1)=PJ(I1,J3)
            PJ(I2,J1)=-(GZ(I2)*GZ(J1)-QM(I1)*QM(J2)*UZZ
     *                +QM(I1)*QM(J3)*UYZ+QM(I3)*QM(J2)*UXZ
     *                -QM(I3)*QM(J3)*UXY)
            PJ(J1,I2)=PJ(I2,J1)
            PJ(I2,J3)=-(GZ(I2)*GZ(J3)-QM(I1)*QM(J1)*UYZ
     *                +QM(I1)*QM(J2)*UXZ+QM(I3)*QM(J1)*UXY
     *                -QM(I3)*QM(J2)*UXX)
            PJ(J3,I2)=PJ(I2,J3)
            PJ(I3,J1)=-(GZ(I3)*GZ(J1)+QM(I1)*QM(J2)*UYZ
     *                -QM(I1)*QM(J3)*UYY-QM(I2)*QM(J2)*UXZ
     *                +QM(I2)*QM(J3)*UXY)
            PJ(J1,I3)=PJ(I3,J1)
            PJ(I3,J2)=-(GZ(I3)*GZ(J2)-QM(I1)*QM(J1)*UYZ
     *                +QM(I1)*QM(J3)*UXY+QM(I2)*QM(J1)*UXZ
     *                -QM(I2)*QM(J3)*UXX)
            PJ(J2,I3)=PJ(I3,J2)
   11    CONTINUE
   13 CONTINUE
C
C         CALCULATE PROJECTED FORCE CONSTANT MATRIX: (1-P)FA(1-P)
C
      DO 19 I=1,I3N
         DO 17 J=1,I
            FAP(I,J)=0.0D0
            DO 15 L=1,I3N
               DUM1=0.0D0
               DO 14 K=1,I3N
                  DUM1=DUM1+FA(L,K)*PJ(K,J)
   14          CONTINUE
               FAP(I,J)=FAP(I,J)+PJ(I,L)*DUM1
   15       CONTINUE
            FAP(J,I)=FAP(I,J)
   17    CONTINUE
   19 CONTINUE
C
C         DIAGONALIZE PROJECTED FORCE CONSTANT MATRIX
C
      CALL EIGN(FAP,FA,I3N,RHO)
C
C         CALCULATE EIGENVALUES
C
      DO 23 I=1,I3N
         EIG(I)=DSQRT(DABS(TFACT*EIG(I)))
   23 CONTINUE
C
      WRITE(6,152)NC,V
      WRITE(6,153)
      WRITE(6,154)(Q(I),I=1,I3N)
C
C         WRITE COORDINATES FOR GRAPHICS
C
      IF (NCOOR.EQ.1.AND.NC.NE.1) THEN
         WRITE(8,150)NC
         WRITE(8,160)(Q(I),I=1,I3N)
      ENDIF
C
C         CALCULATE AND WRITE POSSIBLE INTERATOMIC DISTANCES
C
      IF (NFR.NE.0) THEN
         WRITE(6,158)
         DO 27 I=1,NUMR
            J3=3*JR(I)
            J2=J3-1
            J1=J2-1
            K3=3*KR(I)
            K2=K3-1
            K1=K2-1
            T1=Q(K1)-Q(J1)
            T2=Q(K2)-Q(J2)
            T3=Q(K3)-Q(J3)
            RR=DSQRT(T1*T1+T2*T2+T3*T3)
            WRITE(6,159)JR(I),KR(I),RR
   27    CONTINUE
      ENDIF
C
C         CALCULATE AND WRITE POSSIBLE ANGLES 
C
      IF (NFB.NE.0) THEN
         WRITE(6,173)
         DO 29 I=1,NUMB
            K3=3*KB(I)
            K2=K3-1
            K1=K2-1
            M3=3*MB(I)
            M2=M3-1
            M1=M2-1
            I3=3*IB(I)
            I2=I3-1
            I1=I2-1
            T1=Q(I1)-Q(M1)
            T2=Q(I2)-Q(M2)
            T3=Q(I3)-Q(M3)
            T4=Q(K1)-Q(M1)
            T5=Q(K2)-Q(M2)
            T6=Q(K3)-Q(M3)
            R1=DSQRT(T1*T1+T2*T2+T3*T3)
            R2=DSQRT(T4*T4+T5*T5+T6*T6)
            CTHETA=(T1*T4+T2*T5+T3*T6)/R1/R2
            IF (CTHETA.GT. 1.00D0) CTHETA= 1.00D0
            IF (CTHETA.LT.-1.00D0) CTHETA=-1.00D0
            DUM=DACOS(CTHETA)/C4
            WRITE(6,174)KB(I),MB(I),IB(I),DUM
   29    CONTINUE
      ENDIF
C
      WRITE(6,155)
      WRITE(6,156)(EIG(I),I=1,I3N)
C
C         CALCULATE PRINCIPAL MOMENTS OF INERTIA
C
      FAP(1,1)=AIXX
      FAP(2,1)=-AIXY
      FAP(2,2)=AIYY
      FAP(3,1)=-AIXZ
      FAP(3,2)=-AIYZ
      FAP(3,3)=AIZZ
      I=3
      CALL EIGN(FAP,FA,I,RHO)
      EIG(4)=EIG(1)
      EIG(5)=EIG(2)
      EIG(6)=EIG(3)
C
C             CALCULATE THE TWO MOMENTS OF INERTIA WHICH ARE NOT ABOUT
C             THE Y-COORDINATE, WHICH LIES ALONG THE REACTION PATH.
C
      DO 31 I=1,3
         IF (FA(I,1)**2.GT.(FA(I,2)**2+FA(I,3)**2)) THEN
            DUM1=EIG(I)
         ELSEIF (FA(I,2)**2.GT.(FA(I,1)**2+FA(I,3)**2)) THEN
            DUM2=EIG(I)
         ELSE
            DUM3=EIG(I)
         ENDIF
   31 CONTINUE
      WRITE(6,157)
      WRITE(6,156)DUM1,DUM2,DUM3
C
C         CALCULATE REDUCED MOMENTS OF INERTIA FOR 2-D INTERNAL ROTORS.
C
      IF (N2DR.NE.0) THEN
C
C             REDUCED MOMENTS OF INERTIA FOR REACTANT A.
C
         WT=WTA(1)
         N=NATOMA(1)
         CALL CENMAS(WT,QCM,VCM,N)
         CALL ROTN(AM,EROT,N)
         FAP(1,1)=AIXX
         FAP(2,1)=-AIXY
         FAP(2,2)=AIYY
         FAP(3,1)=-AIXZ
         FAP(3,2)=-AIYZ
         FAP(3,3)=AIZZ
         I=3
         CALL EIGN(FAP,FA,I,RHO)
C
         DO 33 I=1,3
            IF (FA(I,1)**2.GT.(FA(I,2)**2+FA(I,3)**2)) THEN
               DUM4=EIG(I)
            ELSEIF (FA(I,2)**2.GT.(FA(I,1)**2+FA(I,3)**2)) THEN
               DUM5=EIG(I)
            ELSE
               DUM6=EIG(I)
            ENDIF
   33    CONTINUE
         WRITE(6,171)
         WRITE(6,156)DUM4,DUM5,DUM6
         AAI(1)=DUM4*(1.0D0-DUM4/DUM1)
         AAI(2)=DUM6*(1.0D0-DUM6/DUM3)
         WRITE(6,172)AAI(1),AAI(2)
C
C             REDUCED MOMENTS OF INERTIA FOR REACTANT B.
C
         IF (N2DR.NE.1) THEN
            WT=WTB(1)
            N=NATOMB(1)
            DO 38 I=1,N
               LL(I)=LB(1,I)
   38       CONTINUE
            CALL CENMAS(WT,QCM,VCM,N)
            CALL ROTN(AM,EROT,N)
            FAP(1,1)=AIXX
            FAP(2,1)=-AIXY
            FAP(2,2)=AIYY
            FAP(3,1)=-AIXZ
            FAP(3,2)=-AIYZ
            FAP(3,3)=AIZZ
            I=3
            CALL EIGN(FAP,FA,I,RHO)
C
            DO 37 I=1,3
               IF (FA(I,1)**2.GT.(FA(I,2)**2+FA(I,3)**2)) THEN
                  DUM4=EIG(I)
               ELSEIF (FA(I,2)**2.GT.(FA(I,1)**2+FA(I,3)**2)) THEN
                  DUM5=EIG(I)
               ELSE
                  DUM6=EIG(I)
               ENDIF
   37       CONTINUE
            WRITE(6,175)
            WRITE(6,156)DUM4,DUM5,DUM6
            BBI(1)=DUM4*(1.0D0-DUM4/DUM1)
            BBI(2)=DUM6*(1.0D0-DUM6/DUM3)
            WRITE(6,172)BBI(1),BBI(2)
C
C             RESET LL ARRAY
C
            DO 41 I=1,NATOM
               LL(I)=I
   41       CONTINUE
         ENDIF
      ENDIF
C
C         DETERMINE MAXIMUM AND MINIMUM IN FREE ENERGY ALONG
C         THE REACTION PATH(NONLINEAR GEOMETRY)
C
      VZ=V
      DO 43 I=1,NTEMP
         CALL GPATH(VZ,I,NC)
   43 CONTINUE
C
C         SOLVE FOR REACTION PATH
C
   47 DO 49 I=1,I3N
         RDUM=RAA1*DS
         QM(I)=QM(I)+RDUM*GZ(I)
         BQ(I)=GZ(I)
   49 CONTINUE
      CALL GRCONV(QM,GZ)
      DO 51 I=1,I3N
         RDUM=RA1*DS
         QM(I)=QM(I)+(GZ(I)-BQ(I))*RDUM
         BQ(I)=(RA2*GZ(I)-RA3*BQ(I))
   51 CONTINUE
      CALL GRCONV(QM,GZ)
      DO 53 I=1,I3N
         RDUM=RB1*DS
         QM(I)=QM(I)+(GZ(I)-BQ(I))*RDUM
         BQ(I)=(RB2*GZ(I)-RB3*BQ(I))
   53 CONTINUE
      CALL GRCONV(QM,GZ)
      DO 57 I=1,I3N
         QM(I)=QM(I)+(GZ(I)*RC1-BQ(I)*RC2)*DS
   57 CONTINUE
      CALL GRCONV(QM,GZ)
C
C         TEST FOR COMPLETION OF INTEGRATION AND NORMAL MODE ANALYSIS
C
      NC=NC+1
      IF (NC.GT.NS) STOP
      IF (NC.NE.1) THEN
         IF (NC.LT.NX) GOTO 47
      ENDIF
      CALL ENERGY
C
C         SAVE GZ, AND EQUATE QQ AND Q.
C
      DO 59 I=1,I3N
         QQ(I)=Q(I)
   59 CONTINUE
      GOTO 100
      END
C
C          CALCULATE MASS-WEIGHTED AND NORMALIZED GRADIENT
C          FOR REACTION PATH FOLLOWING
C
      SUBROUTINE GRCONV(QM,GZ)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/WASTE/QQ(3*ND1),PP(3*ND1),WX,WY,WZ,LL(ND1),NAM
      COMMON/FORCES/NATOM,I3N,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/FR2/DG(3*ND1,2),DIM(3*ND1)
      DIMENSION QM(3*ND1),GZ(3*ND1)
      DO 1 I=1,I3N
         Q(I)=QM(I)*DIM(I)
    1 CONTINUE
      CALL DVDQ
      DUM=0.0D0
      DO 2 I=1,I3N
         GZ(I)=-PDOT(I)*DIM(I)
         DUM=DUM+GZ(I)*GZ(I)
    2 CONTINUE
      DUM=DSQRT(DUM)
      DO 3 I=1,I3N
         GZ(I)=GZ(I)/DUM
    3 CONTINUE
      RETURN
      END
C
C         CALCULATE FREE ENERGY ALONG THE REACTION PATH
C
      SUBROUTINE GPATH(VZ,K,NCC)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/WASTE/QQ(3*ND1),PP(3*ND1),WX,WY,WZ,L(ND1),NAM
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/FRAGB/WTA(NDP),WTB(NDP),LA(NDP,ND1),LB(NDP,ND1),
     *QZA(NDP,3*ND1),QZB(NDP,3*ND1),NATOMA(NDP),NATOMB(NDP)
      COMMON/FORCES/NATOM,I3N,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      COMMON/EIGVL/EIG(3*ND1)
      COMMON/GPATHB/WM(3*ND1),TEMP(NDP),AI1D(5),AAI(2),BBI(2),SYMM(5),
     *SYMA,SYMB,GTEMP(NDP),NFLAG(NDP),N1DR,N2DR
      COMMON/PRLIST/T,V,H,TIME,NTZ,NT,ISEED0(8),NC,NX
      DIMENSION QTEM(3*ND1)
C
   50 FORMAT(5X,39HA MAXIMUM IN FREE ENERGY,  TEMPERATURE=,F8.2,
     *15H,  FREE ENERGY=,D12.5,16H,  VQ(KCAL/MOL)=,F8.3,5H*****)
   51 FORMAT(5X,39HA MINIMUM IN FREE ENERGY,  TEMPERATURE=,F8.2,
     *15H,  FREE ENERGY=,D12.5,16H,  VQ(KCAL/MOL)=,F8.3,5H*****)
   52 FORMAT(32X,12HTEMPERATURE=,F8.2,15H,  FREE ENERGY=,D12.5,
     *16H,  VQ(KCAL/MOL)=,F8.3)
C
C         CALCULATE ZERO-POINT ENERGY OF REACTANT
C
      IF (K.LE.1) THEN
         EZM=0.0D0
         J=I3N-6
         DO 1 I=1,J
            EZM=EZM+WM(I)
    1    CONTINUE
      ENDIF
C
      DUM=-1.987D0*TEMP(K)/1000.0D0
      G=0.0D0
C
C         CALCULATE FREE ENERGY
C
C             VIBRATIONAL FREE ENERGY.  IT IS ASSUMED THAT THE LOWEST
C             FREQUENCIES ARE FOR THE 1- AND 2-DIMENSIONAL INT. ROTORS.
C
      J=8+N1DR+2*N2DR
      DO 3 I=J,I3N
         QPF=1.0D0/(1.0D0-DEXP(-1.4388D0*EIG(I)/TEMP(K)))
         G=G+DUM*DLOG(QPF)
    3 CONTINUE
C
C             ROTATIONAL FREE ENERGY
C
      QPF=0.014837D0*DSQRT(EIG(4)*EIG(5)*EIG(6))*TEMP(K)*DSQRT(TEMP(K))
      G=G+DUM*DLOG(QPF)
C
C             INTERNAL ROTATION FREE ENERGY(1-DIMENSIONAL)
C
      IF (N1DR.NE.0) THEN
         DO 4 I=1,N1DR
            QPF=0.35990D0*DSQRT(AI1D(I)*TEMP(K))/SYMM(I)
            G=G+DUM*DLOG(QPF)
    4    CONTINUE
      ENDIF
C
C             INTERNAL ROTATION FREE ENERGY(2-DIMENSIONAL)
C             N2DR IS THE NUMBER OF 2-D ROTORS(N2DR = 0, 1, OR 2).
C
      IF (N2DR.NE.0) THEN
C
C             PUT CURRENT COORDINATES(Q) IN TEMPORARY STORAGE.
C
         DO 10 I=1,I3N
            QTEM(I)=Q(I)
   10    CONTINUE
C
C             FOR A POLYATOMIC-ATOMIC REACTANT PAIR WITH ONE 2-D ROTOR,
C             FRAGMENT A MUST BE THE POLYATOMIC.
C
         N=NATOMA(1)
         WT=WTA(1)
         DO 11 I=1,N
            L(I)=LA(1,I)
   11    CONTINUE
         CALL GINROT(AAI,SYMA,VZ,WT,QPF,N,K)
         G=G+DUM*DLOG(QPF)
C
C                  RESET Q FOR FRAGMENT A
C
         NAA=3*N
         DO 16 I=1,NAA
            Q(I)=QTEM(I)
   16    CONTINUE
C
         IF (N2DR.NE.1) THEN
            N=NATOMB(1)
            WT=WTB(1)
            DO 12 I=1,N
               L(I)=LB(1,I)
   12       CONTINUE
            CALL GINROT(BBI,SYMB,VZ,WT,QPF,N,K)
            G=G+DUM*DLOG(QPF)
C
C                  RESET Q FOR FRAGMENT B
C
            II=NAA+1
            DO 13 I=II,I3N
               Q(I)=QTEM(I)
   13       CONTINUE
C
C                  RESET L ARRAY
C
            DO 17 I=1,NATOM
               L(I)=I
   17       CONTINUE
         ENDIF
      ENDIF
C
C             ZERO-POINT ENERGY ALONG THE REACTION PATH
C
   14 CONTINUE
      EZP=0.0D0
      II=8+N1DR+2*N2DR
      DO 15 I=II,I3N
         EZP=EZP+EIG(I)
   15 CONTINUE
C
C             TOTAL FREE ENERGY
C
      VQ=VZ+(EZP-EZM)/2.0D0/349.755D0
      G=G+VQ
C
C         FREE ENERGY TESTS
C
      IF (NCC.NE.0) THEN
         IF (NCC.LE.1) THEN
            IF (G.GT.GTEMP(K)) NFLAG(K)=1
            IF (G.LT.GTEMP(K)) NFLAG(K)=-1
            GOTO 8
         ENDIF
         IF (NFLAG(K).GE.1) THEN
            IF (G.GT.GTEMP(K)) GOTO 8
            NFLAG(K)=-1
            WRITE(6,50)TEMP(K),G,VQ
            GOTO 9
         ENDIF
         IF (G.GE.GTEMP(K)) THEN
            NFLAG(K)=1
            WRITE(6,51)TEMP(K),G,VQ
            GOTO 9
         ENDIF
      ENDIF
    8 WRITE(6,52)TEMP(K),G,VQ
    9 GTEMP(K)=G
      RETURN
      END
C
C         DETERMINE CLASSICAL HINDERED ROTOR PARTITION FUNCTION BY
C         10-POINT GAUSS QUADRATURE.
C
      SUBROUTINE GINROT(AI,SYM,VZ,WT,Q,N,K)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      COMMON/GPATHB/WM(3*ND1),TEMP(NDP),AI1D(5),AAI(2),BBI(2),SYMM(5),
     *SYMA,SYMB,GTEMP(NDP),NFLAG(NDP),N1DR,N2DR
      COMMON/PRLIST/T,V,H,TIME,NTZ,NT,ISEED0(8),NC,NX
      DIMENSION X(NDP),W(NDP),AI(2),QCM(3),VCM(3),VTP(NDP,NDP)
C
C         NP IS THE NUMBER OF INTEGRATION INTERVALS FOR PHI MOMENTUM (PPHI)
C         LIMIT FOR PPHI INTEGRATION IS CHOSEN SO THAT PPHI**2/2IKT IS 
C         10.0 FOR PPHI=PLIM.  WITH NP=2 THE PARTITION FUNCTION ERROR SHOULD
C         BE LESS THAN 0.1%.
C
C         MOMENT OF INERTIA AI(1) IS FOR THE THETA ROTATION.
C         MOMENT OF INERTIA AI(2) IS FOR THE PHI ROTATION.
C
      CALL GLPAR(-1.0D0,1.0D0,X,W,10)
      NP=2
      PLIM=DSQRT(10.0D0*2.0D0*AI(2)*C5*TEMP(K))
      BETA=1.0D0/C5/TEMP(K)
      PDEL=PLIM/DBLE(NP)
C
C         CALCULATE CENTER OF MASS COORDINATES FOR THE FRAGMENT
C
      CALL CENMAS(WT,QCM,VCM,N)
C
C         CALCULATE POTENTIAL ENERGY FOR THETA AND PHI ANGLES
C
      IF (K.LE.1.OR.N2DR.NE.1) THEN
         DO 600 J=1,10
            THETA=PI/2.0D0*(1.0D0+X(J))
            DO 500 L=1,10
               PHI=TWOPI/2.0D0*(1.0D0+X(L))
               CALL POTEN(THETA,PHI,QCM,N)
               VTP(J,L)=V
  500       CONTINUE
  600    CONTINUE
      ENDIF
C
      Q=0.0D0
      DO 400 II=1,NP
         PMAX=PDEL*DBLE(II)
         PMIN=PMAX-PDEL
         DO 300 I=1,10
            PPHI=(PMAX-PMIN)/2.0D0*X(I)+(PMAX+PMIN)/2.0D0
            FPHI=0.0D0
            DO 200 J=1,10
               THETA=PI/2.0D0*(1.0D0+X(J))
               FTHETA=0.0D0
               DO 100 L=1,10
                  VIR=(VTP(J,L)-VZ)*C1
                  FTHETA=FTHETA+DEXP(-BETA*VIR)*W(L)
  100          CONTINUE
               FTHETA=FTHETA*TWOPI/2.0D0
               FPHI=FPHI+FTHETA*DEXP(-BETA*PPHI**2
     *              /2.D0/AI(2)/DSIN(THETA)**2)*W(J)
  200       CONTINUE
            FPHI=FPHI*PI/2.0D0
            Q=Q+FPHI*W(I)
  300    CONTINUE
  400 CONTINUE
      Q=Q*PDEL/2.0D0
      Q=Q*0.143545D0*DSQRT(AI(1)*TEMP(K))*2.0D0/SYM
      WRITE(6,53)Q
   53 FORMAT(32X,37HINTERNAL ROTATION PARTITION FUNCTION=,D12.5)
      RETURN
      END
C
C         ROTATE MOLECULE BY THETA AND PHI ON ITS CENTER OF MASS AND
C         CALCULATE POTENTIAL ENERGY
C
      SUBROUTINE POTEN(THETA,PHI,QCM,N)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/WASTE/QQ(3*ND1),PP(3*ND1),WX,WY,WZ,L(ND1),NAM
      COMMON/COORS/R(ND1*(ND1+1)/2),THET(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      COMMON/PRLIST/T,V,H,TIME,NTZ,NT,ISEED0(8),NC,NX
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      DIMENSION QCM(3)
C
C          CALCULATE ANGLES
C
      THETH=THETA-HALFPI
      STHET=DSIN(THETH)
      CTHET=DCOS(THETH)
      SPHI=DSIN(PHI)
      CPHI=DCOS(PHI)
C
C          ROTATE FRAGMENT ABOUT ITS CENTER OF MASS.  FIRST ROTATE BY
C          THETA ABOUT THE X-AXIS AND THEN BY PHI ABOUT THE Z-AXIS.
C          THETA = 0-PI, AND PHI = 0-TWOPI.
C          THE REACTION PATH IS ALONG THE Y-AXIS.
C
      DO 1 I=1,N
         J=3*L(I)
         Q(J)=STHET*QQ(J-1)+CTHET*QQ(J)+QCM(3)
         Q(J-1)=-SPHI*QQ(J-2)+CPHI*CTHET*QQ(J-1)-CPHI*STHET*QQ(J)
     *          +QCM(2)
         Q(J-2)=CPHI*QQ(J-2)+SPHI*CTHET*QQ(J-1)-SPHI*STHET*QQ(J)+QCM(1)
    1 CONTINUE
      CALL DVDQ
      CALL ENERGY
      RETURN
      END
C
C         BARRIER EXCITATION
C         SELECT MOMENTA FOR THE REACTION COORDINATE
C
      SUBROUTINE BAREXC(WT,C,AM,EROT,N,NM)
      PARAMETER(ND1=100,NDP=10)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/PRLIST/T,V,H,TIME,NTZ,NT,ISEED0(8),NC,NX
      COMMON/WASTE/QQ(3*ND1),PP(3*ND1),WX,WY,WZ,L(ND1),NAM
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/CONSTN/C1,C2,C3,C4,C5,C6,C7,PI,HALFPI,TWOPI
      COMMON/SADDLE/EBAR,TBAR,EZERO,NBAR 
      DIMENSION C(3*ND1,3*ND1),QCM(3),VCM(3),AM(4)
    5 FORMAT(10X,28HREACTION COORDINATE ENERGY =,D18.9,9H KCAL/MOL,/)
   15 FORMAT(15X,17HINTERNAL ENERGY =,D18.9,9H KCAL/MOL,/)
C
C         CALCULATE VELOCITY FOR REACTION COORDINATE
C         THE REACTION COORDINATE IS HELD FIXED 
C
C                 FIXED ENERGY FOR REACTION COORDINATE
C
      RAND=RAND0(ISEED)
      IF (NBAR.EQ.1) THEN
         SDUM=C1*EBAR
         PBAR=DSQRT(2*SDUM)
      ENDIF
C
C                 FIXED TEMPERATURE FOR REACTION COORDINATE
C
      IF (NBAR.EQ.2) THEN
         DUM=DLOG(1.0D0-RAND)
         PBAR=DSQRT(-2.0D0*C5*TBAR*DUM)
      ENDIF
C
      IF (RAND.GE.0.5D0) PBAR=-PBAR
      WRITE(6,5)0.5D0*PBAR*PBAR/C1
C
C         TRANSFORM FROM NORMAL MODE TO CARTESIAN VELOCITY
C
      DO 20 I=1,N
         DO 10 K=1,3
            JJ=3*I+1-K
            J=3*L(I)+1-K
            P(J)=P(J)+C(JJ,NM)*PBAR*W(L(I))
   10    CONTINUE
   20 CONTINUE
C
C         CALCULATE CENTER OF MASS COORDINATES QQ AND MOMENTA PP
C
      CALL CENMAS(WT,QCM,VCM,N)
C
C         MOVE PP ARRAY TO P ARRAY AND QQ ARRAY TO Q ARRAY
C
      DO 40 I=1,N
         J=3*L(I)+1
         DO 30 K=1,3
            Q(J-K)=QQ(J-K)
            P(J-K)=PP(J-K)
   30    CONTINUE
   40 CONTINUE
      CALL DVDQ
      CALL ENERGY
C
C         RECALCULATE THE ROTATIONAL ENERGY AND ANGULAR MOMENTA
C
      CALL ROTN(AM,EROT,N)
C
      EINT=H-EZERO
      WRITE(6,15)EINT
C
      RETURN
      END
C
C         WRITE INFORMATION FOR THE SYBYL MOL FILE
C         FOR MOLECULAR GRAPHICS ANIMATION (IF NCOOR.EQ.1)
C
      SUBROUTINE SYBMOL
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER(ND1=100,NDP=10,NSYB=106)
      COMMON/FORCES/NATOMS,I3N,NST,NM,NB,NA,NLJ,NTAU,NEXP,NGHOST,
     *NTET,NVRR,NVRT,NVTT,NANG,NAXT,NSN2,NRYD,NHFD,NLEPSA,NLEPSB,NDMBE
      COMMON/PRLIST/T,V,H,TIME,NTZ,NT,ISEED0(8),NC,NX
      COMMON/QPDOT/Q(3*ND1),PDOT(3*ND1)
      COMMON/PQDOT/P(3*ND1),QDOT(3*ND1),W(ND1)
      COMMON/PRFLAG/NFQP,NCOOR,NFR,NUMR,NFB,NUMB,NFA,NUMA,NFTAU,NUMTAU,
     *NFTET,NUMTET,NFDH,NUMDH
      COMMON/PARRAY/KR(300),JR(300),KB(300),MB(300),IB(300),IA(300),
     *ITAU(300),ITET(300),IDH(300)
      COMMON/COORS/R(ND1*(ND1+1)/2),THETA(100),ALPHA(20),CTAU(20),
     *GR(20,5),TT(20,6),DANG(300)
      COMMON/SYBB/TITLE(36),SYBTI
      CHARACTER*2 LBSYB
      DIMENSION AWSYB(NSYB),IDSYB(NSYB),LBSYB(NSYB)
      DATA AWSYB/1.008,4.003,6.941,9.012,10.810,12.011,
     *14.007,15.999,18.998,20.170,22.990,24.305,
     *26.980,28.090,30.974,32.060,35.453,39.948,
     *39.102,39.962,44.960,47.900,50.941,51.996,
     *54.938,55.847,59.933,58.710,63.546,65.380,
     *69.720,72.590,74.922,78.960,79.904,83.890,
     *85.467,87.620,88.906,91.220,92.906,95.940,
     *98.906,101.070,102.906,106.040,107.868,112.410,
     *114.820,118.690,121.750,127.600,129.900,126.900,
     *131.300,132.905,137.330,138.905,140.120,140.908,
     *144.240,145.000,150.400,151.960,157.250,158.925,
     *162.500,164.930,167.260,168.934,173.040,174.970,
     *178.490,180.947,183.850,186.200,190.200,192.220,
     *195.090,196.966,200.590,204.370,207.200,208.981,
     *209.000,210.000,222.000,223.000,226.025,227.000,
     *232.038,231.036,238.029,237.048,244.000,243.000,
     *247.000,247.000,251.000,254.000,257.000,258.000,
     *259.000,260.000,78.9183,80.9163/
      DATA IDSYB/13,984,24,985,986,1,5,8,16,
     *987,21,988,25,27,12,10,15,990,
     *22,23,907,903,908,901,909,910,906,
     *911,912,913,914,915,916,917,14,918,
     *919,920,921,904,923,924,925,905,926,
     *927,928,929,930,931,932,933,933,17,
     *934,935,936,937,956,957,958,959,960,
     *961,962,963,964,965,966,967,968,969,
     *938,939,940,941,942,943,944,945,946,
     *947,948,949,950,951,952,953,954,955,
     *970,971,972,973,974,975,976,977,978,
     *979,980,981,982,983,14,14/
      DATA LBSYB/'H ','He','Li','Be','B ','C ','N ','O ','F ',
     *'Ne','Na','Mg','Al','Si','P ','S ','Cl','Ar',
     *'K ','Ca','Sc','Ti','V ','Cr','Mn','Fe','Co',
     *'Ni','Cu','Zn','Ga','Ge','As','Se','Br','Kr',
     *'Rb','Sr','Y ','Zr','Nb','Mo','Tc','Ru','Rh',
     *'Pd','Ag','Cd','In','Sn','Sb','Te','Te','I ',
     *'Xe','Cs','Ba','La','Ce','Pr','Nd','Pm','Sm',
     *'Eu','Gd','Tb','Dy','Ho','Er','Tm','Yb','Lu',
     *'Hf','Ta','W ','Re','Os','Ir','Pt','Au','Hg',
     *'Tl','Pb','Bi','Po','At','Rn','Fr','Ra','Ac',
     *'Th','Pa','U ','Np','Pu','Am','Cm','Bk','Cf',
     *'Es','Fm','Md','No','Lr','Br','Br'/
   20 FORMAT(1X,'XXXXXXXXXXXXXXXXXXXXX SYBYL MOL FILE  Number ',I4,
     *' XXXXXXXXXXXXXXXXXXXXXXX')
   30 FORMAT(I4,1X,'MOL',10X,10A4,11X,I4)
   40 FORMAT(2I4,3F9.4,2A2)
   50 FORMAT(3I4,9X,I4)
   60 FORMAT(' NATOMS = ',I4,'		TIME INCREMENT = ',F9.2)
      IONE=1
      IZERO=0
      WRITE(8,*)
      WRITE(8,20)NTZ
      WRITE(8,30)NATOMS,(TITLE(I),I=1,10),IZERO
      DO 110 I=1,NATOMS
         TMP=10.0D0
         DO 100 J=1,NSYB
            DUM=DABS(AWSYB(J)-W(I))
            IF (DUM.LT.TMP) THEN
               TMP=DUM
               IDX=J
            ENDIF
  100    CONTINUE
         WRITE(8,40)I,IDSYB(IDX),Q(3*I-2),Q(3*I-1),Q(3*I),'  ',
     *         LBSYB(IDX)
  110 CONTINUE
      WRITE(8,30)NUMR
      DO 120 I=1,NUMR
         WRITE(8,50)I,JR(I),KR(I),IONE
  120 CONTINUE
      WRITE(8,30)IZERO
      WRITE(8,*)
      WRITE(8,60)NATOMS,SYBTI
      WRITE(8,*)
      RETURN
      END
C
C         GET CURRENT TIME AND DATE
C         (UNIX SYSTEMS ONLY)
C
      SUBROUTINE FDATE(ADATE)
      CHARACTER*30 ADATE
   10 FORMAT(A)
      CALL SYSTEM('date > venus.date')
      OPEN(UNIT=99,FILE='venus.date',FORM='FORMATTED')
      REWIND(99)
      READ(99,10)ADATE
      CLOSE(UNIT=99)
      CALL SYSTEM('rm venus.date')
      RETURN
      END
C
C         GET CURRENT TIME AND DATE
C         (CRAY-UNICOS SYSTEM WITH CFT77 COMPILER).
C
C      SUBROUTINE GDATE(ADATE)
C     CHARACTER*30 ADATE
C     CALL DATE(ADATE(1:11))
C     CALL CLOCK(ADATE(15:26))
C      RETURN
C      END


C------Swapnil--------------------------------------
        SUBROUTINE  PROBJ(T,AI,ISEED,JFINAL)
        IMPLICIT DOUBLE PRECISION (A-H, O-Z)

        B=48.5085/(2*AI*T)
        CALL JMAXCALC(T,AI,JMAX,JPEAK)
        PJMPQ=(2*JPEAK+1)*EXP(-JPEAK*(JPEAK+1)*B)
10      DUM=RAND0(ISEED)
        J = DUM*DBLE(JMAX)+0.5
        PJQ=(2*J+1)*EXP(-J*(J+1)*B)
        PF=PJQ/PJMPQ
        PCOMP=RAND0(ISEED)
        IF(PF.LT.PCOMP) GOTO 10
        JFINAL = J

        RETURN
        END

C------Swapnil----------------------------------------
        SUBROUTINE JMAXCALC(T,AI,JMAX,JPEAK)
        IMPLICIT DOUBLE PRECISION (A-H, O-Z)
        COMMON/WNJ/WD1,WD2
C       T: Kelvin
C       AI: Amu.A2

        PLIMIT=0.001
        IFIRST=0
        JTOTAL=50

C       [ H**2/KB=48.5085 (FOR AI (IN AMU-A2) AND T IN KELVIN) ]
        H2KB=48.5085
        B=H2KB/(2.0D0*AI*T)
        TC=H2KB/2.0d0/AI

        IF(WD1.EQ.WD2)THEN
          NSYM=1
          WRITE(6,*)'DIATOM IS HOMONUCLEAR'
          WRITE(6,*)'MODIFICATIONS NEEDED FOR HOMONUCLEAR DIATOM'
        ELSE
          NSYM=1
          WRITE(6,*)'DIATOM IS HETERONUCLEAR'
        ENDIF

        Q=T/(DBLE(NSYM)*TC)*(1.0D0+1.0D0/3.0D0*TC/T+
     *    1.0D0/15.0D0*(TC/T)**2+4.0D0/315.0D0*(TC/T)**3)

        DO K=1,JTOTAL+1
           J=K-1
           PJ=(2*J+1)*EXP(-J*(J+1)*B)/Q
             IF((IFIRST.EQ.0).AND.(PJ.LT.PLIMIT))THEN
               JMAX=J
               IFIRST=1
             ENDIF
        ENDDO
        JPEAK=SQRT(T/2.0d0/TC)

        RETURN
        END
