ROTATE 1.0 (3/17/1999)

by Jose C. Corchado, Jordi Villa, and Donald G. Truhlar.

ROTATE is a FORTRAN program that uses as an input file a POLYRATE
poly.fu31, poly.fu31, or poly.fu40 input file and orients the geometries
on that file in a consistent way along the reaction path.  This program
is based on the Chen orientation algorithm (Z. Chen, Theor. Chim. Acta, 
1989, 75, 481).

The poly.fu30, poly.fu31, and poly.fu40 input files for POLYRATE are 
usually constructed from electronic structure calculations carried out by
one of the several available packages. These packages usually re-orient
the input geometry in a way that allows the program to take advantage
of the symmetry or the system, or just to put the molecule in the
orientation preferred by the program.  As a consequence, the input
geometry is oriented in a different way than the output geometry, 
gradients, and/or Hessians.  If we do not calculate the curvature 
of the reaction path, the properties that POLYRATE uses for the
dynamical calculations are rotationally invariant, and the results

----


the output geometry, gradients and/or Hessians. If we do not calculate
the curvarture of the reaction path, the properties that POLYRATE 
uses for the dynamical calculations are rotationally invariant,
and the results will not be affected by any rotation in a given point.
However, if we want to calculate the reaction path curvature, we need
to calculate the derivative of the Cartesian components of the gradient 
with respecto to the reaction coordinate, s. For doing this, we need
that all the points along the reaction path be oriented in the same
way. Otherwise, the numerical differentiation will lead to erroneous
results.

The progam uses an user input geometry (which is assumed to be the
saddle point geometry) and reorients the first point along each side
of the reaction path according to it. The following points along the
reaction path are reoriented using as reference geometry the previous
point. This reorientation is done by means of the Chen algorithm, as
described in the original paper. However, this algorithm only works
for small rotations, so before applying Chen's method the program
performs a series of trial rotations in order to obtain the closest
orientation to the reference geometry, and next applies Chen's method
on the most similar orientation.

Chen's method is based on the minimization of the distance in
mass-scaled cartesian coordinates of the two geometries. In some
cases, this minimization does not converge. If it is the case, there
is no way to solve the reorientation problem with this program.

The program can also recalculate the values of the reaction
coordinate, s, as a straight line between each pair of two consecutive
points. This can be useful, e.g., for calculating isotope effects.

There are three versions of the program ROTATE: ROTATE30, ROTATE31,
and ROTATE40, which are used for reorienting the geometries in a
poly.fu30, poly.fu31, and poly.fu40 input files, respectively. It has
to be noted that in order to perform this rotation it is necessary to
give the geometry of each point. This is sometimes not the case for
the poly.fu30 and poly.fu40 input files. Thus, when we supply
additional information on the gradients of one or two points on each 
side of the Hessian points in poly.fu30 or poly.fu40, the geometry of
these one or two additional points per Hessian point is not given. This
is the reason why only poly.fu30 files with LOPT(6)=2 will work with
ROTATE30, and only poly.fu40 input files with GRADER=NOEXTRA will work
with ROTATE40.

An additional limitation of the program is that it only works with
poly.fu30 and poly.fu40 input files that do not include any anharmonic
information.

Along with the source code, a test run is included for each program,
as well as a sample script for compiling and running the code.

The program requires two input files: one of the POLYRATE input files
poly.fu30, poly.fu31, or poly.fu40, and a ROTATE input file. This
input file, which is read has poly.fu5, has the same format for the 
three different versions of the code, and it is described next.

The first line of the poly.fu5 input file consists of seven integers
that indicate the number of atoms in each system. The first integer is
natom, the number of atoms in the saddle point structure (which is assumed 
to be the same as the number of atoms in the points along the reaction
path) followed by six integers indicating the number of atoms in the
first reactant species, the second reactant, the first product, the
second product, the reactants well, and the products well,
respectively. If one or mor of these species don't exist, a zero has
to be input in its place.

The second line is a list of natom + 1 real numbers. The first one
indicates the mass used for scaling the Cartesian coordinates (which
has to be the same as SCALEMASS in the PATH section of the POLYRATE
poly.fu5 input file. The following natom real numbers are the masses
of each of the atoms present in the points along the reaction path, in
the same order as in these points. All the masses have to be input in
amu.

The third line is an integer that indicates if the values of s read
from the poly.fu30, poly.fu31 or poly.fu40 input files have to be kept
unchanged or if the user wants to put in their places the values
computed by the program. If this integer is set to one, the values
of s read are discarded and the calculated values are printed in the
output file. Any other value leads the program to preserve the s
values as input in the poly.fu30, poly.fu31, or poly.fu40 input file.

The last information to be input in the ROTATE poly.fu5 input file is
the geometry in Cartesian coordinates of the saddle point in atomic 
units. The three Cartesian coordinates for each atom have to be
preceded by an integer, which acts as a label. The ordering of the
atoms has to be the same as in the points along the reaction path, and
the labels have to start in the integer 1 for the first atom and
finish with the integer natom for the last atom.

The output of the program is a poly.fu30, poly.fu31 or poly.fu40 file
written as poly.fu60, which can be used in a POLYRATE calculation
without further modification.
